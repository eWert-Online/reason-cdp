open Ppx_yojson_conv_lib.Yojson_conv.Primitives

type empty [@@deriving yojson]
type number = [ `Int of int | `Float of float ]

let number_of_yojson = function
  | `Float f when Float.is_integer f -> `Int (int_of_float f)
  | `Float f -> `Float f
  | `Int i -> `Int i
  | _ -> failwith "Not a number"

let yojson_of_number = function `Float f -> `Float f | `Int i -> `Int i

type assoc = (string * string) list

let assoc_of_yojson = function
  | `Assoc l ->
      l |> List.map (fun (key, value) -> (key, string_of_yojson value))
  | _ -> []

let yojson_of_assoc assoc =
  `Assoc (assoc |> List.map (fun (key, value) -> (key, yojson_of_string value)))

module rec Accessibility : sig
  module rec AXNodeId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique accessibility node identifier."]
  end

  and AXValueType : sig
    type _axvaluetype =
      [ `boolean
      | `tristate
      | `booleanOrUndefined
      | `idref
      | `idrefList
      | `integer
      | `node
      | `nodeList
      | `number
      | `string
      | `computedString
      | `token
      | `tokenList
      | `domRelation
      | `role
      | `internalRole
      | `valueUndefined ]

    val _axvaluetype_of_yojson : Yojson.Basic.t -> _axvaluetype
    val yojson_of__axvaluetype : _axvaluetype -> Yojson.Basic.t

    type t = _axvaluetype
    [@@deriving yojson] [@@ocaml.doc "Enum of possible property types."]
  end

  and AXValueSourceType : sig
    type _axvaluesourcetype =
      [ `attribute
      | `implicit
      | `style
      | `contents
      | `placeholder
      | `relatedElement ]

    val _axvaluesourcetype_of_yojson : Yojson.Basic.t -> _axvaluesourcetype
    val yojson_of__axvaluesourcetype : _axvaluesourcetype -> Yojson.Basic.t

    type t = _axvaluesourcetype
    [@@deriving yojson] [@@ocaml.doc "Enum of possible property sources."]
  end

  and AXValueNativeSourceType : sig
    type _axvaluenativesourcetype =
      [ `description
      | `figcaption
      | `label
      | `labelfor
      | `labelwrapped
      | `legend
      | `rubyannotation
      | `tablecaption
      | `title
      | `other ]

    val _axvaluenativesourcetype_of_yojson :
      Yojson.Basic.t -> _axvaluenativesourcetype

    val yojson_of__axvaluenativesourcetype :
      _axvaluenativesourcetype -> Yojson.Basic.t

    type t = _axvaluenativesourcetype
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum of possible native property sources (as a subtype of a particular \
       AXValueSourceType)."]
  end

  and AXValueSource : sig
    type t = {
      type_ : AXValueSourceType.t;
          [@key "type"] [@ocaml.doc "What type of source this is."]
      value : AXValue.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value of this property source."]
      attribute : string option;
          [@key "attribute"]
          [@yojson.option]
          [@ocaml.doc "The name of the relevant attribute, if any."]
      attributeValue : AXValue.t option;
          [@key "attributeValue"]
          [@yojson.option]
          [@ocaml.doc "The value of the relevant attribute, if any."]
      superseded : bool option;
          [@key "superseded"]
          [@yojson.option]
          [@ocaml.doc
            "Whether this source is superseded by a higher priority source."]
      nativeSource : AXValueNativeSourceType.t option;
          [@key "nativeSource"]
          [@yojson.option]
          [@ocaml.doc
            "The native markup source for this value, e.g. a `<label>` element."]
      nativeSourceValue : AXValue.t option;
          [@key "nativeSourceValue"]
          [@yojson.option]
          [@ocaml.doc
            "The value, such as a node or node list, of the native source."]
      invalid : bool option;
          [@key "invalid"]
          [@yojson.option]
          [@ocaml.doc "Whether the value for this property is invalid."]
      invalidReason : string option;
          [@key "invalidReason"]
          [@yojson.option]
          [@ocaml.doc "Reason for the value being invalid, if it is."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "A single source for a computed AX property."]
  end

  and AXRelatedNode : sig
    type t = {
      backendDOMNodeId : DOM.BackendNodeId.t;
          [@key "backendDOMNodeId"]
          [@ocaml.doc "The BackendNodeId of the related DOM node."]
      idref : string option;
          [@key "idref"]
          [@yojson.option]
          [@ocaml.doc "The IDRef value provided, if any."]
      text : string option;
          [@key "text"]
          [@yojson.option]
          [@ocaml.doc
            "The text alternative of this node in the current context."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AXProperty : sig
    type t = {
      name : AXPropertyName.t;
          [@key "name"] [@ocaml.doc "The name of this property."]
      value : AXValue.t;
          [@key "value"] [@ocaml.doc "The value of this property."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AXValue : sig
    type t = {
      type_ : AXValueType.t;
          [@key "type"] [@ocaml.doc "The type of this value."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The computed value of this property."]
      relatedNodes : AXRelatedNode.t list option;
          [@key "relatedNodes"]
          [@yojson.option]
          [@ocaml.doc "One or more related nodes, if applicable."]
      sources : AXValueSource.t list option;
          [@key "sources"]
          [@yojson.option]
          [@ocaml.doc
            "The sources which contributed to the computation of this property."]
    }
    [@@deriving yojson] [@@ocaml.doc "A single computed AX property."]
  end

  and AXPropertyName : sig
    type _axpropertyname =
      [ `busy
      | `disabled
      | `editable
      | `focusable
      | `focused
      | `hidden
      | `hiddenRoot
      | `invalid
      | `keyshortcuts
      | `settable
      | `roledescription
      | `live
      | `atomic
      | `relevant
      | `root
      | `autocomplete
      | `hasPopup
      | `level
      | `multiselectable
      | `orientation
      | `multiline
      | `readonly
      | `required
      | `valuemin
      | `valuemax
      | `valuetext
      | `checked
      | `expanded
      | `modal
      | `pressed
      | `selected
      | `activedescendant
      | `controls
      | `describedby
      | `details
      | `errormessage
      | `flowto
      | `labelledby
      | `owns ]

    val _axpropertyname_of_yojson : Yojson.Basic.t -> _axpropertyname
    val yojson_of__axpropertyname : _axpropertyname -> Yojson.Basic.t

    type t = _axpropertyname
    [@@deriving yojson]
    [@@ocaml.doc
      "Values of AXProperty name:\n\
       - from 'busy' to 'roledescription': states which apply to every AX node\n\
       - from 'live' to 'root': attributes which apply to nodes in live regions\n\
       - from 'autocomplete' to 'valuetext': attributes which apply to widgets\n\
       - from 'checked' to 'selected': states which apply to widgets\n\
       - from 'activedescendant' to 'owns' - relationships between elements \
       other than parent/child/sibling."]
  end

  and AXNode : sig
    type t = {
      nodeId : AXNodeId.t;
          [@key "nodeId"] [@ocaml.doc "Unique identifier for this node."]
      ignored : bool;
          [@key "ignored"]
          [@ocaml.doc "Whether this node is ignored for accessibility"]
      ignoredReasons : AXProperty.t list option;
          [@key "ignoredReasons"]
          [@yojson.option]
          [@ocaml.doc "Collection of reasons why this node is hidden."]
      role : AXValue.t option;
          [@key "role"]
          [@yojson.option]
          [@ocaml.doc "This `Node`'s role, whether explicit or implicit."]
      chromeRole : AXValue.t option;
          [@key "chromeRole"]
          [@yojson.option]
          [@ocaml.doc "This `Node`'s Chrome raw role."]
      name : AXValue.t option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "The accessible name for this `Node`."]
      description : AXValue.t option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc "The accessible description for this `Node`."]
      value : AXValue.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value for this `Node`."]
      properties : AXProperty.t list option;
          [@key "properties"]
          [@yojson.option]
          [@ocaml.doc "All other properties"]
      parentId : AXNodeId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc "ID for this node's parent."]
      childIds : AXNodeId.t list option;
          [@key "childIds"]
          [@yojson.option]
          [@ocaml.doc "IDs for each of this node's child nodes."]
      backendDOMNodeId : DOM.BackendNodeId.t option;
          [@key "backendDOMNodeId"]
          [@yojson.option]
          [@ocaml.doc "The backend ID for the associated DOM node, if any."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc
            "The frame ID for the frame associated with this nodes document."]
    }
    [@@deriving yojson] [@@ocaml.doc "A node in the accessibility tree."]
  end
end = struct
  module rec AXNodeId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique accessibility node identifier."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique accessibility node identifier."]
  end

  and AXValueType : sig
    type _axvaluetype =
      [ `boolean
      | `tristate
      | `booleanOrUndefined
      | `idref
      | `idrefList
      | `integer
      | `node
      | `nodeList
      | `number
      | `string
      | `computedString
      | `token
      | `tokenList
      | `domRelation
      | `role
      | `internalRole
      | `valueUndefined ]

    val _axvaluetype_of_yojson : Yojson.Basic.t -> _axvaluetype
    val yojson_of__axvaluetype : _axvaluetype -> Yojson.Basic.t

    type t = _axvaluetype
    [@@deriving yojson] [@@ocaml.doc "Enum of possible property types."]
  end = struct
    type _axvaluetype =
      [ `boolean
      | `tristate
      | `booleanOrUndefined
      | `idref
      | `idrefList
      | `integer
      | `node
      | `nodeList
      | `number
      | `string
      | `computedString
      | `token
      | `tokenList
      | `domRelation
      | `role
      | `internalRole
      | `valueUndefined ]

    let _axvaluetype_of_yojson = function
      | `String "boolean" -> `boolean
      | `String "tristate" -> `tristate
      | `String "booleanOrUndefined" -> `booleanOrUndefined
      | `String "idref" -> `idref
      | `String "idrefList" -> `idrefList
      | `String "integer" -> `integer
      | `String "node" -> `node
      | `String "nodeList" -> `nodeList
      | `String "number" -> `number
      | `String "string" -> `string
      | `String "computedString" -> `computedString
      | `String "token" -> `token
      | `String "tokenList" -> `tokenList
      | `String "domRelation" -> `domRelation
      | `String "role" -> `role
      | `String "internalRole" -> `internalRole
      | `String "valueUndefined" -> `valueUndefined
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__axvaluetype = function
      | `boolean -> `String "boolean"
      | `tristate -> `String "tristate"
      | `booleanOrUndefined -> `String "booleanOrUndefined"
      | `idref -> `String "idref"
      | `idrefList -> `String "idrefList"
      | `integer -> `String "integer"
      | `node -> `String "node"
      | `nodeList -> `String "nodeList"
      | `number -> `String "number"
      | `string -> `String "string"
      | `computedString -> `String "computedString"
      | `token -> `String "token"
      | `tokenList -> `String "tokenList"
      | `domRelation -> `String "domRelation"
      | `role -> `String "role"
      | `internalRole -> `String "internalRole"
      | `valueUndefined -> `String "valueUndefined"

    type t = _axvaluetype
    [@@deriving yojson] [@@ocaml.doc "Enum of possible property types."]
  end

  and AXValueSourceType : sig
    type _axvaluesourcetype =
      [ `attribute
      | `implicit
      | `style
      | `contents
      | `placeholder
      | `relatedElement ]

    val _axvaluesourcetype_of_yojson : Yojson.Basic.t -> _axvaluesourcetype
    val yojson_of__axvaluesourcetype : _axvaluesourcetype -> Yojson.Basic.t

    type t = _axvaluesourcetype
    [@@deriving yojson] [@@ocaml.doc "Enum of possible property sources."]
  end = struct
    type _axvaluesourcetype =
      [ `attribute
      | `implicit
      | `style
      | `contents
      | `placeholder
      | `relatedElement ]

    let _axvaluesourcetype_of_yojson = function
      | `String "attribute" -> `attribute
      | `String "implicit" -> `implicit
      | `String "style" -> `style
      | `String "contents" -> `contents
      | `String "placeholder" -> `placeholder
      | `String "relatedElement" -> `relatedElement
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__axvaluesourcetype = function
      | `attribute -> `String "attribute"
      | `implicit -> `String "implicit"
      | `style -> `String "style"
      | `contents -> `String "contents"
      | `placeholder -> `String "placeholder"
      | `relatedElement -> `String "relatedElement"

    type t = _axvaluesourcetype
    [@@deriving yojson] [@@ocaml.doc "Enum of possible property sources."]
  end

  and AXValueNativeSourceType : sig
    type _axvaluenativesourcetype =
      [ `description
      | `figcaption
      | `label
      | `labelfor
      | `labelwrapped
      | `legend
      | `rubyannotation
      | `tablecaption
      | `title
      | `other ]

    val _axvaluenativesourcetype_of_yojson :
      Yojson.Basic.t -> _axvaluenativesourcetype

    val yojson_of__axvaluenativesourcetype :
      _axvaluenativesourcetype -> Yojson.Basic.t

    type t = _axvaluenativesourcetype
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum of possible native property sources (as a subtype of a particular \
       AXValueSourceType)."]
  end = struct
    type _axvaluenativesourcetype =
      [ `description
      | `figcaption
      | `label
      | `labelfor
      | `labelwrapped
      | `legend
      | `rubyannotation
      | `tablecaption
      | `title
      | `other ]

    let _axvaluenativesourcetype_of_yojson = function
      | `String "description" -> `description
      | `String "figcaption" -> `figcaption
      | `String "label" -> `label
      | `String "labelfor" -> `labelfor
      | `String "labelwrapped" -> `labelwrapped
      | `String "legend" -> `legend
      | `String "rubyannotation" -> `rubyannotation
      | `String "tablecaption" -> `tablecaption
      | `String "title" -> `title
      | `String "other" -> `other
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__axvaluenativesourcetype = function
      | `description -> `String "description"
      | `figcaption -> `String "figcaption"
      | `label -> `String "label"
      | `labelfor -> `String "labelfor"
      | `labelwrapped -> `String "labelwrapped"
      | `legend -> `String "legend"
      | `rubyannotation -> `String "rubyannotation"
      | `tablecaption -> `String "tablecaption"
      | `title -> `String "title"
      | `other -> `String "other"

    type t = _axvaluenativesourcetype
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum of possible native property sources (as a subtype of a particular \
       AXValueSourceType)."]
  end

  and AXValueSource : sig
    type t = {
      type_ : AXValueSourceType.t;
          [@key "type"] [@ocaml.doc "What type of source this is."]
      value : AXValue.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value of this property source."]
      attribute : string option;
          [@key "attribute"]
          [@yojson.option]
          [@ocaml.doc "The name of the relevant attribute, if any."]
      attributeValue : AXValue.t option;
          [@key "attributeValue"]
          [@yojson.option]
          [@ocaml.doc "The value of the relevant attribute, if any."]
      superseded : bool option;
          [@key "superseded"]
          [@yojson.option]
          [@ocaml.doc
            "Whether this source is superseded by a higher priority source."]
      nativeSource : AXValueNativeSourceType.t option;
          [@key "nativeSource"]
          [@yojson.option]
          [@ocaml.doc
            "The native markup source for this value, e.g. a `<label>` element."]
      nativeSourceValue : AXValue.t option;
          [@key "nativeSourceValue"]
          [@yojson.option]
          [@ocaml.doc
            "The value, such as a node or node list, of the native source."]
      invalid : bool option;
          [@key "invalid"]
          [@yojson.option]
          [@ocaml.doc "Whether the value for this property is invalid."]
      invalidReason : string option;
          [@key "invalidReason"]
          [@yojson.option]
          [@ocaml.doc "Reason for the value being invalid, if it is."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "A single source for a computed AX property."]
  end = struct
    type t = {
      type_ : AXValueSourceType.t;
          [@key "type"] [@ocaml.doc "What type of source this is."]
      value : AXValue.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value of this property source."]
      attribute : string option;
          [@key "attribute"]
          [@yojson.option]
          [@ocaml.doc "The name of the relevant attribute, if any."]
      attributeValue : AXValue.t option;
          [@key "attributeValue"]
          [@yojson.option]
          [@ocaml.doc "The value of the relevant attribute, if any."]
      superseded : bool option;
          [@key "superseded"]
          [@yojson.option]
          [@ocaml.doc
            "Whether this source is superseded by a higher priority source."]
      nativeSource : AXValueNativeSourceType.t option;
          [@key "nativeSource"]
          [@yojson.option]
          [@ocaml.doc
            "The native markup source for this value, e.g. a `<label>` element."]
      nativeSourceValue : AXValue.t option;
          [@key "nativeSourceValue"]
          [@yojson.option]
          [@ocaml.doc
            "The value, such as a node or node list, of the native source."]
      invalid : bool option;
          [@key "invalid"]
          [@yojson.option]
          [@ocaml.doc "Whether the value for this property is invalid."]
      invalidReason : string option;
          [@key "invalidReason"]
          [@yojson.option]
          [@ocaml.doc "Reason for the value being invalid, if it is."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "A single source for a computed AX property."]
  end

  and AXRelatedNode : sig
    type t = {
      backendDOMNodeId : DOM.BackendNodeId.t;
          [@key "backendDOMNodeId"]
          [@ocaml.doc "The BackendNodeId of the related DOM node."]
      idref : string option;
          [@key "idref"]
          [@yojson.option]
          [@ocaml.doc "The IDRef value provided, if any."]
      text : string option;
          [@key "text"]
          [@yojson.option]
          [@ocaml.doc
            "The text alternative of this node in the current context."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      backendDOMNodeId : DOM.BackendNodeId.t;
          [@key "backendDOMNodeId"]
          [@ocaml.doc "The BackendNodeId of the related DOM node."]
      idref : string option;
          [@key "idref"]
          [@yojson.option]
          [@ocaml.doc "The IDRef value provided, if any."]
      text : string option;
          [@key "text"]
          [@yojson.option]
          [@ocaml.doc
            "The text alternative of this node in the current context."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AXProperty : sig
    type t = {
      name : AXPropertyName.t;
          [@key "name"] [@ocaml.doc "The name of this property."]
      value : AXValue.t;
          [@key "value"] [@ocaml.doc "The value of this property."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      name : AXPropertyName.t;
          [@key "name"] [@ocaml.doc "The name of this property."]
      value : AXValue.t;
          [@key "value"] [@ocaml.doc "The value of this property."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AXValue : sig
    type t = {
      type_ : AXValueType.t;
          [@key "type"] [@ocaml.doc "The type of this value."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The computed value of this property."]
      relatedNodes : AXRelatedNode.t list option;
          [@key "relatedNodes"]
          [@yojson.option]
          [@ocaml.doc "One or more related nodes, if applicable."]
      sources : AXValueSource.t list option;
          [@key "sources"]
          [@yojson.option]
          [@ocaml.doc
            "The sources which contributed to the computation of this property."]
    }
    [@@deriving yojson] [@@ocaml.doc "A single computed AX property."]
  end = struct
    type t = {
      type_ : AXValueType.t;
          [@key "type"] [@ocaml.doc "The type of this value."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The computed value of this property."]
      relatedNodes : AXRelatedNode.t list option;
          [@key "relatedNodes"]
          [@yojson.option]
          [@ocaml.doc "One or more related nodes, if applicable."]
      sources : AXValueSource.t list option;
          [@key "sources"]
          [@yojson.option]
          [@ocaml.doc
            "The sources which contributed to the computation of this property."]
    }
    [@@deriving yojson] [@@ocaml.doc "A single computed AX property."]
  end

  and AXPropertyName : sig
    type _axpropertyname =
      [ `busy
      | `disabled
      | `editable
      | `focusable
      | `focused
      | `hidden
      | `hiddenRoot
      | `invalid
      | `keyshortcuts
      | `settable
      | `roledescription
      | `live
      | `atomic
      | `relevant
      | `root
      | `autocomplete
      | `hasPopup
      | `level
      | `multiselectable
      | `orientation
      | `multiline
      | `readonly
      | `required
      | `valuemin
      | `valuemax
      | `valuetext
      | `checked
      | `expanded
      | `modal
      | `pressed
      | `selected
      | `activedescendant
      | `controls
      | `describedby
      | `details
      | `errormessage
      | `flowto
      | `labelledby
      | `owns ]

    val _axpropertyname_of_yojson : Yojson.Basic.t -> _axpropertyname
    val yojson_of__axpropertyname : _axpropertyname -> Yojson.Basic.t

    type t = _axpropertyname
    [@@deriving yojson]
    [@@ocaml.doc
      "Values of AXProperty name:\n\
       - from 'busy' to 'roledescription': states which apply to every AX node\n\
       - from 'live' to 'root': attributes which apply to nodes in live regions\n\
       - from 'autocomplete' to 'valuetext': attributes which apply to widgets\n\
       - from 'checked' to 'selected': states which apply to widgets\n\
       - from 'activedescendant' to 'owns' - relationships between elements \
       other than parent/child/sibling."]
  end = struct
    type _axpropertyname =
      [ `busy
      | `disabled
      | `editable
      | `focusable
      | `focused
      | `hidden
      | `hiddenRoot
      | `invalid
      | `keyshortcuts
      | `settable
      | `roledescription
      | `live
      | `atomic
      | `relevant
      | `root
      | `autocomplete
      | `hasPopup
      | `level
      | `multiselectable
      | `orientation
      | `multiline
      | `readonly
      | `required
      | `valuemin
      | `valuemax
      | `valuetext
      | `checked
      | `expanded
      | `modal
      | `pressed
      | `selected
      | `activedescendant
      | `controls
      | `describedby
      | `details
      | `errormessage
      | `flowto
      | `labelledby
      | `owns ]

    let _axpropertyname_of_yojson = function
      | `String "busy" -> `busy
      | `String "disabled" -> `disabled
      | `String "editable" -> `editable
      | `String "focusable" -> `focusable
      | `String "focused" -> `focused
      | `String "hidden" -> `hidden
      | `String "hiddenRoot" -> `hiddenRoot
      | `String "invalid" -> `invalid
      | `String "keyshortcuts" -> `keyshortcuts
      | `String "settable" -> `settable
      | `String "roledescription" -> `roledescription
      | `String "live" -> `live
      | `String "atomic" -> `atomic
      | `String "relevant" -> `relevant
      | `String "root" -> `root
      | `String "autocomplete" -> `autocomplete
      | `String "hasPopup" -> `hasPopup
      | `String "level" -> `level
      | `String "multiselectable" -> `multiselectable
      | `String "orientation" -> `orientation
      | `String "multiline" -> `multiline
      | `String "readonly" -> `readonly
      | `String "required" -> `required
      | `String "valuemin" -> `valuemin
      | `String "valuemax" -> `valuemax
      | `String "valuetext" -> `valuetext
      | `String "checked" -> `checked
      | `String "expanded" -> `expanded
      | `String "modal" -> `modal
      | `String "pressed" -> `pressed
      | `String "selected" -> `selected
      | `String "activedescendant" -> `activedescendant
      | `String "controls" -> `controls
      | `String "describedby" -> `describedby
      | `String "details" -> `details
      | `String "errormessage" -> `errormessage
      | `String "flowto" -> `flowto
      | `String "labelledby" -> `labelledby
      | `String "owns" -> `owns
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__axpropertyname = function
      | `busy -> `String "busy"
      | `disabled -> `String "disabled"
      | `editable -> `String "editable"
      | `focusable -> `String "focusable"
      | `focused -> `String "focused"
      | `hidden -> `String "hidden"
      | `hiddenRoot -> `String "hiddenRoot"
      | `invalid -> `String "invalid"
      | `keyshortcuts -> `String "keyshortcuts"
      | `settable -> `String "settable"
      | `roledescription -> `String "roledescription"
      | `live -> `String "live"
      | `atomic -> `String "atomic"
      | `relevant -> `String "relevant"
      | `root -> `String "root"
      | `autocomplete -> `String "autocomplete"
      | `hasPopup -> `String "hasPopup"
      | `level -> `String "level"
      | `multiselectable -> `String "multiselectable"
      | `orientation -> `String "orientation"
      | `multiline -> `String "multiline"
      | `readonly -> `String "readonly"
      | `required -> `String "required"
      | `valuemin -> `String "valuemin"
      | `valuemax -> `String "valuemax"
      | `valuetext -> `String "valuetext"
      | `checked -> `String "checked"
      | `expanded -> `String "expanded"
      | `modal -> `String "modal"
      | `pressed -> `String "pressed"
      | `selected -> `String "selected"
      | `activedescendant -> `String "activedescendant"
      | `controls -> `String "controls"
      | `describedby -> `String "describedby"
      | `details -> `String "details"
      | `errormessage -> `String "errormessage"
      | `flowto -> `String "flowto"
      | `labelledby -> `String "labelledby"
      | `owns -> `String "owns"

    type t = _axpropertyname
    [@@deriving yojson]
    [@@ocaml.doc
      "Values of AXProperty name:\n\
       - from 'busy' to 'roledescription': states which apply to every AX node\n\
       - from 'live' to 'root': attributes which apply to nodes in live regions\n\
       - from 'autocomplete' to 'valuetext': attributes which apply to widgets\n\
       - from 'checked' to 'selected': states which apply to widgets\n\
       - from 'activedescendant' to 'owns' - relationships between elements \
       other than parent/child/sibling."]
  end

  and AXNode : sig
    type t = {
      nodeId : AXNodeId.t;
          [@key "nodeId"] [@ocaml.doc "Unique identifier for this node."]
      ignored : bool;
          [@key "ignored"]
          [@ocaml.doc "Whether this node is ignored for accessibility"]
      ignoredReasons : AXProperty.t list option;
          [@key "ignoredReasons"]
          [@yojson.option]
          [@ocaml.doc "Collection of reasons why this node is hidden."]
      role : AXValue.t option;
          [@key "role"]
          [@yojson.option]
          [@ocaml.doc "This `Node`'s role, whether explicit or implicit."]
      chromeRole : AXValue.t option;
          [@key "chromeRole"]
          [@yojson.option]
          [@ocaml.doc "This `Node`'s Chrome raw role."]
      name : AXValue.t option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "The accessible name for this `Node`."]
      description : AXValue.t option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc "The accessible description for this `Node`."]
      value : AXValue.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value for this `Node`."]
      properties : AXProperty.t list option;
          [@key "properties"]
          [@yojson.option]
          [@ocaml.doc "All other properties"]
      parentId : AXNodeId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc "ID for this node's parent."]
      childIds : AXNodeId.t list option;
          [@key "childIds"]
          [@yojson.option]
          [@ocaml.doc "IDs for each of this node's child nodes."]
      backendDOMNodeId : DOM.BackendNodeId.t option;
          [@key "backendDOMNodeId"]
          [@yojson.option]
          [@ocaml.doc "The backend ID for the associated DOM node, if any."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc
            "The frame ID for the frame associated with this nodes document."]
    }
    [@@deriving yojson] [@@ocaml.doc "A node in the accessibility tree."]
  end = struct
    type t = {
      nodeId : AXNodeId.t;
          [@key "nodeId"] [@ocaml.doc "Unique identifier for this node."]
      ignored : bool;
          [@key "ignored"]
          [@ocaml.doc "Whether this node is ignored for accessibility"]
      ignoredReasons : AXProperty.t list option;
          [@key "ignoredReasons"]
          [@yojson.option]
          [@ocaml.doc "Collection of reasons why this node is hidden."]
      role : AXValue.t option;
          [@key "role"]
          [@yojson.option]
          [@ocaml.doc "This `Node`'s role, whether explicit or implicit."]
      chromeRole : AXValue.t option;
          [@key "chromeRole"]
          [@yojson.option]
          [@ocaml.doc "This `Node`'s Chrome raw role."]
      name : AXValue.t option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "The accessible name for this `Node`."]
      description : AXValue.t option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc "The accessible description for this `Node`."]
      value : AXValue.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value for this `Node`."]
      properties : AXProperty.t list option;
          [@key "properties"]
          [@yojson.option]
          [@ocaml.doc "All other properties"]
      parentId : AXNodeId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc "ID for this node's parent."]
      childIds : AXNodeId.t list option;
          [@key "childIds"]
          [@yojson.option]
          [@ocaml.doc "IDs for each of this node's child nodes."]
      backendDOMNodeId : DOM.BackendNodeId.t option;
          [@key "backendDOMNodeId"]
          [@yojson.option]
          [@ocaml.doc "The backend ID for the associated DOM node, if any."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc
            "The frame ID for the frame associated with this nodes document."]
    }
    [@@deriving yojson] [@@ocaml.doc "A node in the accessibility tree."]
  end
end

and Animation : sig
  module rec Animation : sig
    type _animation_type = [ `CSSTransition | `CSSAnimation | `WebAnimation ]

    val _animation_type_of_yojson : Yojson.Basic.t -> _animation_type
    val yojson_of__animation_type : _animation_type -> Yojson.Basic.t

    type t = {
      id : string; [@key "id"] [@ocaml.doc "`Animation`'s id."]
      name : string; [@key "name"] [@ocaml.doc "`Animation`'s name."]
      pausedState : bool;
          [@key "pausedState"]
          [@ocaml.doc "`Animation`'s internal paused state."]
      playState : string;
          [@key "playState"] [@ocaml.doc "`Animation`'s play state."]
      playbackRate : number;
          [@key "playbackRate"] [@ocaml.doc "`Animation`'s playback rate."]
      startTime : number;
          [@key "startTime"] [@ocaml.doc "`Animation`'s start time."]
      currentTime : number;
          [@key "currentTime"] [@ocaml.doc "`Animation`'s current time."]
      type_ : _animation_type;
          [@key "type"] [@ocaml.doc "Animation type of `Animation`."]
      source : AnimationEffect.t option;
          [@key "source"]
          [@yojson.option]
          [@ocaml.doc "`Animation`'s source animation node."]
      cssId : string option;
          [@key "cssId"]
          [@yojson.option]
          [@ocaml.doc
            "A unique ID for `Animation` representing the sources that \
             triggered this CSS\n\
             animation/transition."]
    }
    [@@deriving yojson] [@@ocaml.doc "Animation instance."]
  end

  and AnimationEffect : sig
    type t = {
      delay : number; [@key "delay"] [@ocaml.doc "`AnimationEffect`'s delay."]
      endDelay : number;
          [@key "endDelay"] [@ocaml.doc "`AnimationEffect`'s end delay."]
      iterationStart : number;
          [@key "iterationStart"]
          [@ocaml.doc "`AnimationEffect`'s iteration start."]
      iterations : number;
          [@key "iterations"] [@ocaml.doc "`AnimationEffect`'s iterations."]
      duration : number;
          [@key "duration"]
          [@ocaml.doc "`AnimationEffect`'s iteration duration."]
      direction : string;
          [@key "direction"]
          [@ocaml.doc "`AnimationEffect`'s playback direction."]
      fill : string; [@key "fill"] [@ocaml.doc "`AnimationEffect`'s fill mode."]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "`AnimationEffect`'s target node."]
      keyframesRule : KeyframesRule.t option;
          [@key "keyframesRule"]
          [@yojson.option]
          [@ocaml.doc "`AnimationEffect`'s keyframes."]
      easing : string;
          [@key "easing"] [@ocaml.doc "`AnimationEffect`'s timing function."]
    }
    [@@deriving yojson] [@@ocaml.doc "AnimationEffect instance"]
  end

  and KeyframesRule : sig
    type t = {
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "CSS keyframed animation's name."]
      keyframes : KeyframeStyle.t list;
          [@key "keyframes"] [@ocaml.doc "List of animation keyframes."]
    }
    [@@deriving yojson] [@@ocaml.doc "Keyframes Rule"]
  end

  and KeyframeStyle : sig
    type t = {
      offset : string; [@key "offset"] [@ocaml.doc "Keyframe's time offset."]
      easing : string;
          [@key "easing"] [@ocaml.doc "`AnimationEffect`'s timing function."]
    }
    [@@deriving yojson] [@@ocaml.doc "Keyframe Style"]
  end
end = struct
  module rec Animation : sig
    type _animation_type = [ `CSSTransition | `CSSAnimation | `WebAnimation ]

    val _animation_type_of_yojson : Yojson.Basic.t -> _animation_type
    val yojson_of__animation_type : _animation_type -> Yojson.Basic.t

    type t = {
      id : string; [@key "id"] [@ocaml.doc "`Animation`'s id."]
      name : string; [@key "name"] [@ocaml.doc "`Animation`'s name."]
      pausedState : bool;
          [@key "pausedState"]
          [@ocaml.doc "`Animation`'s internal paused state."]
      playState : string;
          [@key "playState"] [@ocaml.doc "`Animation`'s play state."]
      playbackRate : number;
          [@key "playbackRate"] [@ocaml.doc "`Animation`'s playback rate."]
      startTime : number;
          [@key "startTime"] [@ocaml.doc "`Animation`'s start time."]
      currentTime : number;
          [@key "currentTime"] [@ocaml.doc "`Animation`'s current time."]
      type_ : _animation_type;
          [@key "type"] [@ocaml.doc "Animation type of `Animation`."]
      source : AnimationEffect.t option;
          [@key "source"]
          [@yojson.option]
          [@ocaml.doc "`Animation`'s source animation node."]
      cssId : string option;
          [@key "cssId"]
          [@yojson.option]
          [@ocaml.doc
            "A unique ID for `Animation` representing the sources that \
             triggered this CSS\n\
             animation/transition."]
    }
    [@@deriving yojson] [@@ocaml.doc "Animation instance."]
  end = struct
    type _animation_type = [ `CSSTransition | `CSSAnimation | `WebAnimation ]

    let _animation_type_of_yojson = function
      | `String "CSSTransition" -> `CSSTransition
      | `String "CSSAnimation" -> `CSSAnimation
      | `String "WebAnimation" -> `WebAnimation
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__animation_type = function
      | `CSSTransition -> `String "CSSTransition"
      | `CSSAnimation -> `String "CSSAnimation"
      | `WebAnimation -> `String "WebAnimation"

    type t = {
      id : string; [@key "id"] [@ocaml.doc "`Animation`'s id."]
      name : string; [@key "name"] [@ocaml.doc "`Animation`'s name."]
      pausedState : bool;
          [@key "pausedState"]
          [@ocaml.doc "`Animation`'s internal paused state."]
      playState : string;
          [@key "playState"] [@ocaml.doc "`Animation`'s play state."]
      playbackRate : number;
          [@key "playbackRate"] [@ocaml.doc "`Animation`'s playback rate."]
      startTime : number;
          [@key "startTime"] [@ocaml.doc "`Animation`'s start time."]
      currentTime : number;
          [@key "currentTime"] [@ocaml.doc "`Animation`'s current time."]
      type_ : _animation_type;
          [@key "type"] [@ocaml.doc "Animation type of `Animation`."]
      source : AnimationEffect.t option;
          [@key "source"]
          [@yojson.option]
          [@ocaml.doc "`Animation`'s source animation node."]
      cssId : string option;
          [@key "cssId"]
          [@yojson.option]
          [@ocaml.doc
            "A unique ID for `Animation` representing the sources that \
             triggered this CSS\n\
             animation/transition."]
    }
    [@@deriving yojson] [@@ocaml.doc "Animation instance."]
  end

  and AnimationEffect : sig
    type t = {
      delay : number; [@key "delay"] [@ocaml.doc "`AnimationEffect`'s delay."]
      endDelay : number;
          [@key "endDelay"] [@ocaml.doc "`AnimationEffect`'s end delay."]
      iterationStart : number;
          [@key "iterationStart"]
          [@ocaml.doc "`AnimationEffect`'s iteration start."]
      iterations : number;
          [@key "iterations"] [@ocaml.doc "`AnimationEffect`'s iterations."]
      duration : number;
          [@key "duration"]
          [@ocaml.doc "`AnimationEffect`'s iteration duration."]
      direction : string;
          [@key "direction"]
          [@ocaml.doc "`AnimationEffect`'s playback direction."]
      fill : string; [@key "fill"] [@ocaml.doc "`AnimationEffect`'s fill mode."]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "`AnimationEffect`'s target node."]
      keyframesRule : KeyframesRule.t option;
          [@key "keyframesRule"]
          [@yojson.option]
          [@ocaml.doc "`AnimationEffect`'s keyframes."]
      easing : string;
          [@key "easing"] [@ocaml.doc "`AnimationEffect`'s timing function."]
    }
    [@@deriving yojson] [@@ocaml.doc "AnimationEffect instance"]
  end = struct
    type t = {
      delay : number; [@key "delay"] [@ocaml.doc "`AnimationEffect`'s delay."]
      endDelay : number;
          [@key "endDelay"] [@ocaml.doc "`AnimationEffect`'s end delay."]
      iterationStart : number;
          [@key "iterationStart"]
          [@ocaml.doc "`AnimationEffect`'s iteration start."]
      iterations : number;
          [@key "iterations"] [@ocaml.doc "`AnimationEffect`'s iterations."]
      duration : number;
          [@key "duration"]
          [@ocaml.doc "`AnimationEffect`'s iteration duration."]
      direction : string;
          [@key "direction"]
          [@ocaml.doc "`AnimationEffect`'s playback direction."]
      fill : string; [@key "fill"] [@ocaml.doc "`AnimationEffect`'s fill mode."]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "`AnimationEffect`'s target node."]
      keyframesRule : KeyframesRule.t option;
          [@key "keyframesRule"]
          [@yojson.option]
          [@ocaml.doc "`AnimationEffect`'s keyframes."]
      easing : string;
          [@key "easing"] [@ocaml.doc "`AnimationEffect`'s timing function."]
    }
    [@@deriving yojson] [@@ocaml.doc "AnimationEffect instance"]
  end

  and KeyframesRule : sig
    type t = {
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "CSS keyframed animation's name."]
      keyframes : KeyframeStyle.t list;
          [@key "keyframes"] [@ocaml.doc "List of animation keyframes."]
    }
    [@@deriving yojson] [@@ocaml.doc "Keyframes Rule"]
  end = struct
    type t = {
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "CSS keyframed animation's name."]
      keyframes : KeyframeStyle.t list;
          [@key "keyframes"] [@ocaml.doc "List of animation keyframes."]
    }
    [@@deriving yojson] [@@ocaml.doc "Keyframes Rule"]
  end

  and KeyframeStyle : sig
    type t = {
      offset : string; [@key "offset"] [@ocaml.doc "Keyframe's time offset."]
      easing : string;
          [@key "easing"] [@ocaml.doc "`AnimationEffect`'s timing function."]
    }
    [@@deriving yojson] [@@ocaml.doc "Keyframe Style"]
  end = struct
    type t = {
      offset : string; [@key "offset"] [@ocaml.doc "Keyframe's time offset."]
      easing : string;
          [@key "easing"] [@ocaml.doc "`AnimationEffect`'s timing function."]
    }
    [@@deriving yojson] [@@ocaml.doc "Keyframe Style"]
  end
end

and Audits : sig
  module rec AffectedCookie : sig
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc
            "The following three properties uniquely identify a cookie"]
      path : string; [@key "path"] [@ocaml.doc "No description provided"]
      domain : string; [@key "domain"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a cookie that is affected by an inspector issue."]
  end

  and AffectedRequest : sig
    type t = {
      requestId : Network.RequestId.t;
          [@key "requestId"] [@ocaml.doc "The unique request id."]
      url : string option;
          [@key "url"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a request that is affected by an inspector issue."]
  end

  and AffectedFrame : sig
    type t = {
      frameId : Page.FrameId.t;
          [@key "frameId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about the frame affected by an inspector issue."]
  end

  and CookieExclusionReason : sig
    type _cookieexclusionreason =
      [ `ExcludeSameSiteUnspecifiedTreatedAsLax
      | `ExcludeSameSiteNoneInsecure
      | `ExcludeSameSiteLax
      | `ExcludeSameSiteStrict
      | `ExcludeInvalidSameParty
      | `ExcludeSamePartyCrossPartyContext
      | `ExcludeDomainNonASCII
      | `ExcludeThirdPartyCookieBlockedInFirstPartySet ]

    val _cookieexclusionreason_of_yojson :
      Yojson.Basic.t -> _cookieexclusionreason

    val yojson_of__cookieexclusionreason :
      _cookieexclusionreason -> Yojson.Basic.t

    type t = _cookieexclusionreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CookieWarningReason : sig
    type _cookiewarningreason =
      [ `WarnSameSiteUnspecifiedCrossSiteContext
      | `WarnSameSiteNoneInsecure
      | `WarnSameSiteUnspecifiedLaxAllowUnsafe
      | `WarnSameSiteStrictLaxDowngradeStrict
      | `WarnSameSiteStrictCrossDowngradeStrict
      | `WarnSameSiteStrictCrossDowngradeLax
      | `WarnSameSiteLaxCrossDowngradeStrict
      | `WarnSameSiteLaxCrossDowngradeLax
      | `WarnAttributeValueExceedsMaxSize
      | `WarnDomainNonASCII
      | `WarnThirdPartyPhaseout ]

    val _cookiewarningreason_of_yojson : Yojson.Basic.t -> _cookiewarningreason
    val yojson_of__cookiewarningreason : _cookiewarningreason -> Yojson.Basic.t

    type t = _cookiewarningreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CookieOperation : sig
    type _cookieoperation = [ `SetCookie | `ReadCookie ]

    val _cookieoperation_of_yojson : Yojson.Basic.t -> _cookieoperation
    val yojson_of__cookieoperation : _cookieoperation -> Yojson.Basic.t

    type t = _cookieoperation
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CookieIssueDetails : sig
    type t = {
      cookie : AffectedCookie.t option;
          [@key "cookie"]
          [@yojson.option]
          [@ocaml.doc
            "If AffectedCookie is not set then rawCookieLine contains the raw\n\
             Set-Cookie header string. This hints at a problem where the\n\
             cookie line is syntactically or semantically malformed in a way\n\
             that no valid cookie could be created."]
      rawCookieLine : string option;
          [@key "rawCookieLine"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      cookieWarningReasons : CookieWarningReason.t list;
          [@key "cookieWarningReasons"] [@ocaml.doc "No description provided"]
      cookieExclusionReasons : CookieExclusionReason.t list;
          [@key "cookieExclusionReasons"] [@ocaml.doc "No description provided"]
      operation : CookieOperation.t;
          [@key "operation"]
          [@ocaml.doc
            "Optionally identifies the site-for-cookies and the cookie url, \
             which\n\
             may be used by the front-end as additional context."]
      siteForCookies : string option;
          [@key "siteForCookies"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      cookieUrl : string option;
          [@key "cookieUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This information is currently necessary, as the front-end has a difficult\n\
       time finding a specific cookie. With this, we can convey specific error\n\
       information without the cookie."]
  end

  and MixedContentResolutionStatus : sig
    type _mixedcontentresolutionstatus =
      [ `MixedContentBlocked
      | `MixedContentAutomaticallyUpgraded
      | `MixedContentWarning ]

    val _mixedcontentresolutionstatus_of_yojson :
      Yojson.Basic.t -> _mixedcontentresolutionstatus

    val yojson_of__mixedcontentresolutionstatus :
      _mixedcontentresolutionstatus -> Yojson.Basic.t

    type t = _mixedcontentresolutionstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and MixedContentResourceType : sig
    type _mixedcontentresourcetype =
      [ `AttributionSrc
      | `Audio
      | `Beacon
      | `CSPReport
      | `Download
      | `EventSource
      | `Favicon
      | `Font
      | `Form
      | `Frame
      | `Image
      | `Import
      | `Manifest
      | `Ping
      | `PluginData
      | `PluginResource
      | `Prefetch
      | `Resource
      | `Script
      | `ServiceWorker
      | `SharedWorker
      | `Stylesheet
      | `Track
      | `Video
      | `Worker
      | `XMLHttpRequest
      | `XSLT ]

    val _mixedcontentresourcetype_of_yojson :
      Yojson.Basic.t -> _mixedcontentresourcetype

    val yojson_of__mixedcontentresourcetype :
      _mixedcontentresourcetype -> Yojson.Basic.t

    type t = _mixedcontentresourcetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and MixedContentIssueDetails : sig
    type t = {
      resourceType : MixedContentResourceType.t option;
          [@key "resourceType"]
          [@yojson.option]
          [@ocaml.doc
            "The type of resource causing the mixed content issue (css, js, \
             iframe,\n\
             form,...). Marked as optional because it is mapped to from\n\
             blink::mojom::RequestContextType, which will be replaced\n\
             by network::mojom::RequestDestination"]
      resolutionStatus : MixedContentResolutionStatus.t;
          [@key "resolutionStatus"]
          [@ocaml.doc "The way the mixed content issue is being resolved."]
      insecureURL : string;
          [@key "insecureURL"]
          [@ocaml.doc "The unsafe http url causing the mixed content issue."]
      mainResourceURL : string;
          [@key "mainResourceURL"]
          [@ocaml.doc "The url responsible for the call to an unsafe url."]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc
            "The mixed content request.\n\
             Does not always exist (e.g. for unsafe form submission urls)."]
      frame : AffectedFrame.t option;
          [@key "frame"]
          [@yojson.option]
          [@ocaml.doc
            "Optional because not every mixed content issue is necessarily \
             linked to a frame."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and BlockedByResponseReason : sig
    type _blockedbyresponsereason =
      [ `CoepFrameResourceNeedsCoepHeader
      | `CoopSandboxedIFrameCannotNavigateToCoopPage
      | `CorpNotSameOrigin
      | `CorpNotSameOriginAfterDefaultedToSameOriginByCoep
      | `CorpNotSameSite ]

    val _blockedbyresponsereason_of_yojson :
      Yojson.Basic.t -> _blockedbyresponsereason

    val yojson_of__blockedbyresponsereason :
      _blockedbyresponsereason -> Yojson.Basic.t

    type t = _blockedbyresponsereason
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum indicating the reason a response has been blocked. These reasons are\n\
       refinements of the net error BLOCKED_BY_RESPONSE."]
  end

  and BlockedByResponseIssueDetails : sig
    type t = {
      request : AffectedRequest.t;
          [@key "request"] [@ocaml.doc "No description provided"]
      parentFrame : AffectedFrame.t option;
          [@key "parentFrame"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      blockedFrame : AffectedFrame.t option;
          [@key "blockedFrame"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      reason : BlockedByResponseReason.t;
          [@key "reason"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for a request that has been blocked with the BLOCKED_BY_RESPONSE\n\
       code. Currently only used for COEP/COOP, but may be extended to include\n\
       some CSP errors in the future."]
  end

  and HeavyAdResolutionStatus : sig
    type _heavyadresolutionstatus = [ `HeavyAdBlocked | `HeavyAdWarning ]

    val _heavyadresolutionstatus_of_yojson :
      Yojson.Basic.t -> _heavyadresolutionstatus

    val yojson_of__heavyadresolutionstatus :
      _heavyadresolutionstatus -> Yojson.Basic.t

    type t = _heavyadresolutionstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HeavyAdReason : sig
    type _heavyadreason = [ `NetworkTotalLimit | `CpuTotalLimit | `CpuPeakLimit ]

    val _heavyadreason_of_yojson : Yojson.Basic.t -> _heavyadreason
    val yojson_of__heavyadreason : _heavyadreason -> Yojson.Basic.t

    type t = _heavyadreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HeavyAdIssueDetails : sig
    type t = {
      resolution : HeavyAdResolutionStatus.t;
          [@key "resolution"]
          [@ocaml.doc
            "The resolution status, either blocking the content or warning."]
      reason : HeavyAdReason.t;
          [@key "reason"]
          [@ocaml.doc
            "The reason the ad was blocked, total network or cpu or peak cpu."]
      frame : AffectedFrame.t;
          [@key "frame"] [@ocaml.doc "The frame that was blocked."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContentSecurityPolicyViolationType : sig
    type _contentsecuritypolicyviolationtype =
      [ `kInlineViolation
      | `kEvalViolation
      | `kURLViolation
      | `kTrustedTypesSinkViolation
      | `kTrustedTypesPolicyViolation
      | `kWasmEvalViolation ]

    val _contentsecuritypolicyviolationtype_of_yojson :
      Yojson.Basic.t -> _contentsecuritypolicyviolationtype

    val yojson_of__contentsecuritypolicyviolationtype :
      _contentsecuritypolicyviolationtype -> Yojson.Basic.t

    type t = _contentsecuritypolicyviolationtype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SourceCodeLocation : sig
    type t = {
      scriptId : Runtime.ScriptId.t option;
          [@key "scriptId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "No description provided"]
      columnNumber : number;
          [@key "columnNumber"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContentSecurityPolicyIssueDetails : sig
    type t = {
      blockedURL : string option;
          [@key "blockedURL"]
          [@yojson.option]
          [@ocaml.doc "The url not included in allowed sources."]
      violatedDirective : string;
          [@key "violatedDirective"]
          [@ocaml.doc
            "Specific directive that is violated, causing the CSP issue."]
      isReportOnly : bool;
          [@key "isReportOnly"] [@ocaml.doc "No description provided"]
      contentSecurityPolicyViolationType : ContentSecurityPolicyViolationType.t;
          [@key "contentSecurityPolicyViolationType"]
          [@ocaml.doc "No description provided"]
      frameAncestor : AffectedFrame.t option;
          [@key "frameAncestor"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      sourceCodeLocation : SourceCodeLocation.t option;
          [@key "sourceCodeLocation"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeId : DOM.BackendNodeId.t option;
          [@key "violatingNodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SharedArrayBufferIssueType : sig
    type _sharedarraybufferissuetype = [ `TransferIssue | `CreationIssue ]

    val _sharedarraybufferissuetype_of_yojson :
      Yojson.Basic.t -> _sharedarraybufferissuetype

    val yojson_of__sharedarraybufferissuetype :
      _sharedarraybufferissuetype -> Yojson.Basic.t

    type t = _sharedarraybufferissuetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SharedArrayBufferIssueDetails : sig
    type t = {
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"] [@ocaml.doc "No description provided"]
      isWarning : bool;
          [@key "isWarning"] [@ocaml.doc "No description provided"]
      type_ : SharedArrayBufferIssueType.t;
          [@key "type"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for a issue arising from an SAB being instantiated in, or\n\
       transferred to a context that is not cross-origin isolated."]
  end

  and LowTextContrastIssueDetails : sig
    type t = {
      violatingNodeId : DOM.BackendNodeId.t;
          [@key "violatingNodeId"] [@ocaml.doc "No description provided"]
      violatingNodeSelector : string;
          [@key "violatingNodeSelector"] [@ocaml.doc "No description provided"]
      contrastRatio : number;
          [@key "contrastRatio"] [@ocaml.doc "No description provided"]
      thresholdAA : number;
          [@key "thresholdAA"] [@ocaml.doc "No description provided"]
      thresholdAAA : number;
          [@key "thresholdAAA"] [@ocaml.doc "No description provided"]
      fontSize : string;
          [@key "fontSize"] [@ocaml.doc "No description provided"]
      fontWeight : string;
          [@key "fontWeight"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CorsIssueDetails : sig
    type t = {
      corsErrorStatus : Network.CorsErrorStatus.t;
          [@key "corsErrorStatus"] [@ocaml.doc "No description provided"]
      isWarning : bool;
          [@key "isWarning"] [@ocaml.doc "No description provided"]
      request : AffectedRequest.t;
          [@key "request"] [@ocaml.doc "No description provided"]
      location : SourceCodeLocation.t option;
          [@key "location"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      initiatorOrigin : string option;
          [@key "initiatorOrigin"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      resourceIPAddressSpace : Network.IPAddressSpace.t option;
          [@key "resourceIPAddressSpace"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      clientSecurityState : Network.ClientSecurityState.t option;
          [@key "clientSecurityState"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for a CORS related issue, e.g. a warning or error related to\n\
       CORS RFC1918 enforcement."]
  end

  and AttributionReportingIssueType : sig
    type _attributionreportingissuetype =
      [ `PermissionPolicyDisabled
      | `UntrustworthyReportingOrigin
      | `InsecureContext
      | `InvalidHeader
      | `InvalidRegisterTriggerHeader
      | `SourceAndTriggerHeaders
      | `SourceIgnored
      | `TriggerIgnored
      | `OsSourceIgnored
      | `OsTriggerIgnored
      | `InvalidRegisterOsSourceHeader
      | `InvalidRegisterOsTriggerHeader
      | `WebAndOsHeaders
      | `NoWebOrOsSupport
      | `NavigationRegistrationWithoutTransientUserActivation ]

    val _attributionreportingissuetype_of_yojson :
      Yojson.Basic.t -> _attributionreportingissuetype

    val yojson_of__attributionreportingissuetype :
      _attributionreportingissuetype -> Yojson.Basic.t

    type t = _attributionreportingissuetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingIssueDetails : sig
    type t = {
      violationType : AttributionReportingIssueType.t;
          [@key "violationType"] [@ocaml.doc "No description provided"]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeId : DOM.BackendNodeId.t option;
          [@key "violatingNodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      invalidParameter : string option;
          [@key "invalidParameter"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for issues around \"Attribution Reporting API\" usage.\n\
       Explainer: https://github.com/WICG/attribution-reporting-api"]
  end

  and QuirksModeIssueDetails : sig
    type t = {
      isLimitedQuirksMode : bool;
          [@key "isLimitedQuirksMode"]
          [@ocaml.doc
            "If false, it means the document's mode is \"quirks\"\n\
             instead of \"limited-quirks\"."]
      documentNodeId : DOM.BackendNodeId.t;
          [@key "documentNodeId"] [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      frameId : Page.FrameId.t;
          [@key "frameId"] [@ocaml.doc "No description provided"]
      loaderId : Network.LoaderId.t;
          [@key "loaderId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for issues about documents in Quirks Mode\n\
       or Limited Quirks Mode that affects page layouting."]
  end

  and NavigatorUserAgentIssueDetails : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      location : SourceCodeLocation.t option;
          [@key "location"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and GenericIssueErrorType : sig
    type _genericissueerrortype =
      [ `CrossOriginPortalPostMessageError
      | `FormLabelForNameError
      | `FormDuplicateIdForInputError
      | `FormInputWithNoLabelError
      | `FormAutocompleteAttributeEmptyError
      | `FormEmptyIdAndNameAttributesForInputError
      | `FormAriaLabelledByToNonExistingId
      | `FormInputAssignedAutocompleteValueToIdOrNameAttributeError
      | `FormLabelHasNeitherForNorNestedInput
      | `FormLabelForMatchesNonExistingIdError
      | `FormInputHasWrongButWellIntendedAutocompleteValueError
      | `ResponseWasBlockedByORB ]

    val _genericissueerrortype_of_yojson :
      Yojson.Basic.t -> _genericissueerrortype

    val yojson_of__genericissueerrortype :
      _genericissueerrortype -> Yojson.Basic.t

    type t = _genericissueerrortype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and GenericIssueDetails : sig
    type t = {
      errorType : GenericIssueErrorType.t;
          [@key "errorType"]
          [@ocaml.doc
            "Issues with the same errorType are aggregated in the frontend."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeId : DOM.BackendNodeId.t option;
          [@key "violatingNodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeAttribute : string option;
          [@key "violatingNodeAttribute"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Depending on the concrete errorType, different properties are set."]
  end

  and DeprecationIssueDetails : sig
    type t = {
      affectedFrame : AffectedFrame.t option;
          [@key "affectedFrame"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"] [@ocaml.doc "No description provided"]
      type_ : string;
          [@key "type"]
          [@ocaml.doc
            "One of the deprecation names from \
             third_party/blink/renderer/core/frame/deprecation/deprecation.json5"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue tracks information needed to print a deprecation message.\n\
       https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md"]
  end

  and BounceTrackingIssueDetails : sig
    type t = {
      trackingSites : string list;
          [@key "trackingSites"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue warns about sites in the redirect chain of a finished \
       navigation\n\
       that may be flagged as trackers and have their state cleared if they \
       don't\n\
       receive a user interaction. Note that in this context 'site' means \
       eTLD+1.\n\
       For example, if the URL `https://example.test:80/bounce` was in the\n\
       redirect chain, the site reported would be `example.test`."]
  end

  and ClientHintIssueReason : sig
    type _clienthintissuereason =
      [ `MetaTagAllowListInvalidOrigin | `MetaTagModifiedHTML ]

    val _clienthintissuereason_of_yojson :
      Yojson.Basic.t -> _clienthintissuereason

    val yojson_of__clienthintissuereason :
      _clienthintissuereason -> Yojson.Basic.t

    type t = _clienthintissuereason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and FederatedAuthRequestIssueDetails : sig
    type t = {
      federatedAuthRequestIssueReason : FederatedAuthRequestIssueReason.t;
          [@key "federatedAuthRequestIssueReason"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and FederatedAuthRequestIssueReason : sig
    type _federatedauthrequestissuereason =
      [ `ShouldEmbargo
      | `TooManyRequests
      | `WellKnownHttpNotFound
      | `WellKnownNoResponse
      | `WellKnownInvalidResponse
      | `WellKnownListEmpty
      | `WellKnownInvalidContentType
      | `ConfigNotInWellKnown
      | `WellKnownTooBig
      | `ConfigHttpNotFound
      | `ConfigNoResponse
      | `ConfigInvalidResponse
      | `ConfigInvalidContentType
      | `ClientMetadataHttpNotFound
      | `ClientMetadataNoResponse
      | `ClientMetadataInvalidResponse
      | `ClientMetadataInvalidContentType
      | `DisabledInSettings
      | `ErrorFetchingSignin
      | `InvalidSigninResponse
      | `AccountsHttpNotFound
      | `AccountsNoResponse
      | `AccountsInvalidResponse
      | `AccountsListEmpty
      | `AccountsInvalidContentType
      | `IdTokenHttpNotFound
      | `IdTokenNoResponse
      | `IdTokenInvalidResponse
      | `IdTokenInvalidRequest
      | `IdTokenInvalidContentType
      | `ErrorIdToken
      | `Canceled
      | `RpPageNotVisible
      | `SilentMediationFailure
      | `ThirdPartyCookiesBlocked ]

    val _federatedauthrequestissuereason_of_yojson :
      Yojson.Basic.t -> _federatedauthrequestissuereason

    val yojson_of__federatedauthrequestissuereason :
      _federatedauthrequestissuereason -> Yojson.Basic.t

    type t = _federatedauthrequestissuereason
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the failure reason when a federated authentication reason \
       fails.\n\
       Should be updated alongside RequestIdTokenStatus in\n\
       third_party/blink/public/mojom/devtools/inspector_issue.mojom to include\n\
       all cases except for success."]
  end

  and FederatedAuthUserInfoRequestIssueDetails : sig
    type t = {
      federatedAuthUserInfoRequestIssueReason :
        FederatedAuthUserInfoRequestIssueReason.t;
          [@key "federatedAuthUserInfoRequestIssueReason"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and FederatedAuthUserInfoRequestIssueReason : sig
    type _federatedauthuserinforequestissuereason =
      [ `NotSameOrigin
      | `NotIframe
      | `NotPotentiallyTrustworthy
      | `NoApiPermission
      | `NotSignedInWithIdp
      | `NoAccountSharingPermission
      | `InvalidConfigOrWellKnown
      | `InvalidAccountsResponse
      | `NoReturningUserFromFetchedAccounts ]

    val _federatedauthuserinforequestissuereason_of_yojson :
      Yojson.Basic.t -> _federatedauthuserinforequestissuereason

    val yojson_of__federatedauthuserinforequestissuereason :
      _federatedauthuserinforequestissuereason -> Yojson.Basic.t

    type t = _federatedauthuserinforequestissuereason
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the failure reason when a getUserInfo() call fails.\n\
       Should be updated alongside FederatedAuthUserInfoRequestResult in\n\
       third_party/blink/public/mojom/devtools/inspector_issue.mojom."]
  end

  and ClientHintIssueDetails : sig
    type t = {
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"] [@ocaml.doc "No description provided"]
      clientHintIssueReason : ClientHintIssueReason.t;
          [@key "clientHintIssueReason"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue tracks client hints related issues. It's used to deprecate old\n\
       features, encourage the use of new ones, and provide general guidance."]
  end

  and FailedRequestInfo : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "The URL that failed to load."]
      failureMessage : string;
          [@key "failureMessage"]
          [@ocaml.doc "The failure message for the failed request."]
      requestId : Network.RequestId.t option;
          [@key "requestId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StyleSheetLoadingIssueReason : sig
    type _stylesheetloadingissuereason = [ `LateImportRule | `RequestFailed ]

    val _stylesheetloadingissuereason_of_yojson :
      Yojson.Basic.t -> _stylesheetloadingissuereason

    val yojson_of__stylesheetloadingissuereason :
      _stylesheetloadingissuereason -> Yojson.Basic.t

    type t = _stylesheetloadingissuereason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StylesheetLoadingIssueDetails : sig
    type t = {
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"]
          [@ocaml.doc
            "Source code position that referenced the failing stylesheet."]
      styleSheetLoadingIssueReason : StyleSheetLoadingIssueReason.t;
          [@key "styleSheetLoadingIssueReason"]
          [@ocaml.doc "Reason why the stylesheet couldn't be loaded."]
      failedRequestInfo : FailedRequestInfo.t option;
          [@key "failedRequestInfo"]
          [@yojson.option]
          [@ocaml.doc
            "Contains additional info when the failure was due to a request."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue warns when a referenced stylesheet couldn't be loaded."]
  end

  and InspectorIssueCode : sig
    type _inspectorissuecode =
      [ `CookieIssue
      | `MixedContentIssue
      | `BlockedByResponseIssue
      | `HeavyAdIssue
      | `ContentSecurityPolicyIssue
      | `SharedArrayBufferIssue
      | `LowTextContrastIssue
      | `CorsIssue
      | `AttributionReportingIssue
      | `QuirksModeIssue
      | `NavigatorUserAgentIssue
      | `GenericIssue
      | `DeprecationIssue
      | `ClientHintIssue
      | `FederatedAuthRequestIssue
      | `BounceTrackingIssue
      | `StylesheetLoadingIssue
      | `FederatedAuthUserInfoRequestIssue ]

    val _inspectorissuecode_of_yojson : Yojson.Basic.t -> _inspectorissuecode
    val yojson_of__inspectorissuecode : _inspectorissuecode -> Yojson.Basic.t

    type t = _inspectorissuecode
    [@@deriving yojson]
    [@@ocaml.doc
      "A unique identifier for the type of issue. Each type may use one of the\n\
       optional fields in InspectorIssueDetails to convey more specific\n\
       information about the kind of issue."]
  end

  and InspectorIssueDetails : sig
    type t = {
      cookieIssueDetails : CookieIssueDetails.t option;
          [@key "cookieIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      mixedContentIssueDetails : MixedContentIssueDetails.t option;
          [@key "mixedContentIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      blockedByResponseIssueDetails : BlockedByResponseIssueDetails.t option;
          [@key "blockedByResponseIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      heavyAdIssueDetails : HeavyAdIssueDetails.t option;
          [@key "heavyAdIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      contentSecurityPolicyIssueDetails :
        ContentSecurityPolicyIssueDetails.t option;
          [@key "contentSecurityPolicyIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      sharedArrayBufferIssueDetails : SharedArrayBufferIssueDetails.t option;
          [@key "sharedArrayBufferIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      lowTextContrastIssueDetails : LowTextContrastIssueDetails.t option;
          [@key "lowTextContrastIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      corsIssueDetails : CorsIssueDetails.t option;
          [@key "corsIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      attributionReportingIssueDetails :
        AttributionReportingIssueDetails.t option;
          [@key "attributionReportingIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      quirksModeIssueDetails : QuirksModeIssueDetails.t option;
          [@key "quirksModeIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      navigatorUserAgentIssueDetails : NavigatorUserAgentIssueDetails.t option;
          [@key "navigatorUserAgentIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      genericIssueDetails : GenericIssueDetails.t option;
          [@key "genericIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      deprecationIssueDetails : DeprecationIssueDetails.t option;
          [@key "deprecationIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      clientHintIssueDetails : ClientHintIssueDetails.t option;
          [@key "clientHintIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      federatedAuthRequestIssueDetails :
        FederatedAuthRequestIssueDetails.t option;
          [@key "federatedAuthRequestIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      bounceTrackingIssueDetails : BounceTrackingIssueDetails.t option;
          [@key "bounceTrackingIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      stylesheetLoadingIssueDetails : StylesheetLoadingIssueDetails.t option;
          [@key "stylesheetLoadingIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      federatedAuthUserInfoRequestIssueDetails :
        FederatedAuthUserInfoRequestIssueDetails.t option;
          [@key "federatedAuthUserInfoRequestIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This struct holds a list of optional fields with additional information\n\
       specific to the kind of issue. When adding a new issue code, please also\n\
       add a new optional field to this type."]
  end

  and IssueId : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "A unique id for a DevTools inspector issue. Allows other entities (e.g.\n\
       exceptions, CDP message, console messages, etc.) to reference an issue."]
  end

  and InspectorIssue : sig
    type t = {
      code : InspectorIssueCode.t;
          [@key "code"] [@ocaml.doc "No description provided"]
      details : InspectorIssueDetails.t;
          [@key "details"] [@ocaml.doc "No description provided"]
      issueId : IssueId.t option;
          [@key "issueId"]
          [@yojson.option]
          [@ocaml.doc
            "A unique id for this issue. May be omitted if no other entity (e.g.\n\
             exception, CDP message, etc.) is referencing this issue."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "An inspector issue reported from the back-end."]
  end
end = struct
  module rec AffectedCookie : sig
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc
            "The following three properties uniquely identify a cookie"]
      path : string; [@key "path"] [@ocaml.doc "No description provided"]
      domain : string; [@key "domain"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a cookie that is affected by an inspector issue."]
  end = struct
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc
            "The following three properties uniquely identify a cookie"]
      path : string; [@key "path"] [@ocaml.doc "No description provided"]
      domain : string; [@key "domain"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a cookie that is affected by an inspector issue."]
  end

  and AffectedRequest : sig
    type t = {
      requestId : Network.RequestId.t;
          [@key "requestId"] [@ocaml.doc "The unique request id."]
      url : string option;
          [@key "url"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a request that is affected by an inspector issue."]
  end = struct
    type t = {
      requestId : Network.RequestId.t;
          [@key "requestId"] [@ocaml.doc "The unique request id."]
      url : string option;
          [@key "url"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a request that is affected by an inspector issue."]
  end

  and AffectedFrame : sig
    type t = {
      frameId : Page.FrameId.t;
          [@key "frameId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about the frame affected by an inspector issue."]
  end = struct
    type t = {
      frameId : Page.FrameId.t;
          [@key "frameId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about the frame affected by an inspector issue."]
  end

  and CookieExclusionReason : sig
    type _cookieexclusionreason =
      [ `ExcludeSameSiteUnspecifiedTreatedAsLax
      | `ExcludeSameSiteNoneInsecure
      | `ExcludeSameSiteLax
      | `ExcludeSameSiteStrict
      | `ExcludeInvalidSameParty
      | `ExcludeSamePartyCrossPartyContext
      | `ExcludeDomainNonASCII
      | `ExcludeThirdPartyCookieBlockedInFirstPartySet ]

    val _cookieexclusionreason_of_yojson :
      Yojson.Basic.t -> _cookieexclusionreason

    val yojson_of__cookieexclusionreason :
      _cookieexclusionreason -> Yojson.Basic.t

    type t = _cookieexclusionreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _cookieexclusionreason =
      [ `ExcludeSameSiteUnspecifiedTreatedAsLax
      | `ExcludeSameSiteNoneInsecure
      | `ExcludeSameSiteLax
      | `ExcludeSameSiteStrict
      | `ExcludeInvalidSameParty
      | `ExcludeSamePartyCrossPartyContext
      | `ExcludeDomainNonASCII
      | `ExcludeThirdPartyCookieBlockedInFirstPartySet ]

    let _cookieexclusionreason_of_yojson = function
      | `String "ExcludeSameSiteUnspecifiedTreatedAsLax" ->
          `ExcludeSameSiteUnspecifiedTreatedAsLax
      | `String "ExcludeSameSiteNoneInsecure" -> `ExcludeSameSiteNoneInsecure
      | `String "ExcludeSameSiteLax" -> `ExcludeSameSiteLax
      | `String "ExcludeSameSiteStrict" -> `ExcludeSameSiteStrict
      | `String "ExcludeInvalidSameParty" -> `ExcludeInvalidSameParty
      | `String "ExcludeSamePartyCrossPartyContext" ->
          `ExcludeSamePartyCrossPartyContext
      | `String "ExcludeDomainNonASCII" -> `ExcludeDomainNonASCII
      | `String "ExcludeThirdPartyCookieBlockedInFirstPartySet" ->
          `ExcludeThirdPartyCookieBlockedInFirstPartySet
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cookieexclusionreason = function
      | `ExcludeSameSiteUnspecifiedTreatedAsLax ->
          `String "ExcludeSameSiteUnspecifiedTreatedAsLax"
      | `ExcludeSameSiteNoneInsecure -> `String "ExcludeSameSiteNoneInsecure"
      | `ExcludeSameSiteLax -> `String "ExcludeSameSiteLax"
      | `ExcludeSameSiteStrict -> `String "ExcludeSameSiteStrict"
      | `ExcludeInvalidSameParty -> `String "ExcludeInvalidSameParty"
      | `ExcludeSamePartyCrossPartyContext ->
          `String "ExcludeSamePartyCrossPartyContext"
      | `ExcludeDomainNonASCII -> `String "ExcludeDomainNonASCII"
      | `ExcludeThirdPartyCookieBlockedInFirstPartySet ->
          `String "ExcludeThirdPartyCookieBlockedInFirstPartySet"

    type t = _cookieexclusionreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CookieWarningReason : sig
    type _cookiewarningreason =
      [ `WarnSameSiteUnspecifiedCrossSiteContext
      | `WarnSameSiteNoneInsecure
      | `WarnSameSiteUnspecifiedLaxAllowUnsafe
      | `WarnSameSiteStrictLaxDowngradeStrict
      | `WarnSameSiteStrictCrossDowngradeStrict
      | `WarnSameSiteStrictCrossDowngradeLax
      | `WarnSameSiteLaxCrossDowngradeStrict
      | `WarnSameSiteLaxCrossDowngradeLax
      | `WarnAttributeValueExceedsMaxSize
      | `WarnDomainNonASCII
      | `WarnThirdPartyPhaseout ]

    val _cookiewarningreason_of_yojson : Yojson.Basic.t -> _cookiewarningreason
    val yojson_of__cookiewarningreason : _cookiewarningreason -> Yojson.Basic.t

    type t = _cookiewarningreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _cookiewarningreason =
      [ `WarnSameSiteUnspecifiedCrossSiteContext
      | `WarnSameSiteNoneInsecure
      | `WarnSameSiteUnspecifiedLaxAllowUnsafe
      | `WarnSameSiteStrictLaxDowngradeStrict
      | `WarnSameSiteStrictCrossDowngradeStrict
      | `WarnSameSiteStrictCrossDowngradeLax
      | `WarnSameSiteLaxCrossDowngradeStrict
      | `WarnSameSiteLaxCrossDowngradeLax
      | `WarnAttributeValueExceedsMaxSize
      | `WarnDomainNonASCII
      | `WarnThirdPartyPhaseout ]

    let _cookiewarningreason_of_yojson = function
      | `String "WarnSameSiteUnspecifiedCrossSiteContext" ->
          `WarnSameSiteUnspecifiedCrossSiteContext
      | `String "WarnSameSiteNoneInsecure" -> `WarnSameSiteNoneInsecure
      | `String "WarnSameSiteUnspecifiedLaxAllowUnsafe" ->
          `WarnSameSiteUnspecifiedLaxAllowUnsafe
      | `String "WarnSameSiteStrictLaxDowngradeStrict" ->
          `WarnSameSiteStrictLaxDowngradeStrict
      | `String "WarnSameSiteStrictCrossDowngradeStrict" ->
          `WarnSameSiteStrictCrossDowngradeStrict
      | `String "WarnSameSiteStrictCrossDowngradeLax" ->
          `WarnSameSiteStrictCrossDowngradeLax
      | `String "WarnSameSiteLaxCrossDowngradeStrict" ->
          `WarnSameSiteLaxCrossDowngradeStrict
      | `String "WarnSameSiteLaxCrossDowngradeLax" ->
          `WarnSameSiteLaxCrossDowngradeLax
      | `String "WarnAttributeValueExceedsMaxSize" ->
          `WarnAttributeValueExceedsMaxSize
      | `String "WarnDomainNonASCII" -> `WarnDomainNonASCII
      | `String "WarnThirdPartyPhaseout" -> `WarnThirdPartyPhaseout
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cookiewarningreason = function
      | `WarnSameSiteUnspecifiedCrossSiteContext ->
          `String "WarnSameSiteUnspecifiedCrossSiteContext"
      | `WarnSameSiteNoneInsecure -> `String "WarnSameSiteNoneInsecure"
      | `WarnSameSiteUnspecifiedLaxAllowUnsafe ->
          `String "WarnSameSiteUnspecifiedLaxAllowUnsafe"
      | `WarnSameSiteStrictLaxDowngradeStrict ->
          `String "WarnSameSiteStrictLaxDowngradeStrict"
      | `WarnSameSiteStrictCrossDowngradeStrict ->
          `String "WarnSameSiteStrictCrossDowngradeStrict"
      | `WarnSameSiteStrictCrossDowngradeLax ->
          `String "WarnSameSiteStrictCrossDowngradeLax"
      | `WarnSameSiteLaxCrossDowngradeStrict ->
          `String "WarnSameSiteLaxCrossDowngradeStrict"
      | `WarnSameSiteLaxCrossDowngradeLax ->
          `String "WarnSameSiteLaxCrossDowngradeLax"
      | `WarnAttributeValueExceedsMaxSize ->
          `String "WarnAttributeValueExceedsMaxSize"
      | `WarnDomainNonASCII -> `String "WarnDomainNonASCII"
      | `WarnThirdPartyPhaseout -> `String "WarnThirdPartyPhaseout"

    type t = _cookiewarningreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CookieOperation : sig
    type _cookieoperation = [ `SetCookie | `ReadCookie ]

    val _cookieoperation_of_yojson : Yojson.Basic.t -> _cookieoperation
    val yojson_of__cookieoperation : _cookieoperation -> Yojson.Basic.t

    type t = _cookieoperation
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _cookieoperation = [ `SetCookie | `ReadCookie ]

    let _cookieoperation_of_yojson = function
      | `String "SetCookie" -> `SetCookie
      | `String "ReadCookie" -> `ReadCookie
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cookieoperation = function
      | `SetCookie -> `String "SetCookie"
      | `ReadCookie -> `String "ReadCookie"

    type t = _cookieoperation
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CookieIssueDetails : sig
    type t = {
      cookie : AffectedCookie.t option;
          [@key "cookie"]
          [@yojson.option]
          [@ocaml.doc
            "If AffectedCookie is not set then rawCookieLine contains the raw\n\
             Set-Cookie header string. This hints at a problem where the\n\
             cookie line is syntactically or semantically malformed in a way\n\
             that no valid cookie could be created."]
      rawCookieLine : string option;
          [@key "rawCookieLine"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      cookieWarningReasons : CookieWarningReason.t list;
          [@key "cookieWarningReasons"] [@ocaml.doc "No description provided"]
      cookieExclusionReasons : CookieExclusionReason.t list;
          [@key "cookieExclusionReasons"] [@ocaml.doc "No description provided"]
      operation : CookieOperation.t;
          [@key "operation"]
          [@ocaml.doc
            "Optionally identifies the site-for-cookies and the cookie url, \
             which\n\
             may be used by the front-end as additional context."]
      siteForCookies : string option;
          [@key "siteForCookies"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      cookieUrl : string option;
          [@key "cookieUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This information is currently necessary, as the front-end has a difficult\n\
       time finding a specific cookie. With this, we can convey specific error\n\
       information without the cookie."]
  end = struct
    type t = {
      cookie : AffectedCookie.t option;
          [@key "cookie"]
          [@yojson.option]
          [@ocaml.doc
            "If AffectedCookie is not set then rawCookieLine contains the raw\n\
             Set-Cookie header string. This hints at a problem where the\n\
             cookie line is syntactically or semantically malformed in a way\n\
             that no valid cookie could be created."]
      rawCookieLine : string option;
          [@key "rawCookieLine"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      cookieWarningReasons : CookieWarningReason.t list;
          [@key "cookieWarningReasons"] [@ocaml.doc "No description provided"]
      cookieExclusionReasons : CookieExclusionReason.t list;
          [@key "cookieExclusionReasons"] [@ocaml.doc "No description provided"]
      operation : CookieOperation.t;
          [@key "operation"]
          [@ocaml.doc
            "Optionally identifies the site-for-cookies and the cookie url, \
             which\n\
             may be used by the front-end as additional context."]
      siteForCookies : string option;
          [@key "siteForCookies"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      cookieUrl : string option;
          [@key "cookieUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This information is currently necessary, as the front-end has a difficult\n\
       time finding a specific cookie. With this, we can convey specific error\n\
       information without the cookie."]
  end

  and MixedContentResolutionStatus : sig
    type _mixedcontentresolutionstatus =
      [ `MixedContentBlocked
      | `MixedContentAutomaticallyUpgraded
      | `MixedContentWarning ]

    val _mixedcontentresolutionstatus_of_yojson :
      Yojson.Basic.t -> _mixedcontentresolutionstatus

    val yojson_of__mixedcontentresolutionstatus :
      _mixedcontentresolutionstatus -> Yojson.Basic.t

    type t = _mixedcontentresolutionstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _mixedcontentresolutionstatus =
      [ `MixedContentBlocked
      | `MixedContentAutomaticallyUpgraded
      | `MixedContentWarning ]

    let _mixedcontentresolutionstatus_of_yojson = function
      | `String "MixedContentBlocked" -> `MixedContentBlocked
      | `String "MixedContentAutomaticallyUpgraded" ->
          `MixedContentAutomaticallyUpgraded
      | `String "MixedContentWarning" -> `MixedContentWarning
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__mixedcontentresolutionstatus = function
      | `MixedContentBlocked -> `String "MixedContentBlocked"
      | `MixedContentAutomaticallyUpgraded ->
          `String "MixedContentAutomaticallyUpgraded"
      | `MixedContentWarning -> `String "MixedContentWarning"

    type t = _mixedcontentresolutionstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and MixedContentResourceType : sig
    type _mixedcontentresourcetype =
      [ `AttributionSrc
      | `Audio
      | `Beacon
      | `CSPReport
      | `Download
      | `EventSource
      | `Favicon
      | `Font
      | `Form
      | `Frame
      | `Image
      | `Import
      | `Manifest
      | `Ping
      | `PluginData
      | `PluginResource
      | `Prefetch
      | `Resource
      | `Script
      | `ServiceWorker
      | `SharedWorker
      | `Stylesheet
      | `Track
      | `Video
      | `Worker
      | `XMLHttpRequest
      | `XSLT ]

    val _mixedcontentresourcetype_of_yojson :
      Yojson.Basic.t -> _mixedcontentresourcetype

    val yojson_of__mixedcontentresourcetype :
      _mixedcontentresourcetype -> Yojson.Basic.t

    type t = _mixedcontentresourcetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _mixedcontentresourcetype =
      [ `AttributionSrc
      | `Audio
      | `Beacon
      | `CSPReport
      | `Download
      | `EventSource
      | `Favicon
      | `Font
      | `Form
      | `Frame
      | `Image
      | `Import
      | `Manifest
      | `Ping
      | `PluginData
      | `PluginResource
      | `Prefetch
      | `Resource
      | `Script
      | `ServiceWorker
      | `SharedWorker
      | `Stylesheet
      | `Track
      | `Video
      | `Worker
      | `XMLHttpRequest
      | `XSLT ]

    let _mixedcontentresourcetype_of_yojson = function
      | `String "AttributionSrc" -> `AttributionSrc
      | `String "Audio" -> `Audio
      | `String "Beacon" -> `Beacon
      | `String "CSPReport" -> `CSPReport
      | `String "Download" -> `Download
      | `String "EventSource" -> `EventSource
      | `String "Favicon" -> `Favicon
      | `String "Font" -> `Font
      | `String "Form" -> `Form
      | `String "Frame" -> `Frame
      | `String "Image" -> `Image
      | `String "Import" -> `Import
      | `String "Manifest" -> `Manifest
      | `String "Ping" -> `Ping
      | `String "PluginData" -> `PluginData
      | `String "PluginResource" -> `PluginResource
      | `String "Prefetch" -> `Prefetch
      | `String "Resource" -> `Resource
      | `String "Script" -> `Script
      | `String "ServiceWorker" -> `ServiceWorker
      | `String "SharedWorker" -> `SharedWorker
      | `String "Stylesheet" -> `Stylesheet
      | `String "Track" -> `Track
      | `String "Video" -> `Video
      | `String "Worker" -> `Worker
      | `String "XMLHttpRequest" -> `XMLHttpRequest
      | `String "XSLT" -> `XSLT
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__mixedcontentresourcetype = function
      | `AttributionSrc -> `String "AttributionSrc"
      | `Audio -> `String "Audio"
      | `Beacon -> `String "Beacon"
      | `CSPReport -> `String "CSPReport"
      | `Download -> `String "Download"
      | `EventSource -> `String "EventSource"
      | `Favicon -> `String "Favicon"
      | `Font -> `String "Font"
      | `Form -> `String "Form"
      | `Frame -> `String "Frame"
      | `Image -> `String "Image"
      | `Import -> `String "Import"
      | `Manifest -> `String "Manifest"
      | `Ping -> `String "Ping"
      | `PluginData -> `String "PluginData"
      | `PluginResource -> `String "PluginResource"
      | `Prefetch -> `String "Prefetch"
      | `Resource -> `String "Resource"
      | `Script -> `String "Script"
      | `ServiceWorker -> `String "ServiceWorker"
      | `SharedWorker -> `String "SharedWorker"
      | `Stylesheet -> `String "Stylesheet"
      | `Track -> `String "Track"
      | `Video -> `String "Video"
      | `Worker -> `String "Worker"
      | `XMLHttpRequest -> `String "XMLHttpRequest"
      | `XSLT -> `String "XSLT"

    type t = _mixedcontentresourcetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and MixedContentIssueDetails : sig
    type t = {
      resourceType : MixedContentResourceType.t option;
          [@key "resourceType"]
          [@yojson.option]
          [@ocaml.doc
            "The type of resource causing the mixed content issue (css, js, \
             iframe,\n\
             form,...). Marked as optional because it is mapped to from\n\
             blink::mojom::RequestContextType, which will be replaced\n\
             by network::mojom::RequestDestination"]
      resolutionStatus : MixedContentResolutionStatus.t;
          [@key "resolutionStatus"]
          [@ocaml.doc "The way the mixed content issue is being resolved."]
      insecureURL : string;
          [@key "insecureURL"]
          [@ocaml.doc "The unsafe http url causing the mixed content issue."]
      mainResourceURL : string;
          [@key "mainResourceURL"]
          [@ocaml.doc "The url responsible for the call to an unsafe url."]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc
            "The mixed content request.\n\
             Does not always exist (e.g. for unsafe form submission urls)."]
      frame : AffectedFrame.t option;
          [@key "frame"]
          [@yojson.option]
          [@ocaml.doc
            "Optional because not every mixed content issue is necessarily \
             linked to a frame."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      resourceType : MixedContentResourceType.t option;
          [@key "resourceType"]
          [@yojson.option]
          [@ocaml.doc
            "The type of resource causing the mixed content issue (css, js, \
             iframe,\n\
             form,...). Marked as optional because it is mapped to from\n\
             blink::mojom::RequestContextType, which will be replaced\n\
             by network::mojom::RequestDestination"]
      resolutionStatus : MixedContentResolutionStatus.t;
          [@key "resolutionStatus"]
          [@ocaml.doc "The way the mixed content issue is being resolved."]
      insecureURL : string;
          [@key "insecureURL"]
          [@ocaml.doc "The unsafe http url causing the mixed content issue."]
      mainResourceURL : string;
          [@key "mainResourceURL"]
          [@ocaml.doc "The url responsible for the call to an unsafe url."]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc
            "The mixed content request.\n\
             Does not always exist (e.g. for unsafe form submission urls)."]
      frame : AffectedFrame.t option;
          [@key "frame"]
          [@yojson.option]
          [@ocaml.doc
            "Optional because not every mixed content issue is necessarily \
             linked to a frame."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and BlockedByResponseReason : sig
    type _blockedbyresponsereason =
      [ `CoepFrameResourceNeedsCoepHeader
      | `CoopSandboxedIFrameCannotNavigateToCoopPage
      | `CorpNotSameOrigin
      | `CorpNotSameOriginAfterDefaultedToSameOriginByCoep
      | `CorpNotSameSite ]

    val _blockedbyresponsereason_of_yojson :
      Yojson.Basic.t -> _blockedbyresponsereason

    val yojson_of__blockedbyresponsereason :
      _blockedbyresponsereason -> Yojson.Basic.t

    type t = _blockedbyresponsereason
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum indicating the reason a response has been blocked. These reasons are\n\
       refinements of the net error BLOCKED_BY_RESPONSE."]
  end = struct
    type _blockedbyresponsereason =
      [ `CoepFrameResourceNeedsCoepHeader
      | `CoopSandboxedIFrameCannotNavigateToCoopPage
      | `CorpNotSameOrigin
      | `CorpNotSameOriginAfterDefaultedToSameOriginByCoep
      | `CorpNotSameSite ]

    let _blockedbyresponsereason_of_yojson = function
      | `String "CoepFrameResourceNeedsCoepHeader" ->
          `CoepFrameResourceNeedsCoepHeader
      | `String "CoopSandboxedIFrameCannotNavigateToCoopPage" ->
          `CoopSandboxedIFrameCannotNavigateToCoopPage
      | `String "CorpNotSameOrigin" -> `CorpNotSameOrigin
      | `String "CorpNotSameOriginAfterDefaultedToSameOriginByCoep" ->
          `CorpNotSameOriginAfterDefaultedToSameOriginByCoep
      | `String "CorpNotSameSite" -> `CorpNotSameSite
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__blockedbyresponsereason = function
      | `CoepFrameResourceNeedsCoepHeader ->
          `String "CoepFrameResourceNeedsCoepHeader"
      | `CoopSandboxedIFrameCannotNavigateToCoopPage ->
          `String "CoopSandboxedIFrameCannotNavigateToCoopPage"
      | `CorpNotSameOrigin -> `String "CorpNotSameOrigin"
      | `CorpNotSameOriginAfterDefaultedToSameOriginByCoep ->
          `String "CorpNotSameOriginAfterDefaultedToSameOriginByCoep"
      | `CorpNotSameSite -> `String "CorpNotSameSite"

    type t = _blockedbyresponsereason
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum indicating the reason a response has been blocked. These reasons are\n\
       refinements of the net error BLOCKED_BY_RESPONSE."]
  end

  and BlockedByResponseIssueDetails : sig
    type t = {
      request : AffectedRequest.t;
          [@key "request"] [@ocaml.doc "No description provided"]
      parentFrame : AffectedFrame.t option;
          [@key "parentFrame"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      blockedFrame : AffectedFrame.t option;
          [@key "blockedFrame"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      reason : BlockedByResponseReason.t;
          [@key "reason"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for a request that has been blocked with the BLOCKED_BY_RESPONSE\n\
       code. Currently only used for COEP/COOP, but may be extended to include\n\
       some CSP errors in the future."]
  end = struct
    type t = {
      request : AffectedRequest.t;
          [@key "request"] [@ocaml.doc "No description provided"]
      parentFrame : AffectedFrame.t option;
          [@key "parentFrame"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      blockedFrame : AffectedFrame.t option;
          [@key "blockedFrame"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      reason : BlockedByResponseReason.t;
          [@key "reason"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for a request that has been blocked with the BLOCKED_BY_RESPONSE\n\
       code. Currently only used for COEP/COOP, but may be extended to include\n\
       some CSP errors in the future."]
  end

  and HeavyAdResolutionStatus : sig
    type _heavyadresolutionstatus = [ `HeavyAdBlocked | `HeavyAdWarning ]

    val _heavyadresolutionstatus_of_yojson :
      Yojson.Basic.t -> _heavyadresolutionstatus

    val yojson_of__heavyadresolutionstatus :
      _heavyadresolutionstatus -> Yojson.Basic.t

    type t = _heavyadresolutionstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _heavyadresolutionstatus = [ `HeavyAdBlocked | `HeavyAdWarning ]

    let _heavyadresolutionstatus_of_yojson = function
      | `String "HeavyAdBlocked" -> `HeavyAdBlocked
      | `String "HeavyAdWarning" -> `HeavyAdWarning
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__heavyadresolutionstatus = function
      | `HeavyAdBlocked -> `String "HeavyAdBlocked"
      | `HeavyAdWarning -> `String "HeavyAdWarning"

    type t = _heavyadresolutionstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HeavyAdReason : sig
    type _heavyadreason = [ `NetworkTotalLimit | `CpuTotalLimit | `CpuPeakLimit ]

    val _heavyadreason_of_yojson : Yojson.Basic.t -> _heavyadreason
    val yojson_of__heavyadreason : _heavyadreason -> Yojson.Basic.t

    type t = _heavyadreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _heavyadreason = [ `NetworkTotalLimit | `CpuTotalLimit | `CpuPeakLimit ]

    let _heavyadreason_of_yojson = function
      | `String "NetworkTotalLimit" -> `NetworkTotalLimit
      | `String "CpuTotalLimit" -> `CpuTotalLimit
      | `String "CpuPeakLimit" -> `CpuPeakLimit
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__heavyadreason = function
      | `NetworkTotalLimit -> `String "NetworkTotalLimit"
      | `CpuTotalLimit -> `String "CpuTotalLimit"
      | `CpuPeakLimit -> `String "CpuPeakLimit"

    type t = _heavyadreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HeavyAdIssueDetails : sig
    type t = {
      resolution : HeavyAdResolutionStatus.t;
          [@key "resolution"]
          [@ocaml.doc
            "The resolution status, either blocking the content or warning."]
      reason : HeavyAdReason.t;
          [@key "reason"]
          [@ocaml.doc
            "The reason the ad was blocked, total network or cpu or peak cpu."]
      frame : AffectedFrame.t;
          [@key "frame"] [@ocaml.doc "The frame that was blocked."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      resolution : HeavyAdResolutionStatus.t;
          [@key "resolution"]
          [@ocaml.doc
            "The resolution status, either blocking the content or warning."]
      reason : HeavyAdReason.t;
          [@key "reason"]
          [@ocaml.doc
            "The reason the ad was blocked, total network or cpu or peak cpu."]
      frame : AffectedFrame.t;
          [@key "frame"] [@ocaml.doc "The frame that was blocked."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContentSecurityPolicyViolationType : sig
    type _contentsecuritypolicyviolationtype =
      [ `kInlineViolation
      | `kEvalViolation
      | `kURLViolation
      | `kTrustedTypesSinkViolation
      | `kTrustedTypesPolicyViolation
      | `kWasmEvalViolation ]

    val _contentsecuritypolicyviolationtype_of_yojson :
      Yojson.Basic.t -> _contentsecuritypolicyviolationtype

    val yojson_of__contentsecuritypolicyviolationtype :
      _contentsecuritypolicyviolationtype -> Yojson.Basic.t

    type t = _contentsecuritypolicyviolationtype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _contentsecuritypolicyviolationtype =
      [ `kInlineViolation
      | `kEvalViolation
      | `kURLViolation
      | `kTrustedTypesSinkViolation
      | `kTrustedTypesPolicyViolation
      | `kWasmEvalViolation ]

    let _contentsecuritypolicyviolationtype_of_yojson = function
      | `String "kInlineViolation" -> `kInlineViolation
      | `String "kEvalViolation" -> `kEvalViolation
      | `String "kURLViolation" -> `kURLViolation
      | `String "kTrustedTypesSinkViolation" -> `kTrustedTypesSinkViolation
      | `String "kTrustedTypesPolicyViolation" -> `kTrustedTypesPolicyViolation
      | `String "kWasmEvalViolation" -> `kWasmEvalViolation
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__contentsecuritypolicyviolationtype = function
      | `kInlineViolation -> `String "kInlineViolation"
      | `kEvalViolation -> `String "kEvalViolation"
      | `kURLViolation -> `String "kURLViolation"
      | `kTrustedTypesSinkViolation -> `String "kTrustedTypesSinkViolation"
      | `kTrustedTypesPolicyViolation -> `String "kTrustedTypesPolicyViolation"
      | `kWasmEvalViolation -> `String "kWasmEvalViolation"

    type t = _contentsecuritypolicyviolationtype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SourceCodeLocation : sig
    type t = {
      scriptId : Runtime.ScriptId.t option;
          [@key "scriptId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "No description provided"]
      columnNumber : number;
          [@key "columnNumber"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      scriptId : Runtime.ScriptId.t option;
          [@key "scriptId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "No description provided"]
      columnNumber : number;
          [@key "columnNumber"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContentSecurityPolicyIssueDetails : sig
    type t = {
      blockedURL : string option;
          [@key "blockedURL"]
          [@yojson.option]
          [@ocaml.doc "The url not included in allowed sources."]
      violatedDirective : string;
          [@key "violatedDirective"]
          [@ocaml.doc
            "Specific directive that is violated, causing the CSP issue."]
      isReportOnly : bool;
          [@key "isReportOnly"] [@ocaml.doc "No description provided"]
      contentSecurityPolicyViolationType : ContentSecurityPolicyViolationType.t;
          [@key "contentSecurityPolicyViolationType"]
          [@ocaml.doc "No description provided"]
      frameAncestor : AffectedFrame.t option;
          [@key "frameAncestor"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      sourceCodeLocation : SourceCodeLocation.t option;
          [@key "sourceCodeLocation"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeId : DOM.BackendNodeId.t option;
          [@key "violatingNodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      blockedURL : string option;
          [@key "blockedURL"]
          [@yojson.option]
          [@ocaml.doc "The url not included in allowed sources."]
      violatedDirective : string;
          [@key "violatedDirective"]
          [@ocaml.doc
            "Specific directive that is violated, causing the CSP issue."]
      isReportOnly : bool;
          [@key "isReportOnly"] [@ocaml.doc "No description provided"]
      contentSecurityPolicyViolationType : ContentSecurityPolicyViolationType.t;
          [@key "contentSecurityPolicyViolationType"]
          [@ocaml.doc "No description provided"]
      frameAncestor : AffectedFrame.t option;
          [@key "frameAncestor"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      sourceCodeLocation : SourceCodeLocation.t option;
          [@key "sourceCodeLocation"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeId : DOM.BackendNodeId.t option;
          [@key "violatingNodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SharedArrayBufferIssueType : sig
    type _sharedarraybufferissuetype = [ `TransferIssue | `CreationIssue ]

    val _sharedarraybufferissuetype_of_yojson :
      Yojson.Basic.t -> _sharedarraybufferissuetype

    val yojson_of__sharedarraybufferissuetype :
      _sharedarraybufferissuetype -> Yojson.Basic.t

    type t = _sharedarraybufferissuetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _sharedarraybufferissuetype = [ `TransferIssue | `CreationIssue ]

    let _sharedarraybufferissuetype_of_yojson = function
      | `String "TransferIssue" -> `TransferIssue
      | `String "CreationIssue" -> `CreationIssue
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__sharedarraybufferissuetype = function
      | `TransferIssue -> `String "TransferIssue"
      | `CreationIssue -> `String "CreationIssue"

    type t = _sharedarraybufferissuetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SharedArrayBufferIssueDetails : sig
    type t = {
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"] [@ocaml.doc "No description provided"]
      isWarning : bool;
          [@key "isWarning"] [@ocaml.doc "No description provided"]
      type_ : SharedArrayBufferIssueType.t;
          [@key "type"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for a issue arising from an SAB being instantiated in, or\n\
       transferred to a context that is not cross-origin isolated."]
  end = struct
    type t = {
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"] [@ocaml.doc "No description provided"]
      isWarning : bool;
          [@key "isWarning"] [@ocaml.doc "No description provided"]
      type_ : SharedArrayBufferIssueType.t;
          [@key "type"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for a issue arising from an SAB being instantiated in, or\n\
       transferred to a context that is not cross-origin isolated."]
  end

  and LowTextContrastIssueDetails : sig
    type t = {
      violatingNodeId : DOM.BackendNodeId.t;
          [@key "violatingNodeId"] [@ocaml.doc "No description provided"]
      violatingNodeSelector : string;
          [@key "violatingNodeSelector"] [@ocaml.doc "No description provided"]
      contrastRatio : number;
          [@key "contrastRatio"] [@ocaml.doc "No description provided"]
      thresholdAA : number;
          [@key "thresholdAA"] [@ocaml.doc "No description provided"]
      thresholdAAA : number;
          [@key "thresholdAAA"] [@ocaml.doc "No description provided"]
      fontSize : string;
          [@key "fontSize"] [@ocaml.doc "No description provided"]
      fontWeight : string;
          [@key "fontWeight"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      violatingNodeId : DOM.BackendNodeId.t;
          [@key "violatingNodeId"] [@ocaml.doc "No description provided"]
      violatingNodeSelector : string;
          [@key "violatingNodeSelector"] [@ocaml.doc "No description provided"]
      contrastRatio : number;
          [@key "contrastRatio"] [@ocaml.doc "No description provided"]
      thresholdAA : number;
          [@key "thresholdAA"] [@ocaml.doc "No description provided"]
      thresholdAAA : number;
          [@key "thresholdAAA"] [@ocaml.doc "No description provided"]
      fontSize : string;
          [@key "fontSize"] [@ocaml.doc "No description provided"]
      fontWeight : string;
          [@key "fontWeight"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CorsIssueDetails : sig
    type t = {
      corsErrorStatus : Network.CorsErrorStatus.t;
          [@key "corsErrorStatus"] [@ocaml.doc "No description provided"]
      isWarning : bool;
          [@key "isWarning"] [@ocaml.doc "No description provided"]
      request : AffectedRequest.t;
          [@key "request"] [@ocaml.doc "No description provided"]
      location : SourceCodeLocation.t option;
          [@key "location"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      initiatorOrigin : string option;
          [@key "initiatorOrigin"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      resourceIPAddressSpace : Network.IPAddressSpace.t option;
          [@key "resourceIPAddressSpace"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      clientSecurityState : Network.ClientSecurityState.t option;
          [@key "clientSecurityState"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for a CORS related issue, e.g. a warning or error related to\n\
       CORS RFC1918 enforcement."]
  end = struct
    type t = {
      corsErrorStatus : Network.CorsErrorStatus.t;
          [@key "corsErrorStatus"] [@ocaml.doc "No description provided"]
      isWarning : bool;
          [@key "isWarning"] [@ocaml.doc "No description provided"]
      request : AffectedRequest.t;
          [@key "request"] [@ocaml.doc "No description provided"]
      location : SourceCodeLocation.t option;
          [@key "location"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      initiatorOrigin : string option;
          [@key "initiatorOrigin"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      resourceIPAddressSpace : Network.IPAddressSpace.t option;
          [@key "resourceIPAddressSpace"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      clientSecurityState : Network.ClientSecurityState.t option;
          [@key "clientSecurityState"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for a CORS related issue, e.g. a warning or error related to\n\
       CORS RFC1918 enforcement."]
  end

  and AttributionReportingIssueType : sig
    type _attributionreportingissuetype =
      [ `PermissionPolicyDisabled
      | `UntrustworthyReportingOrigin
      | `InsecureContext
      | `InvalidHeader
      | `InvalidRegisterTriggerHeader
      | `SourceAndTriggerHeaders
      | `SourceIgnored
      | `TriggerIgnored
      | `OsSourceIgnored
      | `OsTriggerIgnored
      | `InvalidRegisterOsSourceHeader
      | `InvalidRegisterOsTriggerHeader
      | `WebAndOsHeaders
      | `NoWebOrOsSupport
      | `NavigationRegistrationWithoutTransientUserActivation ]

    val _attributionreportingissuetype_of_yojson :
      Yojson.Basic.t -> _attributionreportingissuetype

    val yojson_of__attributionreportingissuetype :
      _attributionreportingissuetype -> Yojson.Basic.t

    type t = _attributionreportingissuetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _attributionreportingissuetype =
      [ `PermissionPolicyDisabled
      | `UntrustworthyReportingOrigin
      | `InsecureContext
      | `InvalidHeader
      | `InvalidRegisterTriggerHeader
      | `SourceAndTriggerHeaders
      | `SourceIgnored
      | `TriggerIgnored
      | `OsSourceIgnored
      | `OsTriggerIgnored
      | `InvalidRegisterOsSourceHeader
      | `InvalidRegisterOsTriggerHeader
      | `WebAndOsHeaders
      | `NoWebOrOsSupport
      | `NavigationRegistrationWithoutTransientUserActivation ]

    let _attributionreportingissuetype_of_yojson = function
      | `String "PermissionPolicyDisabled" -> `PermissionPolicyDisabled
      | `String "UntrustworthyReportingOrigin" -> `UntrustworthyReportingOrigin
      | `String "InsecureContext" -> `InsecureContext
      | `String "InvalidHeader" -> `InvalidHeader
      | `String "InvalidRegisterTriggerHeader" -> `InvalidRegisterTriggerHeader
      | `String "SourceAndTriggerHeaders" -> `SourceAndTriggerHeaders
      | `String "SourceIgnored" -> `SourceIgnored
      | `String "TriggerIgnored" -> `TriggerIgnored
      | `String "OsSourceIgnored" -> `OsSourceIgnored
      | `String "OsTriggerIgnored" -> `OsTriggerIgnored
      | `String "InvalidRegisterOsSourceHeader" ->
          `InvalidRegisterOsSourceHeader
      | `String "InvalidRegisterOsTriggerHeader" ->
          `InvalidRegisterOsTriggerHeader
      | `String "WebAndOsHeaders" -> `WebAndOsHeaders
      | `String "NoWebOrOsSupport" -> `NoWebOrOsSupport
      | `String "NavigationRegistrationWithoutTransientUserActivation" ->
          `NavigationRegistrationWithoutTransientUserActivation
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__attributionreportingissuetype = function
      | `PermissionPolicyDisabled -> `String "PermissionPolicyDisabled"
      | `UntrustworthyReportingOrigin -> `String "UntrustworthyReportingOrigin"
      | `InsecureContext -> `String "InsecureContext"
      | `InvalidHeader -> `String "InvalidHeader"
      | `InvalidRegisterTriggerHeader -> `String "InvalidRegisterTriggerHeader"
      | `SourceAndTriggerHeaders -> `String "SourceAndTriggerHeaders"
      | `SourceIgnored -> `String "SourceIgnored"
      | `TriggerIgnored -> `String "TriggerIgnored"
      | `OsSourceIgnored -> `String "OsSourceIgnored"
      | `OsTriggerIgnored -> `String "OsTriggerIgnored"
      | `InvalidRegisterOsSourceHeader ->
          `String "InvalidRegisterOsSourceHeader"
      | `InvalidRegisterOsTriggerHeader ->
          `String "InvalidRegisterOsTriggerHeader"
      | `WebAndOsHeaders -> `String "WebAndOsHeaders"
      | `NoWebOrOsSupport -> `String "NoWebOrOsSupport"
      | `NavigationRegistrationWithoutTransientUserActivation ->
          `String "NavigationRegistrationWithoutTransientUserActivation"

    type t = _attributionreportingissuetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingIssueDetails : sig
    type t = {
      violationType : AttributionReportingIssueType.t;
          [@key "violationType"] [@ocaml.doc "No description provided"]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeId : DOM.BackendNodeId.t option;
          [@key "violatingNodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      invalidParameter : string option;
          [@key "invalidParameter"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for issues around \"Attribution Reporting API\" usage.\n\
       Explainer: https://github.com/WICG/attribution-reporting-api"]
  end = struct
    type t = {
      violationType : AttributionReportingIssueType.t;
          [@key "violationType"] [@ocaml.doc "No description provided"]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeId : DOM.BackendNodeId.t option;
          [@key "violatingNodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      invalidParameter : string option;
          [@key "invalidParameter"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for issues around \"Attribution Reporting API\" usage.\n\
       Explainer: https://github.com/WICG/attribution-reporting-api"]
  end

  and QuirksModeIssueDetails : sig
    type t = {
      isLimitedQuirksMode : bool;
          [@key "isLimitedQuirksMode"]
          [@ocaml.doc
            "If false, it means the document's mode is \"quirks\"\n\
             instead of \"limited-quirks\"."]
      documentNodeId : DOM.BackendNodeId.t;
          [@key "documentNodeId"] [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      frameId : Page.FrameId.t;
          [@key "frameId"] [@ocaml.doc "No description provided"]
      loaderId : Network.LoaderId.t;
          [@key "loaderId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for issues about documents in Quirks Mode\n\
       or Limited Quirks Mode that affects page layouting."]
  end = struct
    type t = {
      isLimitedQuirksMode : bool;
          [@key "isLimitedQuirksMode"]
          [@ocaml.doc
            "If false, it means the document's mode is \"quirks\"\n\
             instead of \"limited-quirks\"."]
      documentNodeId : DOM.BackendNodeId.t;
          [@key "documentNodeId"] [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      frameId : Page.FrameId.t;
          [@key "frameId"] [@ocaml.doc "No description provided"]
      loaderId : Network.LoaderId.t;
          [@key "loaderId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details for issues about documents in Quirks Mode\n\
       or Limited Quirks Mode that affects page layouting."]
  end

  and NavigatorUserAgentIssueDetails : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      location : SourceCodeLocation.t option;
          [@key "location"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      location : SourceCodeLocation.t option;
          [@key "location"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and GenericIssueErrorType : sig
    type _genericissueerrortype =
      [ `CrossOriginPortalPostMessageError
      | `FormLabelForNameError
      | `FormDuplicateIdForInputError
      | `FormInputWithNoLabelError
      | `FormAutocompleteAttributeEmptyError
      | `FormEmptyIdAndNameAttributesForInputError
      | `FormAriaLabelledByToNonExistingId
      | `FormInputAssignedAutocompleteValueToIdOrNameAttributeError
      | `FormLabelHasNeitherForNorNestedInput
      | `FormLabelForMatchesNonExistingIdError
      | `FormInputHasWrongButWellIntendedAutocompleteValueError
      | `ResponseWasBlockedByORB ]

    val _genericissueerrortype_of_yojson :
      Yojson.Basic.t -> _genericissueerrortype

    val yojson_of__genericissueerrortype :
      _genericissueerrortype -> Yojson.Basic.t

    type t = _genericissueerrortype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _genericissueerrortype =
      [ `CrossOriginPortalPostMessageError
      | `FormLabelForNameError
      | `FormDuplicateIdForInputError
      | `FormInputWithNoLabelError
      | `FormAutocompleteAttributeEmptyError
      | `FormEmptyIdAndNameAttributesForInputError
      | `FormAriaLabelledByToNonExistingId
      | `FormInputAssignedAutocompleteValueToIdOrNameAttributeError
      | `FormLabelHasNeitherForNorNestedInput
      | `FormLabelForMatchesNonExistingIdError
      | `FormInputHasWrongButWellIntendedAutocompleteValueError
      | `ResponseWasBlockedByORB ]

    let _genericissueerrortype_of_yojson = function
      | `String "CrossOriginPortalPostMessageError" ->
          `CrossOriginPortalPostMessageError
      | `String "FormLabelForNameError" -> `FormLabelForNameError
      | `String "FormDuplicateIdForInputError" -> `FormDuplicateIdForInputError
      | `String "FormInputWithNoLabelError" -> `FormInputWithNoLabelError
      | `String "FormAutocompleteAttributeEmptyError" ->
          `FormAutocompleteAttributeEmptyError
      | `String "FormEmptyIdAndNameAttributesForInputError" ->
          `FormEmptyIdAndNameAttributesForInputError
      | `String "FormAriaLabelledByToNonExistingId" ->
          `FormAriaLabelledByToNonExistingId
      | `String "FormInputAssignedAutocompleteValueToIdOrNameAttributeError" ->
          `FormInputAssignedAutocompleteValueToIdOrNameAttributeError
      | `String "FormLabelHasNeitherForNorNestedInput" ->
          `FormLabelHasNeitherForNorNestedInput
      | `String "FormLabelForMatchesNonExistingIdError" ->
          `FormLabelForMatchesNonExistingIdError
      | `String "FormInputHasWrongButWellIntendedAutocompleteValueError" ->
          `FormInputHasWrongButWellIntendedAutocompleteValueError
      | `String "ResponseWasBlockedByORB" -> `ResponseWasBlockedByORB
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__genericissueerrortype = function
      | `CrossOriginPortalPostMessageError ->
          `String "CrossOriginPortalPostMessageError"
      | `FormLabelForNameError -> `String "FormLabelForNameError"
      | `FormDuplicateIdForInputError -> `String "FormDuplicateIdForInputError"
      | `FormInputWithNoLabelError -> `String "FormInputWithNoLabelError"
      | `FormAutocompleteAttributeEmptyError ->
          `String "FormAutocompleteAttributeEmptyError"
      | `FormEmptyIdAndNameAttributesForInputError ->
          `String "FormEmptyIdAndNameAttributesForInputError"
      | `FormAriaLabelledByToNonExistingId ->
          `String "FormAriaLabelledByToNonExistingId"
      | `FormInputAssignedAutocompleteValueToIdOrNameAttributeError ->
          `String "FormInputAssignedAutocompleteValueToIdOrNameAttributeError"
      | `FormLabelHasNeitherForNorNestedInput ->
          `String "FormLabelHasNeitherForNorNestedInput"
      | `FormLabelForMatchesNonExistingIdError ->
          `String "FormLabelForMatchesNonExistingIdError"
      | `FormInputHasWrongButWellIntendedAutocompleteValueError ->
          `String "FormInputHasWrongButWellIntendedAutocompleteValueError"
      | `ResponseWasBlockedByORB -> `String "ResponseWasBlockedByORB"

    type t = _genericissueerrortype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and GenericIssueDetails : sig
    type t = {
      errorType : GenericIssueErrorType.t;
          [@key "errorType"]
          [@ocaml.doc
            "Issues with the same errorType are aggregated in the frontend."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeId : DOM.BackendNodeId.t option;
          [@key "violatingNodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeAttribute : string option;
          [@key "violatingNodeAttribute"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Depending on the concrete errorType, different properties are set."]
  end = struct
    type t = {
      errorType : GenericIssueErrorType.t;
          [@key "errorType"]
          [@ocaml.doc
            "Issues with the same errorType are aggregated in the frontend."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeId : DOM.BackendNodeId.t option;
          [@key "violatingNodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      violatingNodeAttribute : string option;
          [@key "violatingNodeAttribute"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      request : AffectedRequest.t option;
          [@key "request"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Depending on the concrete errorType, different properties are set."]
  end

  and DeprecationIssueDetails : sig
    type t = {
      affectedFrame : AffectedFrame.t option;
          [@key "affectedFrame"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"] [@ocaml.doc "No description provided"]
      type_ : string;
          [@key "type"]
          [@ocaml.doc
            "One of the deprecation names from \
             third_party/blink/renderer/core/frame/deprecation/deprecation.json5"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue tracks information needed to print a deprecation message.\n\
       https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md"]
  end = struct
    type t = {
      affectedFrame : AffectedFrame.t option;
          [@key "affectedFrame"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"] [@ocaml.doc "No description provided"]
      type_ : string;
          [@key "type"]
          [@ocaml.doc
            "One of the deprecation names from \
             third_party/blink/renderer/core/frame/deprecation/deprecation.json5"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue tracks information needed to print a deprecation message.\n\
       https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md"]
  end

  and BounceTrackingIssueDetails : sig
    type t = {
      trackingSites : string list;
          [@key "trackingSites"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue warns about sites in the redirect chain of a finished \
       navigation\n\
       that may be flagged as trackers and have their state cleared if they \
       don't\n\
       receive a user interaction. Note that in this context 'site' means \
       eTLD+1.\n\
       For example, if the URL `https://example.test:80/bounce` was in the\n\
       redirect chain, the site reported would be `example.test`."]
  end = struct
    type t = {
      trackingSites : string list;
          [@key "trackingSites"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue warns about sites in the redirect chain of a finished \
       navigation\n\
       that may be flagged as trackers and have their state cleared if they \
       don't\n\
       receive a user interaction. Note that in this context 'site' means \
       eTLD+1.\n\
       For example, if the URL `https://example.test:80/bounce` was in the\n\
       redirect chain, the site reported would be `example.test`."]
  end

  and ClientHintIssueReason : sig
    type _clienthintissuereason =
      [ `MetaTagAllowListInvalidOrigin | `MetaTagModifiedHTML ]

    val _clienthintissuereason_of_yojson :
      Yojson.Basic.t -> _clienthintissuereason

    val yojson_of__clienthintissuereason :
      _clienthintissuereason -> Yojson.Basic.t

    type t = _clienthintissuereason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _clienthintissuereason =
      [ `MetaTagAllowListInvalidOrigin | `MetaTagModifiedHTML ]

    let _clienthintissuereason_of_yojson = function
      | `String "MetaTagAllowListInvalidOrigin" ->
          `MetaTagAllowListInvalidOrigin
      | `String "MetaTagModifiedHTML" -> `MetaTagModifiedHTML
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__clienthintissuereason = function
      | `MetaTagAllowListInvalidOrigin ->
          `String "MetaTagAllowListInvalidOrigin"
      | `MetaTagModifiedHTML -> `String "MetaTagModifiedHTML"

    type t = _clienthintissuereason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and FederatedAuthRequestIssueDetails : sig
    type t = {
      federatedAuthRequestIssueReason : FederatedAuthRequestIssueReason.t;
          [@key "federatedAuthRequestIssueReason"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      federatedAuthRequestIssueReason : FederatedAuthRequestIssueReason.t;
          [@key "federatedAuthRequestIssueReason"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and FederatedAuthRequestIssueReason : sig
    type _federatedauthrequestissuereason =
      [ `ShouldEmbargo
      | `TooManyRequests
      | `WellKnownHttpNotFound
      | `WellKnownNoResponse
      | `WellKnownInvalidResponse
      | `WellKnownListEmpty
      | `WellKnownInvalidContentType
      | `ConfigNotInWellKnown
      | `WellKnownTooBig
      | `ConfigHttpNotFound
      | `ConfigNoResponse
      | `ConfigInvalidResponse
      | `ConfigInvalidContentType
      | `ClientMetadataHttpNotFound
      | `ClientMetadataNoResponse
      | `ClientMetadataInvalidResponse
      | `ClientMetadataInvalidContentType
      | `DisabledInSettings
      | `ErrorFetchingSignin
      | `InvalidSigninResponse
      | `AccountsHttpNotFound
      | `AccountsNoResponse
      | `AccountsInvalidResponse
      | `AccountsListEmpty
      | `AccountsInvalidContentType
      | `IdTokenHttpNotFound
      | `IdTokenNoResponse
      | `IdTokenInvalidResponse
      | `IdTokenInvalidRequest
      | `IdTokenInvalidContentType
      | `ErrorIdToken
      | `Canceled
      | `RpPageNotVisible
      | `SilentMediationFailure
      | `ThirdPartyCookiesBlocked ]

    val _federatedauthrequestissuereason_of_yojson :
      Yojson.Basic.t -> _federatedauthrequestissuereason

    val yojson_of__federatedauthrequestissuereason :
      _federatedauthrequestissuereason -> Yojson.Basic.t

    type t = _federatedauthrequestissuereason
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the failure reason when a federated authentication reason \
       fails.\n\
       Should be updated alongside RequestIdTokenStatus in\n\
       third_party/blink/public/mojom/devtools/inspector_issue.mojom to include\n\
       all cases except for success."]
  end = struct
    type _federatedauthrequestissuereason =
      [ `ShouldEmbargo
      | `TooManyRequests
      | `WellKnownHttpNotFound
      | `WellKnownNoResponse
      | `WellKnownInvalidResponse
      | `WellKnownListEmpty
      | `WellKnownInvalidContentType
      | `ConfigNotInWellKnown
      | `WellKnownTooBig
      | `ConfigHttpNotFound
      | `ConfigNoResponse
      | `ConfigInvalidResponse
      | `ConfigInvalidContentType
      | `ClientMetadataHttpNotFound
      | `ClientMetadataNoResponse
      | `ClientMetadataInvalidResponse
      | `ClientMetadataInvalidContentType
      | `DisabledInSettings
      | `ErrorFetchingSignin
      | `InvalidSigninResponse
      | `AccountsHttpNotFound
      | `AccountsNoResponse
      | `AccountsInvalidResponse
      | `AccountsListEmpty
      | `AccountsInvalidContentType
      | `IdTokenHttpNotFound
      | `IdTokenNoResponse
      | `IdTokenInvalidResponse
      | `IdTokenInvalidRequest
      | `IdTokenInvalidContentType
      | `ErrorIdToken
      | `Canceled
      | `RpPageNotVisible
      | `SilentMediationFailure
      | `ThirdPartyCookiesBlocked ]

    let _federatedauthrequestissuereason_of_yojson = function
      | `String "ShouldEmbargo" -> `ShouldEmbargo
      | `String "TooManyRequests" -> `TooManyRequests
      | `String "WellKnownHttpNotFound" -> `WellKnownHttpNotFound
      | `String "WellKnownNoResponse" -> `WellKnownNoResponse
      | `String "WellKnownInvalidResponse" -> `WellKnownInvalidResponse
      | `String "WellKnownListEmpty" -> `WellKnownListEmpty
      | `String "WellKnownInvalidContentType" -> `WellKnownInvalidContentType
      | `String "ConfigNotInWellKnown" -> `ConfigNotInWellKnown
      | `String "WellKnownTooBig" -> `WellKnownTooBig
      | `String "ConfigHttpNotFound" -> `ConfigHttpNotFound
      | `String "ConfigNoResponse" -> `ConfigNoResponse
      | `String "ConfigInvalidResponse" -> `ConfigInvalidResponse
      | `String "ConfigInvalidContentType" -> `ConfigInvalidContentType
      | `String "ClientMetadataHttpNotFound" -> `ClientMetadataHttpNotFound
      | `String "ClientMetadataNoResponse" -> `ClientMetadataNoResponse
      | `String "ClientMetadataInvalidResponse" ->
          `ClientMetadataInvalidResponse
      | `String "ClientMetadataInvalidContentType" ->
          `ClientMetadataInvalidContentType
      | `String "DisabledInSettings" -> `DisabledInSettings
      | `String "ErrorFetchingSignin" -> `ErrorFetchingSignin
      | `String "InvalidSigninResponse" -> `InvalidSigninResponse
      | `String "AccountsHttpNotFound" -> `AccountsHttpNotFound
      | `String "AccountsNoResponse" -> `AccountsNoResponse
      | `String "AccountsInvalidResponse" -> `AccountsInvalidResponse
      | `String "AccountsListEmpty" -> `AccountsListEmpty
      | `String "AccountsInvalidContentType" -> `AccountsInvalidContentType
      | `String "IdTokenHttpNotFound" -> `IdTokenHttpNotFound
      | `String "IdTokenNoResponse" -> `IdTokenNoResponse
      | `String "IdTokenInvalidResponse" -> `IdTokenInvalidResponse
      | `String "IdTokenInvalidRequest" -> `IdTokenInvalidRequest
      | `String "IdTokenInvalidContentType" -> `IdTokenInvalidContentType
      | `String "ErrorIdToken" -> `ErrorIdToken
      | `String "Canceled" -> `Canceled
      | `String "RpPageNotVisible" -> `RpPageNotVisible
      | `String "SilentMediationFailure" -> `SilentMediationFailure
      | `String "ThirdPartyCookiesBlocked" -> `ThirdPartyCookiesBlocked
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__federatedauthrequestissuereason = function
      | `ShouldEmbargo -> `String "ShouldEmbargo"
      | `TooManyRequests -> `String "TooManyRequests"
      | `WellKnownHttpNotFound -> `String "WellKnownHttpNotFound"
      | `WellKnownNoResponse -> `String "WellKnownNoResponse"
      | `WellKnownInvalidResponse -> `String "WellKnownInvalidResponse"
      | `WellKnownListEmpty -> `String "WellKnownListEmpty"
      | `WellKnownInvalidContentType -> `String "WellKnownInvalidContentType"
      | `ConfigNotInWellKnown -> `String "ConfigNotInWellKnown"
      | `WellKnownTooBig -> `String "WellKnownTooBig"
      | `ConfigHttpNotFound -> `String "ConfigHttpNotFound"
      | `ConfigNoResponse -> `String "ConfigNoResponse"
      | `ConfigInvalidResponse -> `String "ConfigInvalidResponse"
      | `ConfigInvalidContentType -> `String "ConfigInvalidContentType"
      | `ClientMetadataHttpNotFound -> `String "ClientMetadataHttpNotFound"
      | `ClientMetadataNoResponse -> `String "ClientMetadataNoResponse"
      | `ClientMetadataInvalidResponse ->
          `String "ClientMetadataInvalidResponse"
      | `ClientMetadataInvalidContentType ->
          `String "ClientMetadataInvalidContentType"
      | `DisabledInSettings -> `String "DisabledInSettings"
      | `ErrorFetchingSignin -> `String "ErrorFetchingSignin"
      | `InvalidSigninResponse -> `String "InvalidSigninResponse"
      | `AccountsHttpNotFound -> `String "AccountsHttpNotFound"
      | `AccountsNoResponse -> `String "AccountsNoResponse"
      | `AccountsInvalidResponse -> `String "AccountsInvalidResponse"
      | `AccountsListEmpty -> `String "AccountsListEmpty"
      | `AccountsInvalidContentType -> `String "AccountsInvalidContentType"
      | `IdTokenHttpNotFound -> `String "IdTokenHttpNotFound"
      | `IdTokenNoResponse -> `String "IdTokenNoResponse"
      | `IdTokenInvalidResponse -> `String "IdTokenInvalidResponse"
      | `IdTokenInvalidRequest -> `String "IdTokenInvalidRequest"
      | `IdTokenInvalidContentType -> `String "IdTokenInvalidContentType"
      | `ErrorIdToken -> `String "ErrorIdToken"
      | `Canceled -> `String "Canceled"
      | `RpPageNotVisible -> `String "RpPageNotVisible"
      | `SilentMediationFailure -> `String "SilentMediationFailure"
      | `ThirdPartyCookiesBlocked -> `String "ThirdPartyCookiesBlocked"

    type t = _federatedauthrequestissuereason
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the failure reason when a federated authentication reason \
       fails.\n\
       Should be updated alongside RequestIdTokenStatus in\n\
       third_party/blink/public/mojom/devtools/inspector_issue.mojom to include\n\
       all cases except for success."]
  end

  and FederatedAuthUserInfoRequestIssueDetails : sig
    type t = {
      federatedAuthUserInfoRequestIssueReason :
        FederatedAuthUserInfoRequestIssueReason.t;
          [@key "federatedAuthUserInfoRequestIssueReason"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      federatedAuthUserInfoRequestIssueReason :
        FederatedAuthUserInfoRequestIssueReason.t;
          [@key "federatedAuthUserInfoRequestIssueReason"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and FederatedAuthUserInfoRequestIssueReason : sig
    type _federatedauthuserinforequestissuereason =
      [ `NotSameOrigin
      | `NotIframe
      | `NotPotentiallyTrustworthy
      | `NoApiPermission
      | `NotSignedInWithIdp
      | `NoAccountSharingPermission
      | `InvalidConfigOrWellKnown
      | `InvalidAccountsResponse
      | `NoReturningUserFromFetchedAccounts ]

    val _federatedauthuserinforequestissuereason_of_yojson :
      Yojson.Basic.t -> _federatedauthuserinforequestissuereason

    val yojson_of__federatedauthuserinforequestissuereason :
      _federatedauthuserinforequestissuereason -> Yojson.Basic.t

    type t = _federatedauthuserinforequestissuereason
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the failure reason when a getUserInfo() call fails.\n\
       Should be updated alongside FederatedAuthUserInfoRequestResult in\n\
       third_party/blink/public/mojom/devtools/inspector_issue.mojom."]
  end = struct
    type _federatedauthuserinforequestissuereason =
      [ `NotSameOrigin
      | `NotIframe
      | `NotPotentiallyTrustworthy
      | `NoApiPermission
      | `NotSignedInWithIdp
      | `NoAccountSharingPermission
      | `InvalidConfigOrWellKnown
      | `InvalidAccountsResponse
      | `NoReturningUserFromFetchedAccounts ]

    let _federatedauthuserinforequestissuereason_of_yojson = function
      | `String "NotSameOrigin" -> `NotSameOrigin
      | `String "NotIframe" -> `NotIframe
      | `String "NotPotentiallyTrustworthy" -> `NotPotentiallyTrustworthy
      | `String "NoApiPermission" -> `NoApiPermission
      | `String "NotSignedInWithIdp" -> `NotSignedInWithIdp
      | `String "NoAccountSharingPermission" -> `NoAccountSharingPermission
      | `String "InvalidConfigOrWellKnown" -> `InvalidConfigOrWellKnown
      | `String "InvalidAccountsResponse" -> `InvalidAccountsResponse
      | `String "NoReturningUserFromFetchedAccounts" ->
          `NoReturningUserFromFetchedAccounts
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__federatedauthuserinforequestissuereason = function
      | `NotSameOrigin -> `String "NotSameOrigin"
      | `NotIframe -> `String "NotIframe"
      | `NotPotentiallyTrustworthy -> `String "NotPotentiallyTrustworthy"
      | `NoApiPermission -> `String "NoApiPermission"
      | `NotSignedInWithIdp -> `String "NotSignedInWithIdp"
      | `NoAccountSharingPermission -> `String "NoAccountSharingPermission"
      | `InvalidConfigOrWellKnown -> `String "InvalidConfigOrWellKnown"
      | `InvalidAccountsResponse -> `String "InvalidAccountsResponse"
      | `NoReturningUserFromFetchedAccounts ->
          `String "NoReturningUserFromFetchedAccounts"

    type t = _federatedauthuserinforequestissuereason
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the failure reason when a getUserInfo() call fails.\n\
       Should be updated alongside FederatedAuthUserInfoRequestResult in\n\
       third_party/blink/public/mojom/devtools/inspector_issue.mojom."]
  end

  and ClientHintIssueDetails : sig
    type t = {
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"] [@ocaml.doc "No description provided"]
      clientHintIssueReason : ClientHintIssueReason.t;
          [@key "clientHintIssueReason"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue tracks client hints related issues. It's used to deprecate old\n\
       features, encourage the use of new ones, and provide general guidance."]
  end = struct
    type t = {
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"] [@ocaml.doc "No description provided"]
      clientHintIssueReason : ClientHintIssueReason.t;
          [@key "clientHintIssueReason"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue tracks client hints related issues. It's used to deprecate old\n\
       features, encourage the use of new ones, and provide general guidance."]
  end

  and FailedRequestInfo : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "The URL that failed to load."]
      failureMessage : string;
          [@key "failureMessage"]
          [@ocaml.doc "The failure message for the failed request."]
      requestId : Network.RequestId.t option;
          [@key "requestId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      url : string; [@key "url"] [@ocaml.doc "The URL that failed to load."]
      failureMessage : string;
          [@key "failureMessage"]
          [@ocaml.doc "The failure message for the failed request."]
      requestId : Network.RequestId.t option;
          [@key "requestId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StyleSheetLoadingIssueReason : sig
    type _stylesheetloadingissuereason = [ `LateImportRule | `RequestFailed ]

    val _stylesheetloadingissuereason_of_yojson :
      Yojson.Basic.t -> _stylesheetloadingissuereason

    val yojson_of__stylesheetloadingissuereason :
      _stylesheetloadingissuereason -> Yojson.Basic.t

    type t = _stylesheetloadingissuereason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _stylesheetloadingissuereason = [ `LateImportRule | `RequestFailed ]

    let _stylesheetloadingissuereason_of_yojson = function
      | `String "LateImportRule" -> `LateImportRule
      | `String "RequestFailed" -> `RequestFailed
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__stylesheetloadingissuereason = function
      | `LateImportRule -> `String "LateImportRule"
      | `RequestFailed -> `String "RequestFailed"

    type t = _stylesheetloadingissuereason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StylesheetLoadingIssueDetails : sig
    type t = {
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"]
          [@ocaml.doc
            "Source code position that referenced the failing stylesheet."]
      styleSheetLoadingIssueReason : StyleSheetLoadingIssueReason.t;
          [@key "styleSheetLoadingIssueReason"]
          [@ocaml.doc "Reason why the stylesheet couldn't be loaded."]
      failedRequestInfo : FailedRequestInfo.t option;
          [@key "failedRequestInfo"]
          [@yojson.option]
          [@ocaml.doc
            "Contains additional info when the failure was due to a request."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue warns when a referenced stylesheet couldn't be loaded."]
  end = struct
    type t = {
      sourceCodeLocation : SourceCodeLocation.t;
          [@key "sourceCodeLocation"]
          [@ocaml.doc
            "Source code position that referenced the failing stylesheet."]
      styleSheetLoadingIssueReason : StyleSheetLoadingIssueReason.t;
          [@key "styleSheetLoadingIssueReason"]
          [@ocaml.doc "Reason why the stylesheet couldn't be loaded."]
      failedRequestInfo : FailedRequestInfo.t option;
          [@key "failedRequestInfo"]
          [@yojson.option]
          [@ocaml.doc
            "Contains additional info when the failure was due to a request."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This issue warns when a referenced stylesheet couldn't be loaded."]
  end

  and InspectorIssueCode : sig
    type _inspectorissuecode =
      [ `CookieIssue
      | `MixedContentIssue
      | `BlockedByResponseIssue
      | `HeavyAdIssue
      | `ContentSecurityPolicyIssue
      | `SharedArrayBufferIssue
      | `LowTextContrastIssue
      | `CorsIssue
      | `AttributionReportingIssue
      | `QuirksModeIssue
      | `NavigatorUserAgentIssue
      | `GenericIssue
      | `DeprecationIssue
      | `ClientHintIssue
      | `FederatedAuthRequestIssue
      | `BounceTrackingIssue
      | `StylesheetLoadingIssue
      | `FederatedAuthUserInfoRequestIssue ]

    val _inspectorissuecode_of_yojson : Yojson.Basic.t -> _inspectorissuecode
    val yojson_of__inspectorissuecode : _inspectorissuecode -> Yojson.Basic.t

    type t = _inspectorissuecode
    [@@deriving yojson]
    [@@ocaml.doc
      "A unique identifier for the type of issue. Each type may use one of the\n\
       optional fields in InspectorIssueDetails to convey more specific\n\
       information about the kind of issue."]
  end = struct
    type _inspectorissuecode =
      [ `CookieIssue
      | `MixedContentIssue
      | `BlockedByResponseIssue
      | `HeavyAdIssue
      | `ContentSecurityPolicyIssue
      | `SharedArrayBufferIssue
      | `LowTextContrastIssue
      | `CorsIssue
      | `AttributionReportingIssue
      | `QuirksModeIssue
      | `NavigatorUserAgentIssue
      | `GenericIssue
      | `DeprecationIssue
      | `ClientHintIssue
      | `FederatedAuthRequestIssue
      | `BounceTrackingIssue
      | `StylesheetLoadingIssue
      | `FederatedAuthUserInfoRequestIssue ]

    let _inspectorissuecode_of_yojson = function
      | `String "CookieIssue" -> `CookieIssue
      | `String "MixedContentIssue" -> `MixedContentIssue
      | `String "BlockedByResponseIssue" -> `BlockedByResponseIssue
      | `String "HeavyAdIssue" -> `HeavyAdIssue
      | `String "ContentSecurityPolicyIssue" -> `ContentSecurityPolicyIssue
      | `String "SharedArrayBufferIssue" -> `SharedArrayBufferIssue
      | `String "LowTextContrastIssue" -> `LowTextContrastIssue
      | `String "CorsIssue" -> `CorsIssue
      | `String "AttributionReportingIssue" -> `AttributionReportingIssue
      | `String "QuirksModeIssue" -> `QuirksModeIssue
      | `String "NavigatorUserAgentIssue" -> `NavigatorUserAgentIssue
      | `String "GenericIssue" -> `GenericIssue
      | `String "DeprecationIssue" -> `DeprecationIssue
      | `String "ClientHintIssue" -> `ClientHintIssue
      | `String "FederatedAuthRequestIssue" -> `FederatedAuthRequestIssue
      | `String "BounceTrackingIssue" -> `BounceTrackingIssue
      | `String "StylesheetLoadingIssue" -> `StylesheetLoadingIssue
      | `String "FederatedAuthUserInfoRequestIssue" ->
          `FederatedAuthUserInfoRequestIssue
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__inspectorissuecode = function
      | `CookieIssue -> `String "CookieIssue"
      | `MixedContentIssue -> `String "MixedContentIssue"
      | `BlockedByResponseIssue -> `String "BlockedByResponseIssue"
      | `HeavyAdIssue -> `String "HeavyAdIssue"
      | `ContentSecurityPolicyIssue -> `String "ContentSecurityPolicyIssue"
      | `SharedArrayBufferIssue -> `String "SharedArrayBufferIssue"
      | `LowTextContrastIssue -> `String "LowTextContrastIssue"
      | `CorsIssue -> `String "CorsIssue"
      | `AttributionReportingIssue -> `String "AttributionReportingIssue"
      | `QuirksModeIssue -> `String "QuirksModeIssue"
      | `NavigatorUserAgentIssue -> `String "NavigatorUserAgentIssue"
      | `GenericIssue -> `String "GenericIssue"
      | `DeprecationIssue -> `String "DeprecationIssue"
      | `ClientHintIssue -> `String "ClientHintIssue"
      | `FederatedAuthRequestIssue -> `String "FederatedAuthRequestIssue"
      | `BounceTrackingIssue -> `String "BounceTrackingIssue"
      | `StylesheetLoadingIssue -> `String "StylesheetLoadingIssue"
      | `FederatedAuthUserInfoRequestIssue ->
          `String "FederatedAuthUserInfoRequestIssue"

    type t = _inspectorissuecode
    [@@deriving yojson]
    [@@ocaml.doc
      "A unique identifier for the type of issue. Each type may use one of the\n\
       optional fields in InspectorIssueDetails to convey more specific\n\
       information about the kind of issue."]
  end

  and InspectorIssueDetails : sig
    type t = {
      cookieIssueDetails : CookieIssueDetails.t option;
          [@key "cookieIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      mixedContentIssueDetails : MixedContentIssueDetails.t option;
          [@key "mixedContentIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      blockedByResponseIssueDetails : BlockedByResponseIssueDetails.t option;
          [@key "blockedByResponseIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      heavyAdIssueDetails : HeavyAdIssueDetails.t option;
          [@key "heavyAdIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      contentSecurityPolicyIssueDetails :
        ContentSecurityPolicyIssueDetails.t option;
          [@key "contentSecurityPolicyIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      sharedArrayBufferIssueDetails : SharedArrayBufferIssueDetails.t option;
          [@key "sharedArrayBufferIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      lowTextContrastIssueDetails : LowTextContrastIssueDetails.t option;
          [@key "lowTextContrastIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      corsIssueDetails : CorsIssueDetails.t option;
          [@key "corsIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      attributionReportingIssueDetails :
        AttributionReportingIssueDetails.t option;
          [@key "attributionReportingIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      quirksModeIssueDetails : QuirksModeIssueDetails.t option;
          [@key "quirksModeIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      navigatorUserAgentIssueDetails : NavigatorUserAgentIssueDetails.t option;
          [@key "navigatorUserAgentIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      genericIssueDetails : GenericIssueDetails.t option;
          [@key "genericIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      deprecationIssueDetails : DeprecationIssueDetails.t option;
          [@key "deprecationIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      clientHintIssueDetails : ClientHintIssueDetails.t option;
          [@key "clientHintIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      federatedAuthRequestIssueDetails :
        FederatedAuthRequestIssueDetails.t option;
          [@key "federatedAuthRequestIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      bounceTrackingIssueDetails : BounceTrackingIssueDetails.t option;
          [@key "bounceTrackingIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      stylesheetLoadingIssueDetails : StylesheetLoadingIssueDetails.t option;
          [@key "stylesheetLoadingIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      federatedAuthUserInfoRequestIssueDetails :
        FederatedAuthUserInfoRequestIssueDetails.t option;
          [@key "federatedAuthUserInfoRequestIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This struct holds a list of optional fields with additional information\n\
       specific to the kind of issue. When adding a new issue code, please also\n\
       add a new optional field to this type."]
  end = struct
    type t = {
      cookieIssueDetails : CookieIssueDetails.t option;
          [@key "cookieIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      mixedContentIssueDetails : MixedContentIssueDetails.t option;
          [@key "mixedContentIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      blockedByResponseIssueDetails : BlockedByResponseIssueDetails.t option;
          [@key "blockedByResponseIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      heavyAdIssueDetails : HeavyAdIssueDetails.t option;
          [@key "heavyAdIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      contentSecurityPolicyIssueDetails :
        ContentSecurityPolicyIssueDetails.t option;
          [@key "contentSecurityPolicyIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      sharedArrayBufferIssueDetails : SharedArrayBufferIssueDetails.t option;
          [@key "sharedArrayBufferIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      lowTextContrastIssueDetails : LowTextContrastIssueDetails.t option;
          [@key "lowTextContrastIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      corsIssueDetails : CorsIssueDetails.t option;
          [@key "corsIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      attributionReportingIssueDetails :
        AttributionReportingIssueDetails.t option;
          [@key "attributionReportingIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      quirksModeIssueDetails : QuirksModeIssueDetails.t option;
          [@key "quirksModeIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      navigatorUserAgentIssueDetails : NavigatorUserAgentIssueDetails.t option;
          [@key "navigatorUserAgentIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      genericIssueDetails : GenericIssueDetails.t option;
          [@key "genericIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      deprecationIssueDetails : DeprecationIssueDetails.t option;
          [@key "deprecationIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      clientHintIssueDetails : ClientHintIssueDetails.t option;
          [@key "clientHintIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      federatedAuthRequestIssueDetails :
        FederatedAuthRequestIssueDetails.t option;
          [@key "federatedAuthRequestIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      bounceTrackingIssueDetails : BounceTrackingIssueDetails.t option;
          [@key "bounceTrackingIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      stylesheetLoadingIssueDetails : StylesheetLoadingIssueDetails.t option;
          [@key "stylesheetLoadingIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      federatedAuthUserInfoRequestIssueDetails :
        FederatedAuthUserInfoRequestIssueDetails.t option;
          [@key "federatedAuthUserInfoRequestIssueDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "This struct holds a list of optional fields with additional information\n\
       specific to the kind of issue. When adding a new issue code, please also\n\
       add a new optional field to this type."]
  end

  and IssueId : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "A unique id for a DevTools inspector issue. Allows other entities (e.g.\n\
       exceptions, CDP message, console messages, etc.) to reference an issue."]
  end = struct
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "A unique id for a DevTools inspector issue. Allows other entities (e.g.\n\
       exceptions, CDP message, console messages, etc.) to reference an issue."]
  end

  and InspectorIssue : sig
    type t = {
      code : InspectorIssueCode.t;
          [@key "code"] [@ocaml.doc "No description provided"]
      details : InspectorIssueDetails.t;
          [@key "details"] [@ocaml.doc "No description provided"]
      issueId : IssueId.t option;
          [@key "issueId"]
          [@yojson.option]
          [@ocaml.doc
            "A unique id for this issue. May be omitted if no other entity (e.g.\n\
             exception, CDP message, etc.) is referencing this issue."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "An inspector issue reported from the back-end."]
  end = struct
    type t = {
      code : InspectorIssueCode.t;
          [@key "code"] [@ocaml.doc "No description provided"]
      details : InspectorIssueDetails.t;
          [@key "details"] [@ocaml.doc "No description provided"]
      issueId : IssueId.t option;
          [@key "issueId"]
          [@yojson.option]
          [@ocaml.doc
            "A unique id for this issue. May be omitted if no other entity (e.g.\n\
             exception, CDP message, etc.) is referencing this issue."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "An inspector issue reported from the back-end."]
  end
end

and Autofill : sig
  module rec CreditCard : sig
    type t = {
      number : string;
          [@key "number"] [@ocaml.doc "16-digit credit card number."]
      name : string; [@key "name"] [@ocaml.doc "Name of the credit card owner."]
      expiryMonth : string;
          [@key "expiryMonth"] [@ocaml.doc "2-digit expiry month."]
      expiryYear : string;
          [@key "expiryYear"] [@ocaml.doc "4-digit expiry year."]
      cvc : string; [@key "cvc"] [@ocaml.doc "3-digit card verification code."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AddressField : sig
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc "address field name, for example GIVEN_NAME."]
      value : string;
          [@key "value"] [@ocaml.doc "address field name, for example Jon Doe."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Address : sig
    type t = {
      fields : AddressField.t list;
          [@key "fields"]
          [@ocaml.doc "fields and values defining a test address."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec CreditCard : sig
    type t = {
      number : string;
          [@key "number"] [@ocaml.doc "16-digit credit card number."]
      name : string; [@key "name"] [@ocaml.doc "Name of the credit card owner."]
      expiryMonth : string;
          [@key "expiryMonth"] [@ocaml.doc "2-digit expiry month."]
      expiryYear : string;
          [@key "expiryYear"] [@ocaml.doc "4-digit expiry year."]
      cvc : string; [@key "cvc"] [@ocaml.doc "3-digit card verification code."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      number : string;
          [@key "number"] [@ocaml.doc "16-digit credit card number."]
      name : string; [@key "name"] [@ocaml.doc "Name of the credit card owner."]
      expiryMonth : string;
          [@key "expiryMonth"] [@ocaml.doc "2-digit expiry month."]
      expiryYear : string;
          [@key "expiryYear"] [@ocaml.doc "4-digit expiry year."]
      cvc : string; [@key "cvc"] [@ocaml.doc "3-digit card verification code."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AddressField : sig
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc "address field name, for example GIVEN_NAME."]
      value : string;
          [@key "value"] [@ocaml.doc "address field name, for example Jon Doe."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc "address field name, for example GIVEN_NAME."]
      value : string;
          [@key "value"] [@ocaml.doc "address field name, for example Jon Doe."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Address : sig
    type t = {
      fields : AddressField.t list;
          [@key "fields"]
          [@ocaml.doc "fields and values defining a test address."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      fields : AddressField.t list;
          [@key "fields"]
          [@ocaml.doc "fields and values defining a test address."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and BackgroundService : sig
  module rec ServiceName : sig
    type _servicename =
      [ `backgroundFetch
      | `backgroundSync
      | `pushMessaging
      | `notifications
      | `paymentHandler
      | `periodicBackgroundSync ]

    val _servicename_of_yojson : Yojson.Basic.t -> _servicename
    val yojson_of__servicename : _servicename -> Yojson.Basic.t

    type t = _servicename
    [@@deriving yojson]
    [@@ocaml.doc
      "The Background Service that will be associated with the commands/events.\n\
       Every Background Service operates independently, but they share the same\n\
       API."]
  end

  and EventMetadata : sig
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A key-value pair for additional event information to pass along."]
  end

  and BackgroundServiceEvent : sig
    type t = {
      timestamp : Network.TimeSinceEpoch.t;
          [@key "timestamp"] [@ocaml.doc "Timestamp of the event (in seconds)."]
      origin : string;
          [@key "origin"] [@ocaml.doc "The origin this event belongs to."]
      serviceWorkerRegistrationId : ServiceWorker.RegistrationID.t;
          [@key "serviceWorkerRegistrationId"]
          [@ocaml.doc "The Service Worker ID that initiated the event."]
      service : ServiceName.t;
          [@key "service"]
          [@ocaml.doc "The Background Service this event belongs to."]
      eventName : string;
          [@key "eventName"] [@ocaml.doc "A description of the event."]
      instanceId : string;
          [@key "instanceId"]
          [@ocaml.doc "An identifier that groups related events together."]
      eventMetadata : EventMetadata.t list;
          [@key "eventMetadata"]
          [@ocaml.doc "A list of event-specific information."]
      storageKey : string;
          [@key "storageKey"] [@ocaml.doc "Storage key this event belongs to."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec ServiceName : sig
    type _servicename =
      [ `backgroundFetch
      | `backgroundSync
      | `pushMessaging
      | `notifications
      | `paymentHandler
      | `periodicBackgroundSync ]

    val _servicename_of_yojson : Yojson.Basic.t -> _servicename
    val yojson_of__servicename : _servicename -> Yojson.Basic.t

    type t = _servicename
    [@@deriving yojson]
    [@@ocaml.doc
      "The Background Service that will be associated with the commands/events.\n\
       Every Background Service operates independently, but they share the same\n\
       API."]
  end = struct
    type _servicename =
      [ `backgroundFetch
      | `backgroundSync
      | `pushMessaging
      | `notifications
      | `paymentHandler
      | `periodicBackgroundSync ]

    let _servicename_of_yojson = function
      | `String "backgroundFetch" -> `backgroundFetch
      | `String "backgroundSync" -> `backgroundSync
      | `String "pushMessaging" -> `pushMessaging
      | `String "notifications" -> `notifications
      | `String "paymentHandler" -> `paymentHandler
      | `String "periodicBackgroundSync" -> `periodicBackgroundSync
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__servicename = function
      | `backgroundFetch -> `String "backgroundFetch"
      | `backgroundSync -> `String "backgroundSync"
      | `pushMessaging -> `String "pushMessaging"
      | `notifications -> `String "notifications"
      | `paymentHandler -> `String "paymentHandler"
      | `periodicBackgroundSync -> `String "periodicBackgroundSync"

    type t = _servicename
    [@@deriving yojson]
    [@@ocaml.doc
      "The Background Service that will be associated with the commands/events.\n\
       Every Background Service operates independently, but they share the same\n\
       API."]
  end

  and EventMetadata : sig
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A key-value pair for additional event information to pass along."]
  end = struct
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A key-value pair for additional event information to pass along."]
  end

  and BackgroundServiceEvent : sig
    type t = {
      timestamp : Network.TimeSinceEpoch.t;
          [@key "timestamp"] [@ocaml.doc "Timestamp of the event (in seconds)."]
      origin : string;
          [@key "origin"] [@ocaml.doc "The origin this event belongs to."]
      serviceWorkerRegistrationId : ServiceWorker.RegistrationID.t;
          [@key "serviceWorkerRegistrationId"]
          [@ocaml.doc "The Service Worker ID that initiated the event."]
      service : ServiceName.t;
          [@key "service"]
          [@ocaml.doc "The Background Service this event belongs to."]
      eventName : string;
          [@key "eventName"] [@ocaml.doc "A description of the event."]
      instanceId : string;
          [@key "instanceId"]
          [@ocaml.doc "An identifier that groups related events together."]
      eventMetadata : EventMetadata.t list;
          [@key "eventMetadata"]
          [@ocaml.doc "A list of event-specific information."]
      storageKey : string;
          [@key "storageKey"] [@ocaml.doc "Storage key this event belongs to."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      timestamp : Network.TimeSinceEpoch.t;
          [@key "timestamp"] [@ocaml.doc "Timestamp of the event (in seconds)."]
      origin : string;
          [@key "origin"] [@ocaml.doc "The origin this event belongs to."]
      serviceWorkerRegistrationId : ServiceWorker.RegistrationID.t;
          [@key "serviceWorkerRegistrationId"]
          [@ocaml.doc "The Service Worker ID that initiated the event."]
      service : ServiceName.t;
          [@key "service"]
          [@ocaml.doc "The Background Service this event belongs to."]
      eventName : string;
          [@key "eventName"] [@ocaml.doc "A description of the event."]
      instanceId : string;
          [@key "instanceId"]
          [@ocaml.doc "An identifier that groups related events together."]
      eventMetadata : EventMetadata.t list;
          [@key "eventMetadata"]
          [@ocaml.doc "A list of event-specific information."]
      storageKey : string;
          [@key "storageKey"] [@ocaml.doc "Storage key this event belongs to."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and Browser : sig
  module rec BrowserContextID : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and WindowID : sig
    type t = number [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and WindowState : sig
    type _windowstate = [ `normal | `minimized | `maximized | `fullscreen ]

    val _windowstate_of_yojson : Yojson.Basic.t -> _windowstate
    val yojson_of__windowstate : _windowstate -> Yojson.Basic.t

    type t = _windowstate
    [@@deriving yojson] [@@ocaml.doc "The state of the browser window."]
  end

  and Bounds : sig
    type t = {
      left : number option;
          [@key "left"]
          [@yojson.option]
          [@ocaml.doc
            "The offset from the left edge of the screen to the window in \
             pixels."]
      top : number option;
          [@key "top"]
          [@yojson.option]
          [@ocaml.doc
            "The offset from the top edge of the screen to the window in \
             pixels."]
      width : number option;
          [@key "width"]
          [@yojson.option]
          [@ocaml.doc "The window width in pixels."]
      height : number option;
          [@key "height"]
          [@yojson.option]
          [@ocaml.doc "The window height in pixels."]
      windowState : WindowState.t option;
          [@key "windowState"]
          [@yojson.option]
          [@ocaml.doc "The window state. Default to normal."]
    }
    [@@deriving yojson] [@@ocaml.doc "Browser window bounds information"]
  end

  and PermissionType : sig
    type _permissiontype =
      [ `accessibilityEvents
      | `audioCapture
      | `backgroundSync
      | `backgroundFetch
      | `clipboardReadWrite
      | `clipboardSanitizedWrite
      | `displayCapture
      | `durableStorage
      | `flash
      | `geolocation
      | `idleDetection
      | `localFonts
      | `midi
      | `midiSysex
      | `nfc
      | `notifications
      | `paymentHandler
      | `periodicBackgroundSync
      | `protectedMediaIdentifier
      | `sensors
      | `storageAccess
      | `topLevelStorageAccess
      | `videoCapture
      | `videoCapturePanTiltZoom
      | `wakeLockScreen
      | `wakeLockSystem
      | `windowManagement ]

    val _permissiontype_of_yojson : Yojson.Basic.t -> _permissiontype
    val yojson_of__permissiontype : _permissiontype -> Yojson.Basic.t

    type t = _permissiontype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PermissionSetting : sig
    type _permissionsetting = [ `granted | `denied | `prompt ]

    val _permissionsetting_of_yojson : Yojson.Basic.t -> _permissionsetting
    val yojson_of__permissionsetting : _permissionsetting -> Yojson.Basic.t

    type t = _permissionsetting
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PermissionDescriptor : sig
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Name of permission.\n\
             See \
             https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl \
             for valid permission names."]
      sysex : bool option;
          [@key "sysex"]
          [@yojson.option]
          [@ocaml.doc
            "For \"midi\" permission, may also specify sysex control."]
      userVisibleOnly : bool option;
          [@key "userVisibleOnly"]
          [@yojson.option]
          [@ocaml.doc
            "For \"push\" permission, may specify userVisibleOnly.\n\
             Note that userVisibleOnly = true is the only currently supported \
             type."]
      allowWithoutSanitization : bool option;
          [@key "allowWithoutSanitization"]
          [@yojson.option]
          [@ocaml.doc
            "For \"clipboard\" permission, may specify \
             allowWithoutSanitization."]
      panTiltZoom : bool option;
          [@key "panTiltZoom"]
          [@yojson.option]
          [@ocaml.doc "For \"camera\" permission, may specify panTiltZoom."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Definition of PermissionDescriptor defined in the Permissions API:\n\
       https://w3c.github.io/permissions/#dictdef-permissiondescriptor."]
  end

  and BrowserCommandId : sig
    type _browsercommandid = [ `openTabSearch | `closeTabSearch ]

    val _browsercommandid_of_yojson : Yojson.Basic.t -> _browsercommandid
    val yojson_of__browsercommandid : _browsercommandid -> Yojson.Basic.t

    type t = _browsercommandid
    [@@deriving yojson]
    [@@ocaml.doc "Browser command ids used by executeBrowserCommand."]
  end

  and Bucket : sig
    type t = {
      low : number; [@key "low"] [@ocaml.doc "Minimum value (inclusive)."]
      high : number; [@key "high"] [@ocaml.doc "Maximum value (exclusive)."]
      count : number; [@key "count"] [@ocaml.doc "Number of samples."]
    }
    [@@deriving yojson] [@@ocaml.doc "Chrome histogram bucket."]
  end

  and Histogram : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Name."]
      sum : number; [@key "sum"] [@ocaml.doc "Sum of sample values."]
      count : number; [@key "count"] [@ocaml.doc "Total number of samples."]
      buckets : Bucket.t list; [@key "buckets"] [@ocaml.doc "Buckets."]
    }
    [@@deriving yojson] [@@ocaml.doc "Chrome histogram."]
  end
end = struct
  module rec BrowserContextID : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and WindowID : sig
    type t = number [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = number [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and WindowState : sig
    type _windowstate = [ `normal | `minimized | `maximized | `fullscreen ]

    val _windowstate_of_yojson : Yojson.Basic.t -> _windowstate
    val yojson_of__windowstate : _windowstate -> Yojson.Basic.t

    type t = _windowstate
    [@@deriving yojson] [@@ocaml.doc "The state of the browser window."]
  end = struct
    type _windowstate = [ `normal | `minimized | `maximized | `fullscreen ]

    let _windowstate_of_yojson = function
      | `String "normal" -> `normal
      | `String "minimized" -> `minimized
      | `String "maximized" -> `maximized
      | `String "fullscreen" -> `fullscreen
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__windowstate = function
      | `normal -> `String "normal"
      | `minimized -> `String "minimized"
      | `maximized -> `String "maximized"
      | `fullscreen -> `String "fullscreen"

    type t = _windowstate
    [@@deriving yojson] [@@ocaml.doc "The state of the browser window."]
  end

  and Bounds : sig
    type t = {
      left : number option;
          [@key "left"]
          [@yojson.option]
          [@ocaml.doc
            "The offset from the left edge of the screen to the window in \
             pixels."]
      top : number option;
          [@key "top"]
          [@yojson.option]
          [@ocaml.doc
            "The offset from the top edge of the screen to the window in \
             pixels."]
      width : number option;
          [@key "width"]
          [@yojson.option]
          [@ocaml.doc "The window width in pixels."]
      height : number option;
          [@key "height"]
          [@yojson.option]
          [@ocaml.doc "The window height in pixels."]
      windowState : WindowState.t option;
          [@key "windowState"]
          [@yojson.option]
          [@ocaml.doc "The window state. Default to normal."]
    }
    [@@deriving yojson] [@@ocaml.doc "Browser window bounds information"]
  end = struct
    type t = {
      left : number option;
          [@key "left"]
          [@yojson.option]
          [@ocaml.doc
            "The offset from the left edge of the screen to the window in \
             pixels."]
      top : number option;
          [@key "top"]
          [@yojson.option]
          [@ocaml.doc
            "The offset from the top edge of the screen to the window in \
             pixels."]
      width : number option;
          [@key "width"]
          [@yojson.option]
          [@ocaml.doc "The window width in pixels."]
      height : number option;
          [@key "height"]
          [@yojson.option]
          [@ocaml.doc "The window height in pixels."]
      windowState : WindowState.t option;
          [@key "windowState"]
          [@yojson.option]
          [@ocaml.doc "The window state. Default to normal."]
    }
    [@@deriving yojson] [@@ocaml.doc "Browser window bounds information"]
  end

  and PermissionType : sig
    type _permissiontype =
      [ `accessibilityEvents
      | `audioCapture
      | `backgroundSync
      | `backgroundFetch
      | `clipboardReadWrite
      | `clipboardSanitizedWrite
      | `displayCapture
      | `durableStorage
      | `flash
      | `geolocation
      | `idleDetection
      | `localFonts
      | `midi
      | `midiSysex
      | `nfc
      | `notifications
      | `paymentHandler
      | `periodicBackgroundSync
      | `protectedMediaIdentifier
      | `sensors
      | `storageAccess
      | `topLevelStorageAccess
      | `videoCapture
      | `videoCapturePanTiltZoom
      | `wakeLockScreen
      | `wakeLockSystem
      | `windowManagement ]

    val _permissiontype_of_yojson : Yojson.Basic.t -> _permissiontype
    val yojson_of__permissiontype : _permissiontype -> Yojson.Basic.t

    type t = _permissiontype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _permissiontype =
      [ `accessibilityEvents
      | `audioCapture
      | `backgroundSync
      | `backgroundFetch
      | `clipboardReadWrite
      | `clipboardSanitizedWrite
      | `displayCapture
      | `durableStorage
      | `flash
      | `geolocation
      | `idleDetection
      | `localFonts
      | `midi
      | `midiSysex
      | `nfc
      | `notifications
      | `paymentHandler
      | `periodicBackgroundSync
      | `protectedMediaIdentifier
      | `sensors
      | `storageAccess
      | `topLevelStorageAccess
      | `videoCapture
      | `videoCapturePanTiltZoom
      | `wakeLockScreen
      | `wakeLockSystem
      | `windowManagement ]

    let _permissiontype_of_yojson = function
      | `String "accessibilityEvents" -> `accessibilityEvents
      | `String "audioCapture" -> `audioCapture
      | `String "backgroundSync" -> `backgroundSync
      | `String "backgroundFetch" -> `backgroundFetch
      | `String "clipboardReadWrite" -> `clipboardReadWrite
      | `String "clipboardSanitizedWrite" -> `clipboardSanitizedWrite
      | `String "displayCapture" -> `displayCapture
      | `String "durableStorage" -> `durableStorage
      | `String "flash" -> `flash
      | `String "geolocation" -> `geolocation
      | `String "idleDetection" -> `idleDetection
      | `String "localFonts" -> `localFonts
      | `String "midi" -> `midi
      | `String "midiSysex" -> `midiSysex
      | `String "nfc" -> `nfc
      | `String "notifications" -> `notifications
      | `String "paymentHandler" -> `paymentHandler
      | `String "periodicBackgroundSync" -> `periodicBackgroundSync
      | `String "protectedMediaIdentifier" -> `protectedMediaIdentifier
      | `String "sensors" -> `sensors
      | `String "storageAccess" -> `storageAccess
      | `String "topLevelStorageAccess" -> `topLevelStorageAccess
      | `String "videoCapture" -> `videoCapture
      | `String "videoCapturePanTiltZoom" -> `videoCapturePanTiltZoom
      | `String "wakeLockScreen" -> `wakeLockScreen
      | `String "wakeLockSystem" -> `wakeLockSystem
      | `String "windowManagement" -> `windowManagement
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__permissiontype = function
      | `accessibilityEvents -> `String "accessibilityEvents"
      | `audioCapture -> `String "audioCapture"
      | `backgroundSync -> `String "backgroundSync"
      | `backgroundFetch -> `String "backgroundFetch"
      | `clipboardReadWrite -> `String "clipboardReadWrite"
      | `clipboardSanitizedWrite -> `String "clipboardSanitizedWrite"
      | `displayCapture -> `String "displayCapture"
      | `durableStorage -> `String "durableStorage"
      | `flash -> `String "flash"
      | `geolocation -> `String "geolocation"
      | `idleDetection -> `String "idleDetection"
      | `localFonts -> `String "localFonts"
      | `midi -> `String "midi"
      | `midiSysex -> `String "midiSysex"
      | `nfc -> `String "nfc"
      | `notifications -> `String "notifications"
      | `paymentHandler -> `String "paymentHandler"
      | `periodicBackgroundSync -> `String "periodicBackgroundSync"
      | `protectedMediaIdentifier -> `String "protectedMediaIdentifier"
      | `sensors -> `String "sensors"
      | `storageAccess -> `String "storageAccess"
      | `topLevelStorageAccess -> `String "topLevelStorageAccess"
      | `videoCapture -> `String "videoCapture"
      | `videoCapturePanTiltZoom -> `String "videoCapturePanTiltZoom"
      | `wakeLockScreen -> `String "wakeLockScreen"
      | `wakeLockSystem -> `String "wakeLockSystem"
      | `windowManagement -> `String "windowManagement"

    type t = _permissiontype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PermissionSetting : sig
    type _permissionsetting = [ `granted | `denied | `prompt ]

    val _permissionsetting_of_yojson : Yojson.Basic.t -> _permissionsetting
    val yojson_of__permissionsetting : _permissionsetting -> Yojson.Basic.t

    type t = _permissionsetting
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _permissionsetting = [ `granted | `denied | `prompt ]

    let _permissionsetting_of_yojson = function
      | `String "granted" -> `granted
      | `String "denied" -> `denied
      | `String "prompt" -> `prompt
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__permissionsetting = function
      | `granted -> `String "granted"
      | `denied -> `String "denied"
      | `prompt -> `String "prompt"

    type t = _permissionsetting
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PermissionDescriptor : sig
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Name of permission.\n\
             See \
             https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl \
             for valid permission names."]
      sysex : bool option;
          [@key "sysex"]
          [@yojson.option]
          [@ocaml.doc
            "For \"midi\" permission, may also specify sysex control."]
      userVisibleOnly : bool option;
          [@key "userVisibleOnly"]
          [@yojson.option]
          [@ocaml.doc
            "For \"push\" permission, may specify userVisibleOnly.\n\
             Note that userVisibleOnly = true is the only currently supported \
             type."]
      allowWithoutSanitization : bool option;
          [@key "allowWithoutSanitization"]
          [@yojson.option]
          [@ocaml.doc
            "For \"clipboard\" permission, may specify \
             allowWithoutSanitization."]
      panTiltZoom : bool option;
          [@key "panTiltZoom"]
          [@yojson.option]
          [@ocaml.doc "For \"camera\" permission, may specify panTiltZoom."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Definition of PermissionDescriptor defined in the Permissions API:\n\
       https://w3c.github.io/permissions/#dictdef-permissiondescriptor."]
  end = struct
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Name of permission.\n\
             See \
             https://cs.chromium.org/chromium/src/third_party/blink/renderer/modules/permissions/permission_descriptor.idl \
             for valid permission names."]
      sysex : bool option;
          [@key "sysex"]
          [@yojson.option]
          [@ocaml.doc
            "For \"midi\" permission, may also specify sysex control."]
      userVisibleOnly : bool option;
          [@key "userVisibleOnly"]
          [@yojson.option]
          [@ocaml.doc
            "For \"push\" permission, may specify userVisibleOnly.\n\
             Note that userVisibleOnly = true is the only currently supported \
             type."]
      allowWithoutSanitization : bool option;
          [@key "allowWithoutSanitization"]
          [@yojson.option]
          [@ocaml.doc
            "For \"clipboard\" permission, may specify \
             allowWithoutSanitization."]
      panTiltZoom : bool option;
          [@key "panTiltZoom"]
          [@yojson.option]
          [@ocaml.doc "For \"camera\" permission, may specify panTiltZoom."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Definition of PermissionDescriptor defined in the Permissions API:\n\
       https://w3c.github.io/permissions/#dictdef-permissiondescriptor."]
  end

  and BrowserCommandId : sig
    type _browsercommandid = [ `openTabSearch | `closeTabSearch ]

    val _browsercommandid_of_yojson : Yojson.Basic.t -> _browsercommandid
    val yojson_of__browsercommandid : _browsercommandid -> Yojson.Basic.t

    type t = _browsercommandid
    [@@deriving yojson]
    [@@ocaml.doc "Browser command ids used by executeBrowserCommand."]
  end = struct
    type _browsercommandid = [ `openTabSearch | `closeTabSearch ]

    let _browsercommandid_of_yojson = function
      | `String "openTabSearch" -> `openTabSearch
      | `String "closeTabSearch" -> `closeTabSearch
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__browsercommandid = function
      | `openTabSearch -> `String "openTabSearch"
      | `closeTabSearch -> `String "closeTabSearch"

    type t = _browsercommandid
    [@@deriving yojson]
    [@@ocaml.doc "Browser command ids used by executeBrowserCommand."]
  end

  and Bucket : sig
    type t = {
      low : number; [@key "low"] [@ocaml.doc "Minimum value (inclusive)."]
      high : number; [@key "high"] [@ocaml.doc "Maximum value (exclusive)."]
      count : number; [@key "count"] [@ocaml.doc "Number of samples."]
    }
    [@@deriving yojson] [@@ocaml.doc "Chrome histogram bucket."]
  end = struct
    type t = {
      low : number; [@key "low"] [@ocaml.doc "Minimum value (inclusive)."]
      high : number; [@key "high"] [@ocaml.doc "Maximum value (exclusive)."]
      count : number; [@key "count"] [@ocaml.doc "Number of samples."]
    }
    [@@deriving yojson] [@@ocaml.doc "Chrome histogram bucket."]
  end

  and Histogram : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Name."]
      sum : number; [@key "sum"] [@ocaml.doc "Sum of sample values."]
      count : number; [@key "count"] [@ocaml.doc "Total number of samples."]
      buckets : Bucket.t list; [@key "buckets"] [@ocaml.doc "Buckets."]
    }
    [@@deriving yojson] [@@ocaml.doc "Chrome histogram."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Name."]
      sum : number; [@key "sum"] [@ocaml.doc "Sum of sample values."]
      count : number; [@key "count"] [@ocaml.doc "Total number of samples."]
      buckets : Bucket.t list; [@key "buckets"] [@ocaml.doc "Buckets."]
    }
    [@@deriving yojson] [@@ocaml.doc "Chrome histogram."]
  end
end

and CSS : sig
  module rec StyleSheetId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StyleSheetOrigin : sig
    type _stylesheetorigin = [ `injected | `user_agent | `inspector | `regular ]

    val _stylesheetorigin_of_yojson : Yojson.Basic.t -> _stylesheetorigin
    val yojson_of__stylesheetorigin : _stylesheetorigin -> Yojson.Basic.t

    type t = _stylesheetorigin
    [@@deriving yojson]
    [@@ocaml.doc
      "Stylesheet type: \"injected\" for stylesheets injected via extension, \
       \"user-agent\" for user-agent\n\
       stylesheets, \"inspector\" for stylesheets created by the inspector \
       (i.e. those holding the \"via\n\
       inspector\" rules), \"regular\" for regular stylesheets."]
  end

  and PseudoElementMatches : sig
    type t = {
      pseudoType : DOM.PseudoType.t;
          [@key "pseudoType"] [@ocaml.doc "Pseudo element type."]
      pseudoIdentifier : string option;
          [@key "pseudoIdentifier"]
          [@yojson.option]
          [@ocaml.doc "Pseudo element custom ident."]
      matches : RuleMatch.t list;
          [@key "matches"]
          [@ocaml.doc "Matches of CSS rules applicable to the pseudo style."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "CSS rule collection for a single pseudo style."]
  end

  and InheritedStyleEntry : sig
    type t = {
      inlineStyle : CSSStyle.t option;
          [@key "inlineStyle"]
          [@yojson.option]
          [@ocaml.doc
            "The ancestor node's inline style, if any, in the style \
             inheritance chain."]
      matchedCSSRules : RuleMatch.t list;
          [@key "matchedCSSRules"]
          [@ocaml.doc
            "Matches of CSS rules matching the ancestor node in the style \
             inheritance chain."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Inherited CSS rule collection from ancestor node."]
  end

  and InheritedPseudoElementMatches : sig
    type t = {
      pseudoElements : PseudoElementMatches.t list;
          [@key "pseudoElements"]
          [@ocaml.doc
            "Matches of pseudo styles from the pseudos of an ancestor node."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Inherited pseudo element matches from pseudos of an ancestor node."]
  end

  and RuleMatch : sig
    type t = {
      rule : CSSRule.t; [@key "rule"] [@ocaml.doc "CSS rule in the match."]
      matchingSelectors : number list;
          [@key "matchingSelectors"]
          [@ocaml.doc
            "Matching selector indices in the rule's selectorList selectors \
             (0-based)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Match data for a CSS rule."]
  end

  and Value : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Value text."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc "Value range in the underlying resource (if available)."]
      specificity : Specificity.t option;
          [@key "specificity"]
          [@yojson.option]
          [@ocaml.doc "Specificity of the selector."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Data for a simple selector (these are delimited by commas in a selector \
       list)."]
  end

  and Specificity : sig
    type t = {
      a : number;
          [@key "a"]
          [@ocaml.doc
            "The a component, which represents the number of ID selectors."]
      b : number;
          [@key "b"]
          [@ocaml.doc
            "The b component, which represents the number of class selectors, \
             attributes selectors, and\n\
             pseudo-classes."]
      c : number;
          [@key "c"]
          [@ocaml.doc
            "The c component, which represents the number of type selectors \
             and pseudo-elements."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Specificity:\nhttps://drafts.csswg.org/selectors/#specificity-rules"]
  end

  and SelectorList : sig
    type t = {
      selectors : Value.t list;
          [@key "selectors"] [@ocaml.doc "Selectors in the list."]
      text : string; [@key "text"] [@ocaml.doc "Rule selector text."]
    }
    [@@deriving yojson] [@@ocaml.doc "Selector list data."]
  end

  and CSSStyleSheetHeader : sig
    type t = {
      styleSheetId : StyleSheetId.t;
          [@key "styleSheetId"] [@ocaml.doc "The stylesheet identifier."]
      frameId : Page.FrameId.t;
          [@key "frameId"] [@ocaml.doc "Owner frame identifier."]
      sourceURL : string;
          [@key "sourceURL"]
          [@ocaml.doc
            "Stylesheet resource URL. Empty if this is a constructed \
             stylesheet created using\n\
             new CSSStyleSheet() (but non-empty if this is a constructed \
             sylesheet imported\n\
             as a CSS module script)."]
      sourceMapURL : string option;
          [@key "sourceMapURL"]
          [@yojson.option]
          [@ocaml.doc
            "URL of source map associated with the stylesheet (if any)."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Stylesheet origin."]
      title : string; [@key "title"] [@ocaml.doc "Stylesheet title."]
      ownerNode : DOM.BackendNodeId.t option;
          [@key "ownerNode"]
          [@yojson.option]
          [@ocaml.doc "The backend id for the owner node of the stylesheet."]
      disabled : bool;
          [@key "disabled"]
          [@ocaml.doc "Denotes whether the stylesheet is disabled."]
      hasSourceURL : bool option;
          [@key "hasSourceURL"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the sourceURL field value comes from the sourceURL \
             comment."]
      isInline : bool;
          [@key "isInline"]
          [@ocaml.doc
            "Whether this stylesheet is created for STYLE tag by parser. This \
             flag is not set for\n\
             document.written STYLE tags."]
      isMutable : bool;
          [@key "isMutable"]
          [@ocaml.doc
            "Whether this stylesheet is mutable. Inline stylesheets become \
             mutable\n\
             after they have been modified via CSSOM API.\n\
             `<link>` element's stylesheets become mutable only if DevTools \
             modifies them.\n\
             Constructed stylesheets (new CSSStyleSheet()) are mutable \
             immediately after creation."]
      isConstructed : bool;
          [@key "isConstructed"]
          [@ocaml.doc
            "True if this stylesheet is created through new CSSStyleSheet() or \
             imported as a\n\
             CSS module script."]
      startLine : number;
          [@key "startLine"]
          [@ocaml.doc
            "Line offset of the stylesheet within the resource (zero based)."]
      startColumn : number;
          [@key "startColumn"]
          [@ocaml.doc
            "Column offset of the stylesheet within the resource (zero based)."]
      length : number;
          [@key "length"] [@ocaml.doc "Size of the content (in characters)."]
      endLine : number;
          [@key "endLine"]
          [@ocaml.doc
            "Line offset of the end of the stylesheet within the resource \
             (zero based)."]
      endColumn : number;
          [@key "endColumn"]
          [@ocaml.doc
            "Column offset of the end of the stylesheet within the resource \
             (zero based)."]
      loadingFailed : bool option;
          [@key "loadingFailed"]
          [@yojson.option]
          [@ocaml.doc
            "If the style sheet was loaded from a network resource, this \
             indicates when the resource failed to load"]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS stylesheet metainformation."]
  end

  and CSSRule : sig
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      selectorList : SelectorList.t;
          [@key "selectorList"] [@ocaml.doc "Rule selector data."]
      nestingSelectors : string list option;
          [@key "nestingSelectors"]
          [@yojson.option]
          [@ocaml.doc
            "Array of selectors from ancestor style rules, sorted by distance \
             from the current rule."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Parent stylesheet's origin."]
      style : CSSStyle.t;
          [@key "style"] [@ocaml.doc "Associated style declaration."]
      media : CSSMedia.t list option;
          [@key "media"]
          [@yojson.option]
          [@ocaml.doc
            "Media list array (for rules involving media queries). The array \
             enumerates media queries\n\
             starting with the innermost one, going outwards."]
      containerQueries : CSSContainerQuery.t list option;
          [@key "containerQueries"]
          [@yojson.option]
          [@ocaml.doc
            "Container query list array (for rules involving container queries).\n\
             The array enumerates container queries starting with the \
             innermost one, going outwards."]
      supports : CSSSupports.t list option;
          [@key "supports"]
          [@yojson.option]
          [@ocaml.doc
            "@supports CSS at-rule array.\n\
             The array enumerates @supports at-rules starting with the \
             innermost one, going outwards."]
      layers : CSSLayer.t list option;
          [@key "layers"]
          [@yojson.option]
          [@ocaml.doc
            "Cascade layer array. Contains the layer hierarchy that this rule \
             belongs to starting\n\
             with the innermost layer and going outwards."]
      scopes : CSSScope.t list option;
          [@key "scopes"]
          [@yojson.option]
          [@ocaml.doc
            "@scope CSS at-rule array.\n\
             The array enumerates @scope at-rules starting with the innermost \
             one, going outwards."]
      ruleTypes : CSSRuleType.t list option;
          [@key "ruleTypes"]
          [@yojson.option]
          [@ocaml.doc
            "The array keeps the types of ancestor CSSRules from the innermost \
             going outwards."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS rule representation."]
  end

  and CSSRuleType : sig
    type _cssruletype =
      [ `MediaRule
      | `SupportsRule
      | `ContainerRule
      | `LayerRule
      | `ScopeRule
      | `StyleRule ]

    val _cssruletype_of_yojson : Yojson.Basic.t -> _cssruletype
    val yojson_of__cssruletype : _cssruletype -> Yojson.Basic.t

    type t = _cssruletype
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum indicating the type of a CSS rule, used to represent the order of \
       a style rule's ancestors.\n\
       This list only contains rule types that are collected during the \
       ancestor rule collection."]
  end

  and RuleUsage : sig
    type t = {
      styleSheetId : StyleSheetId.t;
          [@key "styleSheetId"]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      startOffset : number;
          [@key "startOffset"]
          [@ocaml.doc
            "Offset of the start of the rule (including selector) from the \
             beginning of the stylesheet."]
      endOffset : number;
          [@key "endOffset"]
          [@ocaml.doc
            "Offset of the end of the rule body from the beginning of the \
             stylesheet."]
      used : bool;
          [@key "used"]
          [@ocaml.doc
            "Indicates whether the rule was actually used by some element in \
             the page."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS coverage information."]
  end

  and SourceRange : sig
    type t = {
      startLine : number; [@key "startLine"] [@ocaml.doc "Start line of range."]
      startColumn : number;
          [@key "startColumn"] [@ocaml.doc "Start column of range (inclusive)."]
      endLine : number; [@key "endLine"] [@ocaml.doc "End line of range"]
      endColumn : number;
          [@key "endColumn"] [@ocaml.doc "End column of range (exclusive)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Text range within a resource. All numbers are zero-based."]
  end

  and ShorthandEntry : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Shorthand name."]
      value : string; [@key "value"] [@ocaml.doc "Shorthand value."]
      important : bool option;
          [@key "important"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property has \"!important\" annotation (implies \
             `false` if absent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CSSComputedStyleProperty : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Computed style property name."]
      value : string;
          [@key "value"] [@ocaml.doc "Computed style property value."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CSSStyle : sig
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      cssProperties : CSSProperty.t list;
          [@key "cssProperties"] [@ocaml.doc "CSS properties in the style."]
      shorthandEntries : ShorthandEntry.t list;
          [@key "shorthandEntries"]
          [@ocaml.doc "Computed values for all shorthands found in the style."]
      cssText : string option;
          [@key "cssText"]
          [@yojson.option]
          [@ocaml.doc "Style declaration text (if available)."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "Style declaration range in the enclosing stylesheet (if \
             available)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS style representation."]
  end

  and CSSProperty : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "The property name."]
      value : string; [@key "value"] [@ocaml.doc "The property value."]
      important : bool option;
          [@key "important"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property has \"!important\" annotation (implies \
             `false` if absent)."]
      implicit : bool option;
          [@key "implicit"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property is implicit (implies `false` if absent)."]
      text : string option;
          [@key "text"]
          [@yojson.option]
          [@ocaml.doc "The full property text as specified in the style."]
      parsedOk : bool option;
          [@key "parsedOk"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property is understood by the browser (implies `true` \
             if absent)."]
      disabled : bool option;
          [@key "disabled"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property is disabled by the user (present for \
             source-based properties only)."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The entire property range in the enclosing style declaration (if \
             available)."]
      longhandProperties : CSSProperty.t list option;
          [@key "longhandProperties"]
          [@yojson.option]
          [@ocaml.doc
            "Parsed longhand components of this property if it is a shorthand.\n\
             This field will be empty if the given property is not a shorthand."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS property declaration data."]
  end

  and CSSMedia : sig
    type _cssmedia_source =
      [ `mediaRule | `importRule | `linkedSheet | `inlineSheet ]

    val _cssmedia_source_of_yojson : Yojson.Basic.t -> _cssmedia_source
    val yojson_of__cssmedia_source : _cssmedia_source -> Yojson.Basic.t

    type t = {
      text : string; [@key "text"] [@ocaml.doc "Media query text."]
      source : _cssmedia_source;
          [@key "source"]
          [@ocaml.doc
            "Source of the media query: \"mediaRule\" if specified by a @media \
             rule, \"importRule\" if\n\
             specified by an @import rule, \"linkedSheet\" if specified by a \
             \"media\" attribute in a linked\n\
             stylesheet's LINK tag, \"inlineSheet\" if specified by a \
             \"media\" attribute in an inline\n\
             stylesheet's STYLE tag."]
      sourceURL : string option;
          [@key "sourceURL"]
          [@yojson.option]
          [@ocaml.doc
            "URL of the document containing the media query description."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule (@media or @import) header range in the \
             enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
      mediaList : MediaQuery.t list option;
          [@key "mediaList"]
          [@yojson.option]
          [@ocaml.doc "Array of media queries."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS media rule descriptor."]
  end

  and MediaQuery : sig
    type t = {
      expressions : MediaQueryExpression.t list;
          [@key "expressions"] [@ocaml.doc "Array of media query expressions."]
      active : bool;
          [@key "active"]
          [@ocaml.doc "Whether the media query condition is satisfied."]
    }
    [@@deriving yojson] [@@ocaml.doc "Media query descriptor."]
  end

  and MediaQueryExpression : sig
    type t = {
      value : number;
          [@key "value"] [@ocaml.doc "Media query expression value."]
      unit : string; [@key "unit"] [@ocaml.doc "Media query expression units."]
      feature : string;
          [@key "feature"] [@ocaml.doc "Media query expression feature."]
      valueRange : SourceRange.t option;
          [@key "valueRange"]
          [@yojson.option]
          [@ocaml.doc
            "The associated range of the value text in the enclosing \
             stylesheet (if available)."]
      computedLength : number option;
          [@key "computedLength"]
          [@yojson.option]
          [@ocaml.doc
            "Computed length of media query expression (if applicable)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Media query expression descriptor."]
  end

  and CSSContainerQuery : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Container query text."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "Optional name for the container."]
      physicalAxes : DOM.PhysicalAxes.t option;
          [@key "physicalAxes"]
          [@yojson.option]
          [@ocaml.doc "Optional physical axes queried for the container."]
      logicalAxes : DOM.LogicalAxes.t option;
          [@key "logicalAxes"]
          [@yojson.option]
          [@ocaml.doc "Optional logical axes queried for the container."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS container query rule descriptor."]
  end

  and CSSSupports : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Supports rule text."]
      active : bool;
          [@key "active"]
          [@ocaml.doc "Whether the supports condition is satisfied."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Supports at-rule descriptor."]
  end

  and CSSScope : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Scope rule text."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Scope at-rule descriptor."]
  end

  and CSSLayer : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Layer name."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Layer at-rule descriptor."]
  end

  and CSSLayerData : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Layer name."]
      subLayers : CSSLayerData.t list option;
          [@key "subLayers"] [@yojson.option] [@ocaml.doc "Direct sub-layers"]
      order : number;
          [@key "order"]
          [@ocaml.doc
            "Layer order. The order determines the order of the layer in the \
             cascade order.\n\
             A higher number has higher priority in the cascade order."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Layer data."]
  end

  and PlatformFontUsage : sig
    type t = {
      familyName : string;
          [@key "familyName"]
          [@ocaml.doc "Font's family name reported by platform."]
      isCustomFont : bool;
          [@key "isCustomFont"]
          [@ocaml.doc
            "Indicates if the font was downloaded or resolved locally."]
      glyphCount : number;
          [@key "glyphCount"]
          [@ocaml.doc "Amount of glyphs that were rendered with this font."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about amount of glyphs that were rendered with given font."]
  end

  and FontVariationAxis : sig
    type t = {
      tag : string;
          [@key "tag"]
          [@ocaml.doc "The font-variation-setting tag (a.k.a. \"axis tag\")."]
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Human-readable variation name in the default language (normally, \
             \"en\")."]
      minValue : number;
          [@key "minValue"]
          [@ocaml.doc
            "The minimum value (inclusive) the font supports for this tag."]
      maxValue : number;
          [@key "maxValue"]
          [@ocaml.doc
            "The maximum value (inclusive) the font supports for this tag."]
      defaultValue : number;
          [@key "defaultValue"] [@ocaml.doc "The default value."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about font variation axes for variable fonts"]
  end

  and FontFace : sig
    type t = {
      fontFamily : string; [@key "fontFamily"] [@ocaml.doc "The font-family."]
      fontStyle : string; [@key "fontStyle"] [@ocaml.doc "The font-style."]
      fontVariant : string;
          [@key "fontVariant"] [@ocaml.doc "The font-variant."]
      fontWeight : string; [@key "fontWeight"] [@ocaml.doc "The font-weight."]
      fontStretch : string;
          [@key "fontStretch"] [@ocaml.doc "The font-stretch."]
      fontDisplay : string;
          [@key "fontDisplay"] [@ocaml.doc "The font-display."]
      unicodeRange : string;
          [@key "unicodeRange"] [@ocaml.doc "The unicode-range."]
      src : string; [@key "src"] [@ocaml.doc "The src."]
      platformFontFamily : string;
          [@key "platformFontFamily"]
          [@ocaml.doc "The resolved platform font family"]
      fontVariationAxes : FontVariationAxis.t list option;
          [@key "fontVariationAxes"]
          [@yojson.option]
          [@ocaml.doc "Available variation settings (a.k.a. \"axes\")."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Properties of a web font: \
       https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions\n\
       and additional information such as platformFontFamily and \
       fontVariationAxes."]
  end

  and CSSTryRule : sig
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Parent stylesheet's origin."]
      style : CSSStyle.t;
          [@key "style"] [@ocaml.doc "Associated style declaration."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS try rule representation."]
  end

  and CSSPositionFallbackRule : sig
    type t = {
      name : Value.t; [@key "name"] [@ocaml.doc "No description provided"]
      tryRules : CSSTryRule.t list;
          [@key "tryRules"] [@ocaml.doc "List of keyframes."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "CSS position-fallback rule representation."]
  end

  and CSSKeyframesRule : sig
    type t = {
      animationName : Value.t;
          [@key "animationName"] [@ocaml.doc "Animation name."]
      keyframes : CSSKeyframeRule.t list;
          [@key "keyframes"] [@ocaml.doc "List of keyframes."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS keyframes rule representation."]
  end

  and CSSKeyframeRule : sig
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Parent stylesheet's origin."]
      keyText : Value.t; [@key "keyText"] [@ocaml.doc "Associated key text."]
      style : CSSStyle.t;
          [@key "style"] [@ocaml.doc "Associated style declaration."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS keyframe rule representation."]
  end

  and StyleDeclarationEdit : sig
    type t = {
      styleSheetId : StyleSheetId.t;
          [@key "styleSheetId"] [@ocaml.doc "The css style sheet identifier."]
      range : SourceRange.t;
          [@key "range"]
          [@ocaml.doc
            "The range of the style text in the enclosing stylesheet."]
      text : string; [@key "text"] [@ocaml.doc "New style text."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "A descriptor of operation to mutate style declaration text."]
  end
end = struct
  module rec StyleSheetId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StyleSheetOrigin : sig
    type _stylesheetorigin = [ `injected | `user_agent | `inspector | `regular ]

    val _stylesheetorigin_of_yojson : Yojson.Basic.t -> _stylesheetorigin
    val yojson_of__stylesheetorigin : _stylesheetorigin -> Yojson.Basic.t

    type t = _stylesheetorigin
    [@@deriving yojson]
    [@@ocaml.doc
      "Stylesheet type: \"injected\" for stylesheets injected via extension, \
       \"user-agent\" for user-agent\n\
       stylesheets, \"inspector\" for stylesheets created by the inspector \
       (i.e. those holding the \"via\n\
       inspector\" rules), \"regular\" for regular stylesheets."]
  end = struct
    type _stylesheetorigin = [ `injected | `user_agent | `inspector | `regular ]

    let _stylesheetorigin_of_yojson = function
      | `String "injected" -> `injected
      | `String "user-agent" -> `user_agent
      | `String "inspector" -> `inspector
      | `String "regular" -> `regular
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__stylesheetorigin = function
      | `injected -> `String "injected"
      | `user_agent -> `String "user-agent"
      | `inspector -> `String "inspector"
      | `regular -> `String "regular"

    type t = _stylesheetorigin
    [@@deriving yojson]
    [@@ocaml.doc
      "Stylesheet type: \"injected\" for stylesheets injected via extension, \
       \"user-agent\" for user-agent\n\
       stylesheets, \"inspector\" for stylesheets created by the inspector \
       (i.e. those holding the \"via\n\
       inspector\" rules), \"regular\" for regular stylesheets."]
  end

  and PseudoElementMatches : sig
    type t = {
      pseudoType : DOM.PseudoType.t;
          [@key "pseudoType"] [@ocaml.doc "Pseudo element type."]
      pseudoIdentifier : string option;
          [@key "pseudoIdentifier"]
          [@yojson.option]
          [@ocaml.doc "Pseudo element custom ident."]
      matches : RuleMatch.t list;
          [@key "matches"]
          [@ocaml.doc "Matches of CSS rules applicable to the pseudo style."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "CSS rule collection for a single pseudo style."]
  end = struct
    type t = {
      pseudoType : DOM.PseudoType.t;
          [@key "pseudoType"] [@ocaml.doc "Pseudo element type."]
      pseudoIdentifier : string option;
          [@key "pseudoIdentifier"]
          [@yojson.option]
          [@ocaml.doc "Pseudo element custom ident."]
      matches : RuleMatch.t list;
          [@key "matches"]
          [@ocaml.doc "Matches of CSS rules applicable to the pseudo style."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "CSS rule collection for a single pseudo style."]
  end

  and InheritedStyleEntry : sig
    type t = {
      inlineStyle : CSSStyle.t option;
          [@key "inlineStyle"]
          [@yojson.option]
          [@ocaml.doc
            "The ancestor node's inline style, if any, in the style \
             inheritance chain."]
      matchedCSSRules : RuleMatch.t list;
          [@key "matchedCSSRules"]
          [@ocaml.doc
            "Matches of CSS rules matching the ancestor node in the style \
             inheritance chain."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Inherited CSS rule collection from ancestor node."]
  end = struct
    type t = {
      inlineStyle : CSSStyle.t option;
          [@key "inlineStyle"]
          [@yojson.option]
          [@ocaml.doc
            "The ancestor node's inline style, if any, in the style \
             inheritance chain."]
      matchedCSSRules : RuleMatch.t list;
          [@key "matchedCSSRules"]
          [@ocaml.doc
            "Matches of CSS rules matching the ancestor node in the style \
             inheritance chain."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Inherited CSS rule collection from ancestor node."]
  end

  and InheritedPseudoElementMatches : sig
    type t = {
      pseudoElements : PseudoElementMatches.t list;
          [@key "pseudoElements"]
          [@ocaml.doc
            "Matches of pseudo styles from the pseudos of an ancestor node."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Inherited pseudo element matches from pseudos of an ancestor node."]
  end = struct
    type t = {
      pseudoElements : PseudoElementMatches.t list;
          [@key "pseudoElements"]
          [@ocaml.doc
            "Matches of pseudo styles from the pseudos of an ancestor node."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Inherited pseudo element matches from pseudos of an ancestor node."]
  end

  and RuleMatch : sig
    type t = {
      rule : CSSRule.t; [@key "rule"] [@ocaml.doc "CSS rule in the match."]
      matchingSelectors : number list;
          [@key "matchingSelectors"]
          [@ocaml.doc
            "Matching selector indices in the rule's selectorList selectors \
             (0-based)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Match data for a CSS rule."]
  end = struct
    type t = {
      rule : CSSRule.t; [@key "rule"] [@ocaml.doc "CSS rule in the match."]
      matchingSelectors : number list;
          [@key "matchingSelectors"]
          [@ocaml.doc
            "Matching selector indices in the rule's selectorList selectors \
             (0-based)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Match data for a CSS rule."]
  end

  and Value : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Value text."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc "Value range in the underlying resource (if available)."]
      specificity : Specificity.t option;
          [@key "specificity"]
          [@yojson.option]
          [@ocaml.doc "Specificity of the selector."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Data for a simple selector (these are delimited by commas in a selector \
       list)."]
  end = struct
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Value text."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc "Value range in the underlying resource (if available)."]
      specificity : Specificity.t option;
          [@key "specificity"]
          [@yojson.option]
          [@ocaml.doc "Specificity of the selector."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Data for a simple selector (these are delimited by commas in a selector \
       list)."]
  end

  and Specificity : sig
    type t = {
      a : number;
          [@key "a"]
          [@ocaml.doc
            "The a component, which represents the number of ID selectors."]
      b : number;
          [@key "b"]
          [@ocaml.doc
            "The b component, which represents the number of class selectors, \
             attributes selectors, and\n\
             pseudo-classes."]
      c : number;
          [@key "c"]
          [@ocaml.doc
            "The c component, which represents the number of type selectors \
             and pseudo-elements."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Specificity:\nhttps://drafts.csswg.org/selectors/#specificity-rules"]
  end = struct
    type t = {
      a : number;
          [@key "a"]
          [@ocaml.doc
            "The a component, which represents the number of ID selectors."]
      b : number;
          [@key "b"]
          [@ocaml.doc
            "The b component, which represents the number of class selectors, \
             attributes selectors, and\n\
             pseudo-classes."]
      c : number;
          [@key "c"]
          [@ocaml.doc
            "The c component, which represents the number of type selectors \
             and pseudo-elements."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Specificity:\nhttps://drafts.csswg.org/selectors/#specificity-rules"]
  end

  and SelectorList : sig
    type t = {
      selectors : Value.t list;
          [@key "selectors"] [@ocaml.doc "Selectors in the list."]
      text : string; [@key "text"] [@ocaml.doc "Rule selector text."]
    }
    [@@deriving yojson] [@@ocaml.doc "Selector list data."]
  end = struct
    type t = {
      selectors : Value.t list;
          [@key "selectors"] [@ocaml.doc "Selectors in the list."]
      text : string; [@key "text"] [@ocaml.doc "Rule selector text."]
    }
    [@@deriving yojson] [@@ocaml.doc "Selector list data."]
  end

  and CSSStyleSheetHeader : sig
    type t = {
      styleSheetId : StyleSheetId.t;
          [@key "styleSheetId"] [@ocaml.doc "The stylesheet identifier."]
      frameId : Page.FrameId.t;
          [@key "frameId"] [@ocaml.doc "Owner frame identifier."]
      sourceURL : string;
          [@key "sourceURL"]
          [@ocaml.doc
            "Stylesheet resource URL. Empty if this is a constructed \
             stylesheet created using\n\
             new CSSStyleSheet() (but non-empty if this is a constructed \
             sylesheet imported\n\
             as a CSS module script)."]
      sourceMapURL : string option;
          [@key "sourceMapURL"]
          [@yojson.option]
          [@ocaml.doc
            "URL of source map associated with the stylesheet (if any)."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Stylesheet origin."]
      title : string; [@key "title"] [@ocaml.doc "Stylesheet title."]
      ownerNode : DOM.BackendNodeId.t option;
          [@key "ownerNode"]
          [@yojson.option]
          [@ocaml.doc "The backend id for the owner node of the stylesheet."]
      disabled : bool;
          [@key "disabled"]
          [@ocaml.doc "Denotes whether the stylesheet is disabled."]
      hasSourceURL : bool option;
          [@key "hasSourceURL"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the sourceURL field value comes from the sourceURL \
             comment."]
      isInline : bool;
          [@key "isInline"]
          [@ocaml.doc
            "Whether this stylesheet is created for STYLE tag by parser. This \
             flag is not set for\n\
             document.written STYLE tags."]
      isMutable : bool;
          [@key "isMutable"]
          [@ocaml.doc
            "Whether this stylesheet is mutable. Inline stylesheets become \
             mutable\n\
             after they have been modified via CSSOM API.\n\
             `<link>` element's stylesheets become mutable only if DevTools \
             modifies them.\n\
             Constructed stylesheets (new CSSStyleSheet()) are mutable \
             immediately after creation."]
      isConstructed : bool;
          [@key "isConstructed"]
          [@ocaml.doc
            "True if this stylesheet is created through new CSSStyleSheet() or \
             imported as a\n\
             CSS module script."]
      startLine : number;
          [@key "startLine"]
          [@ocaml.doc
            "Line offset of the stylesheet within the resource (zero based)."]
      startColumn : number;
          [@key "startColumn"]
          [@ocaml.doc
            "Column offset of the stylesheet within the resource (zero based)."]
      length : number;
          [@key "length"] [@ocaml.doc "Size of the content (in characters)."]
      endLine : number;
          [@key "endLine"]
          [@ocaml.doc
            "Line offset of the end of the stylesheet within the resource \
             (zero based)."]
      endColumn : number;
          [@key "endColumn"]
          [@ocaml.doc
            "Column offset of the end of the stylesheet within the resource \
             (zero based)."]
      loadingFailed : bool option;
          [@key "loadingFailed"]
          [@yojson.option]
          [@ocaml.doc
            "If the style sheet was loaded from a network resource, this \
             indicates when the resource failed to load"]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS stylesheet metainformation."]
  end = struct
    type t = {
      styleSheetId : StyleSheetId.t;
          [@key "styleSheetId"] [@ocaml.doc "The stylesheet identifier."]
      frameId : Page.FrameId.t;
          [@key "frameId"] [@ocaml.doc "Owner frame identifier."]
      sourceURL : string;
          [@key "sourceURL"]
          [@ocaml.doc
            "Stylesheet resource URL. Empty if this is a constructed \
             stylesheet created using\n\
             new CSSStyleSheet() (but non-empty if this is a constructed \
             sylesheet imported\n\
             as a CSS module script)."]
      sourceMapURL : string option;
          [@key "sourceMapURL"]
          [@yojson.option]
          [@ocaml.doc
            "URL of source map associated with the stylesheet (if any)."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Stylesheet origin."]
      title : string; [@key "title"] [@ocaml.doc "Stylesheet title."]
      ownerNode : DOM.BackendNodeId.t option;
          [@key "ownerNode"]
          [@yojson.option]
          [@ocaml.doc "The backend id for the owner node of the stylesheet."]
      disabled : bool;
          [@key "disabled"]
          [@ocaml.doc "Denotes whether the stylesheet is disabled."]
      hasSourceURL : bool option;
          [@key "hasSourceURL"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the sourceURL field value comes from the sourceURL \
             comment."]
      isInline : bool;
          [@key "isInline"]
          [@ocaml.doc
            "Whether this stylesheet is created for STYLE tag by parser. This \
             flag is not set for\n\
             document.written STYLE tags."]
      isMutable : bool;
          [@key "isMutable"]
          [@ocaml.doc
            "Whether this stylesheet is mutable. Inline stylesheets become \
             mutable\n\
             after they have been modified via CSSOM API.\n\
             `<link>` element's stylesheets become mutable only if DevTools \
             modifies them.\n\
             Constructed stylesheets (new CSSStyleSheet()) are mutable \
             immediately after creation."]
      isConstructed : bool;
          [@key "isConstructed"]
          [@ocaml.doc
            "True if this stylesheet is created through new CSSStyleSheet() or \
             imported as a\n\
             CSS module script."]
      startLine : number;
          [@key "startLine"]
          [@ocaml.doc
            "Line offset of the stylesheet within the resource (zero based)."]
      startColumn : number;
          [@key "startColumn"]
          [@ocaml.doc
            "Column offset of the stylesheet within the resource (zero based)."]
      length : number;
          [@key "length"] [@ocaml.doc "Size of the content (in characters)."]
      endLine : number;
          [@key "endLine"]
          [@ocaml.doc
            "Line offset of the end of the stylesheet within the resource \
             (zero based)."]
      endColumn : number;
          [@key "endColumn"]
          [@ocaml.doc
            "Column offset of the end of the stylesheet within the resource \
             (zero based)."]
      loadingFailed : bool option;
          [@key "loadingFailed"]
          [@yojson.option]
          [@ocaml.doc
            "If the style sheet was loaded from a network resource, this \
             indicates when the resource failed to load"]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS stylesheet metainformation."]
  end

  and CSSRule : sig
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      selectorList : SelectorList.t;
          [@key "selectorList"] [@ocaml.doc "Rule selector data."]
      nestingSelectors : string list option;
          [@key "nestingSelectors"]
          [@yojson.option]
          [@ocaml.doc
            "Array of selectors from ancestor style rules, sorted by distance \
             from the current rule."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Parent stylesheet's origin."]
      style : CSSStyle.t;
          [@key "style"] [@ocaml.doc "Associated style declaration."]
      media : CSSMedia.t list option;
          [@key "media"]
          [@yojson.option]
          [@ocaml.doc
            "Media list array (for rules involving media queries). The array \
             enumerates media queries\n\
             starting with the innermost one, going outwards."]
      containerQueries : CSSContainerQuery.t list option;
          [@key "containerQueries"]
          [@yojson.option]
          [@ocaml.doc
            "Container query list array (for rules involving container queries).\n\
             The array enumerates container queries starting with the \
             innermost one, going outwards."]
      supports : CSSSupports.t list option;
          [@key "supports"]
          [@yojson.option]
          [@ocaml.doc
            "@supports CSS at-rule array.\n\
             The array enumerates @supports at-rules starting with the \
             innermost one, going outwards."]
      layers : CSSLayer.t list option;
          [@key "layers"]
          [@yojson.option]
          [@ocaml.doc
            "Cascade layer array. Contains the layer hierarchy that this rule \
             belongs to starting\n\
             with the innermost layer and going outwards."]
      scopes : CSSScope.t list option;
          [@key "scopes"]
          [@yojson.option]
          [@ocaml.doc
            "@scope CSS at-rule array.\n\
             The array enumerates @scope at-rules starting with the innermost \
             one, going outwards."]
      ruleTypes : CSSRuleType.t list option;
          [@key "ruleTypes"]
          [@yojson.option]
          [@ocaml.doc
            "The array keeps the types of ancestor CSSRules from the innermost \
             going outwards."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS rule representation."]
  end = struct
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      selectorList : SelectorList.t;
          [@key "selectorList"] [@ocaml.doc "Rule selector data."]
      nestingSelectors : string list option;
          [@key "nestingSelectors"]
          [@yojson.option]
          [@ocaml.doc
            "Array of selectors from ancestor style rules, sorted by distance \
             from the current rule."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Parent stylesheet's origin."]
      style : CSSStyle.t;
          [@key "style"] [@ocaml.doc "Associated style declaration."]
      media : CSSMedia.t list option;
          [@key "media"]
          [@yojson.option]
          [@ocaml.doc
            "Media list array (for rules involving media queries). The array \
             enumerates media queries\n\
             starting with the innermost one, going outwards."]
      containerQueries : CSSContainerQuery.t list option;
          [@key "containerQueries"]
          [@yojson.option]
          [@ocaml.doc
            "Container query list array (for rules involving container queries).\n\
             The array enumerates container queries starting with the \
             innermost one, going outwards."]
      supports : CSSSupports.t list option;
          [@key "supports"]
          [@yojson.option]
          [@ocaml.doc
            "@supports CSS at-rule array.\n\
             The array enumerates @supports at-rules starting with the \
             innermost one, going outwards."]
      layers : CSSLayer.t list option;
          [@key "layers"]
          [@yojson.option]
          [@ocaml.doc
            "Cascade layer array. Contains the layer hierarchy that this rule \
             belongs to starting\n\
             with the innermost layer and going outwards."]
      scopes : CSSScope.t list option;
          [@key "scopes"]
          [@yojson.option]
          [@ocaml.doc
            "@scope CSS at-rule array.\n\
             The array enumerates @scope at-rules starting with the innermost \
             one, going outwards."]
      ruleTypes : CSSRuleType.t list option;
          [@key "ruleTypes"]
          [@yojson.option]
          [@ocaml.doc
            "The array keeps the types of ancestor CSSRules from the innermost \
             going outwards."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS rule representation."]
  end

  and CSSRuleType : sig
    type _cssruletype =
      [ `MediaRule
      | `SupportsRule
      | `ContainerRule
      | `LayerRule
      | `ScopeRule
      | `StyleRule ]

    val _cssruletype_of_yojson : Yojson.Basic.t -> _cssruletype
    val yojson_of__cssruletype : _cssruletype -> Yojson.Basic.t

    type t = _cssruletype
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum indicating the type of a CSS rule, used to represent the order of \
       a style rule's ancestors.\n\
       This list only contains rule types that are collected during the \
       ancestor rule collection."]
  end = struct
    type _cssruletype =
      [ `MediaRule
      | `SupportsRule
      | `ContainerRule
      | `LayerRule
      | `ScopeRule
      | `StyleRule ]

    let _cssruletype_of_yojson = function
      | `String "MediaRule" -> `MediaRule
      | `String "SupportsRule" -> `SupportsRule
      | `String "ContainerRule" -> `ContainerRule
      | `String "LayerRule" -> `LayerRule
      | `String "ScopeRule" -> `ScopeRule
      | `String "StyleRule" -> `StyleRule
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cssruletype = function
      | `MediaRule -> `String "MediaRule"
      | `SupportsRule -> `String "SupportsRule"
      | `ContainerRule -> `String "ContainerRule"
      | `LayerRule -> `String "LayerRule"
      | `ScopeRule -> `String "ScopeRule"
      | `StyleRule -> `String "StyleRule"

    type t = _cssruletype
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum indicating the type of a CSS rule, used to represent the order of \
       a style rule's ancestors.\n\
       This list only contains rule types that are collected during the \
       ancestor rule collection."]
  end

  and RuleUsage : sig
    type t = {
      styleSheetId : StyleSheetId.t;
          [@key "styleSheetId"]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      startOffset : number;
          [@key "startOffset"]
          [@ocaml.doc
            "Offset of the start of the rule (including selector) from the \
             beginning of the stylesheet."]
      endOffset : number;
          [@key "endOffset"]
          [@ocaml.doc
            "Offset of the end of the rule body from the beginning of the \
             stylesheet."]
      used : bool;
          [@key "used"]
          [@ocaml.doc
            "Indicates whether the rule was actually used by some element in \
             the page."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS coverage information."]
  end = struct
    type t = {
      styleSheetId : StyleSheetId.t;
          [@key "styleSheetId"]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      startOffset : number;
          [@key "startOffset"]
          [@ocaml.doc
            "Offset of the start of the rule (including selector) from the \
             beginning of the stylesheet."]
      endOffset : number;
          [@key "endOffset"]
          [@ocaml.doc
            "Offset of the end of the rule body from the beginning of the \
             stylesheet."]
      used : bool;
          [@key "used"]
          [@ocaml.doc
            "Indicates whether the rule was actually used by some element in \
             the page."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS coverage information."]
  end

  and SourceRange : sig
    type t = {
      startLine : number; [@key "startLine"] [@ocaml.doc "Start line of range."]
      startColumn : number;
          [@key "startColumn"] [@ocaml.doc "Start column of range (inclusive)."]
      endLine : number; [@key "endLine"] [@ocaml.doc "End line of range"]
      endColumn : number;
          [@key "endColumn"] [@ocaml.doc "End column of range (exclusive)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Text range within a resource. All numbers are zero-based."]
  end = struct
    type t = {
      startLine : number; [@key "startLine"] [@ocaml.doc "Start line of range."]
      startColumn : number;
          [@key "startColumn"] [@ocaml.doc "Start column of range (inclusive)."]
      endLine : number; [@key "endLine"] [@ocaml.doc "End line of range"]
      endColumn : number;
          [@key "endColumn"] [@ocaml.doc "End column of range (exclusive)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Text range within a resource. All numbers are zero-based."]
  end

  and ShorthandEntry : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Shorthand name."]
      value : string; [@key "value"] [@ocaml.doc "Shorthand value."]
      important : bool option;
          [@key "important"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property has \"!important\" annotation (implies \
             `false` if absent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Shorthand name."]
      value : string; [@key "value"] [@ocaml.doc "Shorthand value."]
      important : bool option;
          [@key "important"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property has \"!important\" annotation (implies \
             `false` if absent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CSSComputedStyleProperty : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Computed style property name."]
      value : string;
          [@key "value"] [@ocaml.doc "Computed style property value."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Computed style property name."]
      value : string;
          [@key "value"] [@ocaml.doc "Computed style property value."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CSSStyle : sig
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      cssProperties : CSSProperty.t list;
          [@key "cssProperties"] [@ocaml.doc "CSS properties in the style."]
      shorthandEntries : ShorthandEntry.t list;
          [@key "shorthandEntries"]
          [@ocaml.doc "Computed values for all shorthands found in the style."]
      cssText : string option;
          [@key "cssText"]
          [@yojson.option]
          [@ocaml.doc "Style declaration text (if available)."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "Style declaration range in the enclosing stylesheet (if \
             available)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS style representation."]
  end = struct
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      cssProperties : CSSProperty.t list;
          [@key "cssProperties"] [@ocaml.doc "CSS properties in the style."]
      shorthandEntries : ShorthandEntry.t list;
          [@key "shorthandEntries"]
          [@ocaml.doc "Computed values for all shorthands found in the style."]
      cssText : string option;
          [@key "cssText"]
          [@yojson.option]
          [@ocaml.doc "Style declaration text (if available)."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "Style declaration range in the enclosing stylesheet (if \
             available)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS style representation."]
  end

  and CSSProperty : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "The property name."]
      value : string; [@key "value"] [@ocaml.doc "The property value."]
      important : bool option;
          [@key "important"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property has \"!important\" annotation (implies \
             `false` if absent)."]
      implicit : bool option;
          [@key "implicit"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property is implicit (implies `false` if absent)."]
      text : string option;
          [@key "text"]
          [@yojson.option]
          [@ocaml.doc "The full property text as specified in the style."]
      parsedOk : bool option;
          [@key "parsedOk"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property is understood by the browser (implies `true` \
             if absent)."]
      disabled : bool option;
          [@key "disabled"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property is disabled by the user (present for \
             source-based properties only)."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The entire property range in the enclosing style declaration (if \
             available)."]
      longhandProperties : CSSProperty.t list option;
          [@key "longhandProperties"]
          [@yojson.option]
          [@ocaml.doc
            "Parsed longhand components of this property if it is a shorthand.\n\
             This field will be empty if the given property is not a shorthand."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS property declaration data."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "The property name."]
      value : string; [@key "value"] [@ocaml.doc "The property value."]
      important : bool option;
          [@key "important"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property has \"!important\" annotation (implies \
             `false` if absent)."]
      implicit : bool option;
          [@key "implicit"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property is implicit (implies `false` if absent)."]
      text : string option;
          [@key "text"]
          [@yojson.option]
          [@ocaml.doc "The full property text as specified in the style."]
      parsedOk : bool option;
          [@key "parsedOk"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property is understood by the browser (implies `true` \
             if absent)."]
      disabled : bool option;
          [@key "disabled"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the property is disabled by the user (present for \
             source-based properties only)."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The entire property range in the enclosing style declaration (if \
             available)."]
      longhandProperties : CSSProperty.t list option;
          [@key "longhandProperties"]
          [@yojson.option]
          [@ocaml.doc
            "Parsed longhand components of this property if it is a shorthand.\n\
             This field will be empty if the given property is not a shorthand."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS property declaration data."]
  end

  and CSSMedia : sig
    type _cssmedia_source =
      [ `mediaRule | `importRule | `linkedSheet | `inlineSheet ]

    val _cssmedia_source_of_yojson : Yojson.Basic.t -> _cssmedia_source
    val yojson_of__cssmedia_source : _cssmedia_source -> Yojson.Basic.t

    type t = {
      text : string; [@key "text"] [@ocaml.doc "Media query text."]
      source : _cssmedia_source;
          [@key "source"]
          [@ocaml.doc
            "Source of the media query: \"mediaRule\" if specified by a @media \
             rule, \"importRule\" if\n\
             specified by an @import rule, \"linkedSheet\" if specified by a \
             \"media\" attribute in a linked\n\
             stylesheet's LINK tag, \"inlineSheet\" if specified by a \
             \"media\" attribute in an inline\n\
             stylesheet's STYLE tag."]
      sourceURL : string option;
          [@key "sourceURL"]
          [@yojson.option]
          [@ocaml.doc
            "URL of the document containing the media query description."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule (@media or @import) header range in the \
             enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
      mediaList : MediaQuery.t list option;
          [@key "mediaList"]
          [@yojson.option]
          [@ocaml.doc "Array of media queries."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS media rule descriptor."]
  end = struct
    type _cssmedia_source =
      [ `mediaRule | `importRule | `linkedSheet | `inlineSheet ]

    let _cssmedia_source_of_yojson = function
      | `String "mediaRule" -> `mediaRule
      | `String "importRule" -> `importRule
      | `String "linkedSheet" -> `linkedSheet
      | `String "inlineSheet" -> `inlineSheet
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cssmedia_source = function
      | `mediaRule -> `String "mediaRule"
      | `importRule -> `String "importRule"
      | `linkedSheet -> `String "linkedSheet"
      | `inlineSheet -> `String "inlineSheet"

    type t = {
      text : string; [@key "text"] [@ocaml.doc "Media query text."]
      source : _cssmedia_source;
          [@key "source"]
          [@ocaml.doc
            "Source of the media query: \"mediaRule\" if specified by a @media \
             rule, \"importRule\" if\n\
             specified by an @import rule, \"linkedSheet\" if specified by a \
             \"media\" attribute in a linked\n\
             stylesheet's LINK tag, \"inlineSheet\" if specified by a \
             \"media\" attribute in an inline\n\
             stylesheet's STYLE tag."]
      sourceURL : string option;
          [@key "sourceURL"]
          [@yojson.option]
          [@ocaml.doc
            "URL of the document containing the media query description."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule (@media or @import) header range in the \
             enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
      mediaList : MediaQuery.t list option;
          [@key "mediaList"]
          [@yojson.option]
          [@ocaml.doc "Array of media queries."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS media rule descriptor."]
  end

  and MediaQuery : sig
    type t = {
      expressions : MediaQueryExpression.t list;
          [@key "expressions"] [@ocaml.doc "Array of media query expressions."]
      active : bool;
          [@key "active"]
          [@ocaml.doc "Whether the media query condition is satisfied."]
    }
    [@@deriving yojson] [@@ocaml.doc "Media query descriptor."]
  end = struct
    type t = {
      expressions : MediaQueryExpression.t list;
          [@key "expressions"] [@ocaml.doc "Array of media query expressions."]
      active : bool;
          [@key "active"]
          [@ocaml.doc "Whether the media query condition is satisfied."]
    }
    [@@deriving yojson] [@@ocaml.doc "Media query descriptor."]
  end

  and MediaQueryExpression : sig
    type t = {
      value : number;
          [@key "value"] [@ocaml.doc "Media query expression value."]
      unit : string; [@key "unit"] [@ocaml.doc "Media query expression units."]
      feature : string;
          [@key "feature"] [@ocaml.doc "Media query expression feature."]
      valueRange : SourceRange.t option;
          [@key "valueRange"]
          [@yojson.option]
          [@ocaml.doc
            "The associated range of the value text in the enclosing \
             stylesheet (if available)."]
      computedLength : number option;
          [@key "computedLength"]
          [@yojson.option]
          [@ocaml.doc
            "Computed length of media query expression (if applicable)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Media query expression descriptor."]
  end = struct
    type t = {
      value : number;
          [@key "value"] [@ocaml.doc "Media query expression value."]
      unit : string; [@key "unit"] [@ocaml.doc "Media query expression units."]
      feature : string;
          [@key "feature"] [@ocaml.doc "Media query expression feature."]
      valueRange : SourceRange.t option;
          [@key "valueRange"]
          [@yojson.option]
          [@ocaml.doc
            "The associated range of the value text in the enclosing \
             stylesheet (if available)."]
      computedLength : number option;
          [@key "computedLength"]
          [@yojson.option]
          [@ocaml.doc
            "Computed length of media query expression (if applicable)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Media query expression descriptor."]
  end

  and CSSContainerQuery : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Container query text."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "Optional name for the container."]
      physicalAxes : DOM.PhysicalAxes.t option;
          [@key "physicalAxes"]
          [@yojson.option]
          [@ocaml.doc "Optional physical axes queried for the container."]
      logicalAxes : DOM.LogicalAxes.t option;
          [@key "logicalAxes"]
          [@yojson.option]
          [@ocaml.doc "Optional logical axes queried for the container."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS container query rule descriptor."]
  end = struct
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Container query text."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "Optional name for the container."]
      physicalAxes : DOM.PhysicalAxes.t option;
          [@key "physicalAxes"]
          [@yojson.option]
          [@ocaml.doc "Optional physical axes queried for the container."]
      logicalAxes : DOM.LogicalAxes.t option;
          [@key "logicalAxes"]
          [@yojson.option]
          [@ocaml.doc "Optional logical axes queried for the container."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS container query rule descriptor."]
  end

  and CSSSupports : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Supports rule text."]
      active : bool;
          [@key "active"]
          [@ocaml.doc "Whether the supports condition is satisfied."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Supports at-rule descriptor."]
  end = struct
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Supports rule text."]
      active : bool;
          [@key "active"]
          [@ocaml.doc "Whether the supports condition is satisfied."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Supports at-rule descriptor."]
  end

  and CSSScope : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Scope rule text."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Scope at-rule descriptor."]
  end = struct
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Scope rule text."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Scope at-rule descriptor."]
  end

  and CSSLayer : sig
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Layer name."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Layer at-rule descriptor."]
  end = struct
    type t = {
      text : string; [@key "text"] [@ocaml.doc "Layer name."]
      range : SourceRange.t option;
          [@key "range"]
          [@yojson.option]
          [@ocaml.doc
            "The associated rule header range in the enclosing stylesheet (if\n\
             available)."]
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the stylesheet containing this object (if exists)."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Layer at-rule descriptor."]
  end

  and CSSLayerData : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Layer name."]
      subLayers : CSSLayerData.t list option;
          [@key "subLayers"] [@yojson.option] [@ocaml.doc "Direct sub-layers"]
      order : number;
          [@key "order"]
          [@ocaml.doc
            "Layer order. The order determines the order of the layer in the \
             cascade order.\n\
             A higher number has higher priority in the cascade order."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Layer data."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Layer name."]
      subLayers : CSSLayerData.t list option;
          [@key "subLayers"] [@yojson.option] [@ocaml.doc "Direct sub-layers"]
      order : number;
          [@key "order"]
          [@ocaml.doc
            "Layer order. The order determines the order of the layer in the \
             cascade order.\n\
             A higher number has higher priority in the cascade order."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Layer data."]
  end

  and PlatformFontUsage : sig
    type t = {
      familyName : string;
          [@key "familyName"]
          [@ocaml.doc "Font's family name reported by platform."]
      isCustomFont : bool;
          [@key "isCustomFont"]
          [@ocaml.doc
            "Indicates if the font was downloaded or resolved locally."]
      glyphCount : number;
          [@key "glyphCount"]
          [@ocaml.doc "Amount of glyphs that were rendered with this font."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about amount of glyphs that were rendered with given font."]
  end = struct
    type t = {
      familyName : string;
          [@key "familyName"]
          [@ocaml.doc "Font's family name reported by platform."]
      isCustomFont : bool;
          [@key "isCustomFont"]
          [@ocaml.doc
            "Indicates if the font was downloaded or resolved locally."]
      glyphCount : number;
          [@key "glyphCount"]
          [@ocaml.doc "Amount of glyphs that were rendered with this font."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about amount of glyphs that were rendered with given font."]
  end

  and FontVariationAxis : sig
    type t = {
      tag : string;
          [@key "tag"]
          [@ocaml.doc "The font-variation-setting tag (a.k.a. \"axis tag\")."]
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Human-readable variation name in the default language (normally, \
             \"en\")."]
      minValue : number;
          [@key "minValue"]
          [@ocaml.doc
            "The minimum value (inclusive) the font supports for this tag."]
      maxValue : number;
          [@key "maxValue"]
          [@ocaml.doc
            "The maximum value (inclusive) the font supports for this tag."]
      defaultValue : number;
          [@key "defaultValue"] [@ocaml.doc "The default value."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about font variation axes for variable fonts"]
  end = struct
    type t = {
      tag : string;
          [@key "tag"]
          [@ocaml.doc "The font-variation-setting tag (a.k.a. \"axis tag\")."]
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Human-readable variation name in the default language (normally, \
             \"en\")."]
      minValue : number;
          [@key "minValue"]
          [@ocaml.doc
            "The minimum value (inclusive) the font supports for this tag."]
      maxValue : number;
          [@key "maxValue"]
          [@ocaml.doc
            "The maximum value (inclusive) the font supports for this tag."]
      defaultValue : number;
          [@key "defaultValue"] [@ocaml.doc "The default value."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about font variation axes for variable fonts"]
  end

  and FontFace : sig
    type t = {
      fontFamily : string; [@key "fontFamily"] [@ocaml.doc "The font-family."]
      fontStyle : string; [@key "fontStyle"] [@ocaml.doc "The font-style."]
      fontVariant : string;
          [@key "fontVariant"] [@ocaml.doc "The font-variant."]
      fontWeight : string; [@key "fontWeight"] [@ocaml.doc "The font-weight."]
      fontStretch : string;
          [@key "fontStretch"] [@ocaml.doc "The font-stretch."]
      fontDisplay : string;
          [@key "fontDisplay"] [@ocaml.doc "The font-display."]
      unicodeRange : string;
          [@key "unicodeRange"] [@ocaml.doc "The unicode-range."]
      src : string; [@key "src"] [@ocaml.doc "The src."]
      platformFontFamily : string;
          [@key "platformFontFamily"]
          [@ocaml.doc "The resolved platform font family"]
      fontVariationAxes : FontVariationAxis.t list option;
          [@key "fontVariationAxes"]
          [@yojson.option]
          [@ocaml.doc "Available variation settings (a.k.a. \"axes\")."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Properties of a web font: \
       https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions\n\
       and additional information such as platformFontFamily and \
       fontVariationAxes."]
  end = struct
    type t = {
      fontFamily : string; [@key "fontFamily"] [@ocaml.doc "The font-family."]
      fontStyle : string; [@key "fontStyle"] [@ocaml.doc "The font-style."]
      fontVariant : string;
          [@key "fontVariant"] [@ocaml.doc "The font-variant."]
      fontWeight : string; [@key "fontWeight"] [@ocaml.doc "The font-weight."]
      fontStretch : string;
          [@key "fontStretch"] [@ocaml.doc "The font-stretch."]
      fontDisplay : string;
          [@key "fontDisplay"] [@ocaml.doc "The font-display."]
      unicodeRange : string;
          [@key "unicodeRange"] [@ocaml.doc "The unicode-range."]
      src : string; [@key "src"] [@ocaml.doc "The src."]
      platformFontFamily : string;
          [@key "platformFontFamily"]
          [@ocaml.doc "The resolved platform font family"]
      fontVariationAxes : FontVariationAxis.t list option;
          [@key "fontVariationAxes"]
          [@yojson.option]
          [@ocaml.doc "Available variation settings (a.k.a. \"axes\")."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Properties of a web font: \
       https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions\n\
       and additional information such as platformFontFamily and \
       fontVariationAxes."]
  end

  and CSSTryRule : sig
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Parent stylesheet's origin."]
      style : CSSStyle.t;
          [@key "style"] [@ocaml.doc "Associated style declaration."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS try rule representation."]
  end = struct
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Parent stylesheet's origin."]
      style : CSSStyle.t;
          [@key "style"] [@ocaml.doc "Associated style declaration."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS try rule representation."]
  end

  and CSSPositionFallbackRule : sig
    type t = {
      name : Value.t; [@key "name"] [@ocaml.doc "No description provided"]
      tryRules : CSSTryRule.t list;
          [@key "tryRules"] [@ocaml.doc "List of keyframes."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "CSS position-fallback rule representation."]
  end = struct
    type t = {
      name : Value.t; [@key "name"] [@ocaml.doc "No description provided"]
      tryRules : CSSTryRule.t list;
          [@key "tryRules"] [@ocaml.doc "List of keyframes."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "CSS position-fallback rule representation."]
  end

  and CSSKeyframesRule : sig
    type t = {
      animationName : Value.t;
          [@key "animationName"] [@ocaml.doc "Animation name."]
      keyframes : CSSKeyframeRule.t list;
          [@key "keyframes"] [@ocaml.doc "List of keyframes."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS keyframes rule representation."]
  end = struct
    type t = {
      animationName : Value.t;
          [@key "animationName"] [@ocaml.doc "Animation name."]
      keyframes : CSSKeyframeRule.t list;
          [@key "keyframes"] [@ocaml.doc "List of keyframes."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS keyframes rule representation."]
  end

  and CSSKeyframeRule : sig
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Parent stylesheet's origin."]
      keyText : Value.t; [@key "keyText"] [@ocaml.doc "Associated key text."]
      style : CSSStyle.t;
          [@key "style"] [@ocaml.doc "Associated style declaration."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS keyframe rule representation."]
  end = struct
    type t = {
      styleSheetId : StyleSheetId.t option;
          [@key "styleSheetId"]
          [@yojson.option]
          [@ocaml.doc
            "The css style sheet identifier (absent for user agent stylesheet \
             and user-specified\n\
             stylesheet rules) this rule came from."]
      origin : StyleSheetOrigin.t;
          [@key "origin"] [@ocaml.doc "Parent stylesheet's origin."]
      keyText : Value.t; [@key "keyText"] [@ocaml.doc "Associated key text."]
      style : CSSStyle.t;
          [@key "style"] [@ocaml.doc "Associated style declaration."]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS keyframe rule representation."]
  end

  and StyleDeclarationEdit : sig
    type t = {
      styleSheetId : StyleSheetId.t;
          [@key "styleSheetId"] [@ocaml.doc "The css style sheet identifier."]
      range : SourceRange.t;
          [@key "range"]
          [@ocaml.doc
            "The range of the style text in the enclosing stylesheet."]
      text : string; [@key "text"] [@ocaml.doc "New style text."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "A descriptor of operation to mutate style declaration text."]
  end = struct
    type t = {
      styleSheetId : StyleSheetId.t;
          [@key "styleSheetId"] [@ocaml.doc "The css style sheet identifier."]
      range : SourceRange.t;
          [@key "range"]
          [@ocaml.doc
            "The range of the style text in the enclosing stylesheet."]
      text : string; [@key "text"] [@ocaml.doc "New style text."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "A descriptor of operation to mutate style declaration text."]
  end
end

and CacheStorage : sig
  module rec CacheId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique identifier of the Cache object."]
  end

  and CachedResponseType : sig
    type _cachedresponsetype =
      [ `basic | `cors | `default | `error | `opaqueResponse | `opaqueRedirect ]

    val _cachedresponsetype_of_yojson : Yojson.Basic.t -> _cachedresponsetype
    val yojson_of__cachedresponsetype : _cachedresponsetype -> Yojson.Basic.t

    type t = _cachedresponsetype
    [@@deriving yojson] [@@ocaml.doc "type of HTTP response cached"]
  end

  and DataEntry : sig
    type t = {
      requestURL : string; [@key "requestURL"] [@ocaml.doc "Request URL."]
      requestMethod : string;
          [@key "requestMethod"] [@ocaml.doc "Request method."]
      requestHeaders : Header.t list;
          [@key "requestHeaders"] [@ocaml.doc "Request headers"]
      responseTime : number;
          [@key "responseTime"] [@ocaml.doc "Number of seconds since epoch."]
      responseStatus : number;
          [@key "responseStatus"] [@ocaml.doc "HTTP response status code."]
      responseStatusText : string;
          [@key "responseStatusText"] [@ocaml.doc "HTTP response status text."]
      responseType : CachedResponseType.t;
          [@key "responseType"] [@ocaml.doc "HTTP response type"]
      responseHeaders : Header.t list;
          [@key "responseHeaders"] [@ocaml.doc "Response headers"]
    }
    [@@deriving yojson] [@@ocaml.doc "Data entry."]
  end

  and Cache : sig
    type t = {
      cacheId : CacheId.t;
          [@key "cacheId"] [@ocaml.doc "An opaque unique id of the cache."]
      securityOrigin : string;
          [@key "securityOrigin"] [@ocaml.doc "Security origin of the cache."]
      storageKey : string;
          [@key "storageKey"] [@ocaml.doc "Storage key of the cache."]
      storageBucket : Storage.StorageBucket.t option;
          [@key "storageBucket"]
          [@yojson.option]
          [@ocaml.doc "Storage bucket of the cache."]
      cacheName : string;
          [@key "cacheName"] [@ocaml.doc "The name of the cache."]
    }
    [@@deriving yojson] [@@ocaml.doc "Cache identifier."]
  end

  and Header : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CachedResponse : sig
    type t = {
      body : string;
          [@key "body"]
          [@ocaml.doc
            "Entry content, base64-encoded. (Encoded as a base64 string when \
             passed over JSON)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Cached response"]
  end
end = struct
  module rec CacheId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique identifier of the Cache object."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique identifier of the Cache object."]
  end

  and CachedResponseType : sig
    type _cachedresponsetype =
      [ `basic | `cors | `default | `error | `opaqueResponse | `opaqueRedirect ]

    val _cachedresponsetype_of_yojson : Yojson.Basic.t -> _cachedresponsetype
    val yojson_of__cachedresponsetype : _cachedresponsetype -> Yojson.Basic.t

    type t = _cachedresponsetype
    [@@deriving yojson] [@@ocaml.doc "type of HTTP response cached"]
  end = struct
    type _cachedresponsetype =
      [ `basic | `cors | `default | `error | `opaqueResponse | `opaqueRedirect ]

    let _cachedresponsetype_of_yojson = function
      | `String "basic" -> `basic
      | `String "cors" -> `cors
      | `String "default" -> `default
      | `String "error" -> `error
      | `String "opaqueResponse" -> `opaqueResponse
      | `String "opaqueRedirect" -> `opaqueRedirect
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cachedresponsetype = function
      | `basic -> `String "basic"
      | `cors -> `String "cors"
      | `default -> `String "default"
      | `error -> `String "error"
      | `opaqueResponse -> `String "opaqueResponse"
      | `opaqueRedirect -> `String "opaqueRedirect"

    type t = _cachedresponsetype
    [@@deriving yojson] [@@ocaml.doc "type of HTTP response cached"]
  end

  and DataEntry : sig
    type t = {
      requestURL : string; [@key "requestURL"] [@ocaml.doc "Request URL."]
      requestMethod : string;
          [@key "requestMethod"] [@ocaml.doc "Request method."]
      requestHeaders : Header.t list;
          [@key "requestHeaders"] [@ocaml.doc "Request headers"]
      responseTime : number;
          [@key "responseTime"] [@ocaml.doc "Number of seconds since epoch."]
      responseStatus : number;
          [@key "responseStatus"] [@ocaml.doc "HTTP response status code."]
      responseStatusText : string;
          [@key "responseStatusText"] [@ocaml.doc "HTTP response status text."]
      responseType : CachedResponseType.t;
          [@key "responseType"] [@ocaml.doc "HTTP response type"]
      responseHeaders : Header.t list;
          [@key "responseHeaders"] [@ocaml.doc "Response headers"]
    }
    [@@deriving yojson] [@@ocaml.doc "Data entry."]
  end = struct
    type t = {
      requestURL : string; [@key "requestURL"] [@ocaml.doc "Request URL."]
      requestMethod : string;
          [@key "requestMethod"] [@ocaml.doc "Request method."]
      requestHeaders : Header.t list;
          [@key "requestHeaders"] [@ocaml.doc "Request headers"]
      responseTime : number;
          [@key "responseTime"] [@ocaml.doc "Number of seconds since epoch."]
      responseStatus : number;
          [@key "responseStatus"] [@ocaml.doc "HTTP response status code."]
      responseStatusText : string;
          [@key "responseStatusText"] [@ocaml.doc "HTTP response status text."]
      responseType : CachedResponseType.t;
          [@key "responseType"] [@ocaml.doc "HTTP response type"]
      responseHeaders : Header.t list;
          [@key "responseHeaders"] [@ocaml.doc "Response headers"]
    }
    [@@deriving yojson] [@@ocaml.doc "Data entry."]
  end

  and Cache : sig
    type t = {
      cacheId : CacheId.t;
          [@key "cacheId"] [@ocaml.doc "An opaque unique id of the cache."]
      securityOrigin : string;
          [@key "securityOrigin"] [@ocaml.doc "Security origin of the cache."]
      storageKey : string;
          [@key "storageKey"] [@ocaml.doc "Storage key of the cache."]
      storageBucket : Storage.StorageBucket.t option;
          [@key "storageBucket"]
          [@yojson.option]
          [@ocaml.doc "Storage bucket of the cache."]
      cacheName : string;
          [@key "cacheName"] [@ocaml.doc "The name of the cache."]
    }
    [@@deriving yojson] [@@ocaml.doc "Cache identifier."]
  end = struct
    type t = {
      cacheId : CacheId.t;
          [@key "cacheId"] [@ocaml.doc "An opaque unique id of the cache."]
      securityOrigin : string;
          [@key "securityOrigin"] [@ocaml.doc "Security origin of the cache."]
      storageKey : string;
          [@key "storageKey"] [@ocaml.doc "Storage key of the cache."]
      storageBucket : Storage.StorageBucket.t option;
          [@key "storageBucket"]
          [@yojson.option]
          [@ocaml.doc "Storage bucket of the cache."]
      cacheName : string;
          [@key "cacheName"] [@ocaml.doc "The name of the cache."]
    }
    [@@deriving yojson] [@@ocaml.doc "Cache identifier."]
  end

  and Header : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CachedResponse : sig
    type t = {
      body : string;
          [@key "body"]
          [@ocaml.doc
            "Entry content, base64-encoded. (Encoded as a base64 string when \
             passed over JSON)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Cached response"]
  end = struct
    type t = {
      body : string;
          [@key "body"]
          [@ocaml.doc
            "Entry content, base64-encoded. (Encoded as a base64 string when \
             passed over JSON)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Cached response"]
  end
end

and Cast : sig
  module rec Sink : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      id : string; [@key "id"] [@ocaml.doc "No description provided"]
      session : string option;
          [@key "session"]
          [@yojson.option]
          [@ocaml.doc
            "Text describing the current session. Present only if there is an \
             active\n\
             session on the sink."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec Sink : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      id : string; [@key "id"] [@ocaml.doc "No description provided"]
      session : string option;
          [@key "session"]
          [@yojson.option]
          [@ocaml.doc
            "Text describing the current session. Present only if there is an \
             active\n\
             session on the sink."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      id : string; [@key "id"] [@ocaml.doc "No description provided"]
      session : string option;
          [@key "session"]
          [@yojson.option]
          [@ocaml.doc
            "Text describing the current session. Present only if there is an \
             active\n\
             session on the sink."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and DOM : sig
  module rec NodeId : sig
    type t = number
    [@@deriving yojson] [@@ocaml.doc "Unique DOM node identifier."]
  end

  and BackendNodeId : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc
      "Unique DOM node identifier used to reference a node that may not have \
       been pushed to the\n\
       front-end."]
  end

  and BackendNode : sig
    type t = {
      nodeType : number; [@key "nodeType"] [@ocaml.doc "`Node`'s nodeType."]
      nodeName : string; [@key "nodeName"] [@ocaml.doc "`Node`'s nodeName."]
      backendNodeId : BackendNodeId.t;
          [@key "backendNodeId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Backend node with a friendly name."]
  end

  and PseudoType : sig
    type _pseudotype =
      [ `first_line
      | `first_letter
      | `before
      | `after
      | `marker
      | `backdrop
      | `selection
      | `target_text
      | `spelling_error
      | `grammar_error
      | `highlight
      | `first_line_inherited
      | `scrollbar
      | `scrollbar_thumb
      | `scrollbar_button
      | `scrollbar_track
      | `scrollbar_track_piece
      | `scrollbar_corner
      | `resizer
      | `input_list_button
      | `view_transition
      | `view_transition_group
      | `view_transition_image_pair
      | `view_transition_old
      | `view_transition_new ]

    val _pseudotype_of_yojson : Yojson.Basic.t -> _pseudotype
    val yojson_of__pseudotype : _pseudotype -> Yojson.Basic.t

    type t = _pseudotype
    [@@deriving yojson] [@@ocaml.doc "Pseudo element type."]
  end

  and ShadowRootType : sig
    type _shadowroottype = [ `user_agent | `open_ | `closed ]

    val _shadowroottype_of_yojson : Yojson.Basic.t -> _shadowroottype
    val yojson_of__shadowroottype : _shadowroottype -> Yojson.Basic.t

    type t = _shadowroottype
    [@@deriving yojson] [@@ocaml.doc "Shadow root type."]
  end

  and CompatibilityMode : sig
    type _compatibilitymode =
      [ `QuirksMode | `LimitedQuirksMode | `NoQuirksMode ]

    val _compatibilitymode_of_yojson : Yojson.Basic.t -> _compatibilitymode
    val yojson_of__compatibilitymode : _compatibilitymode -> Yojson.Basic.t

    type t = _compatibilitymode
    [@@deriving yojson] [@@ocaml.doc "Document compatibility mode."]
  end

  and PhysicalAxes : sig
    type _physicalaxes = [ `Horizontal | `Vertical | `Both ]

    val _physicalaxes_of_yojson : Yojson.Basic.t -> _physicalaxes
    val yojson_of__physicalaxes : _physicalaxes -> Yojson.Basic.t

    type t = _physicalaxes
    [@@deriving yojson] [@@ocaml.doc "ContainerSelector physical axes"]
  end

  and LogicalAxes : sig
    type _logicalaxes = [ `Inline | `Block | `Both ]

    val _logicalaxes_of_yojson : Yojson.Basic.t -> _logicalaxes
    val yojson_of__logicalaxes : _logicalaxes -> Yojson.Basic.t

    type t = _logicalaxes
    [@@deriving yojson] [@@ocaml.doc "ContainerSelector logical axes"]
  end

  and Node : sig
    type t = {
      nodeId : NodeId.t;
          [@key "nodeId"]
          [@ocaml.doc
            "Node identifier that is passed into the rest of the DOM messages \
             as the `nodeId`. Backend\n\
             will only push node with given `id` once. It is aware of all \
             requested nodes and will only\n\
             fire DOM events for nodes known to the client."]
      parentId : NodeId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc "The id of the parent node if any."]
      backendNodeId : BackendNodeId.t;
          [@key "backendNodeId"] [@ocaml.doc "The BackendNodeId for this node."]
      nodeType : number; [@key "nodeType"] [@ocaml.doc "`Node`'s nodeType."]
      nodeName : string; [@key "nodeName"] [@ocaml.doc "`Node`'s nodeName."]
      localName : string; [@key "localName"] [@ocaml.doc "`Node`'s localName."]
      nodeValue : string; [@key "nodeValue"] [@ocaml.doc "`Node`'s nodeValue."]
      childNodeCount : number option;
          [@key "childNodeCount"]
          [@yojson.option]
          [@ocaml.doc "Child count for `Container` nodes."]
      children : Node.t list option;
          [@key "children"]
          [@yojson.option]
          [@ocaml.doc "Child nodes of this node when requested with children."]
      attributes : string list option;
          [@key "attributes"]
          [@yojson.option]
          [@ocaml.doc
            "Attributes of the `Element` node in the form of flat array \
             `[name1, value1, name2, value2]`."]
      documentURL : string option;
          [@key "documentURL"]
          [@yojson.option]
          [@ocaml.doc
            "Document URL that `Document` or `FrameOwner` node points to."]
      baseURL : string option;
          [@key "baseURL"]
          [@yojson.option]
          [@ocaml.doc
            "Base URL that `Document` or `FrameOwner` node uses for URL \
             completion."]
      publicId : string option;
          [@key "publicId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType`'s publicId."]
      systemId : string option;
          [@key "systemId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType`'s systemId."]
      internalSubset : string option;
          [@key "internalSubset"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType`'s internalSubset."]
      xmlVersion : string option;
          [@key "xmlVersion"]
          [@yojson.option]
          [@ocaml.doc "`Document`'s XML version in case of XML documents."]
      name : string option;
          [@key "name"] [@yojson.option] [@ocaml.doc "`Attr`'s name."]
      value : string option;
          [@key "value"] [@yojson.option] [@ocaml.doc "`Attr`'s value."]
      pseudoType : PseudoType.t option;
          [@key "pseudoType"]
          [@yojson.option]
          [@ocaml.doc "Pseudo element type for this node."]
      pseudoIdentifier : string option;
          [@key "pseudoIdentifier"]
          [@yojson.option]
          [@ocaml.doc
            "Pseudo element identifier for this node. Only present if there is a\n\
             valid pseudoType."]
      shadowRootType : ShadowRootType.t option;
          [@key "shadowRootType"]
          [@yojson.option]
          [@ocaml.doc "Shadow root type."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc "Frame ID for frame owner elements."]
      contentDocument : Node.t option;
          [@key "contentDocument"]
          [@yojson.option]
          [@ocaml.doc "Content document for frame owner elements."]
      shadowRoots : Node.t list option;
          [@key "shadowRoots"]
          [@yojson.option]
          [@ocaml.doc "Shadow root list for given element host."]
      templateContent : Node.t option;
          [@key "templateContent"]
          [@yojson.option]
          [@ocaml.doc "Content document fragment for template elements."]
      pseudoElements : Node.t list option;
          [@key "pseudoElements"]
          [@yojson.option]
          [@ocaml.doc "Pseudo elements associated with this node."]
      importedDocument : Node.t option;
          [@key "importedDocument"]
          [@yojson.option]
          [@ocaml.doc
            "Deprecated, as the HTML Imports API has been removed \
             (crbug.com/937746).\n\
             This property used to return the imported document for the \
             HTMLImport links.\n\
             The property is always undefined now."]
      distributedNodes : BackendNode.t list option;
          [@key "distributedNodes"]
          [@yojson.option]
          [@ocaml.doc "Distributed nodes for given insertion point."]
      isSVG : bool option;
          [@key "isSVG"]
          [@yojson.option]
          [@ocaml.doc "Whether the node is SVG."]
      compatibilityMode : CompatibilityMode.t option;
          [@key "compatibilityMode"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      assignedSlot : BackendNode.t option;
          [@key "assignedSlot"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "DOM interaction is implemented in terms of mirror objects that \
       represent the actual DOM nodes.\n\
       DOMNode is a base node mirror type."]
  end

  and RGBA : sig
    type t = {
      r : number;
          [@key "r"] [@ocaml.doc "The red component, in the [0-255] range."]
      g : number;
          [@key "g"] [@ocaml.doc "The green component, in the [0-255] range."]
      b : number;
          [@key "b"] [@ocaml.doc "The blue component, in the [0-255] range."]
      a : number option;
          [@key "a"]
          [@yojson.option]
          [@ocaml.doc "The alpha component, in the [0-1] range (default: 1)."]
    }
    [@@deriving yojson] [@@ocaml.doc "A structure holding an RGBA color."]
  end

  and Quad : sig
    type t = number list
    [@@deriving yojson]
    [@@ocaml.doc
      "An array of quad vertices, x immediately followed by y for each point, \
       points clock-wise."]
  end

  and BoxModel : sig
    type t = {
      content : Quad.t; [@key "content"] [@ocaml.doc "Content box"]
      padding : Quad.t; [@key "padding"] [@ocaml.doc "Padding box"]
      border : Quad.t; [@key "border"] [@ocaml.doc "Border box"]
      margin : Quad.t; [@key "margin"] [@ocaml.doc "Margin box"]
      width : number; [@key "width"] [@ocaml.doc "Node width"]
      height : number; [@key "height"] [@ocaml.doc "Node height"]
      shapeOutside : ShapeOutsideInfo.t option;
          [@key "shapeOutside"]
          [@yojson.option]
          [@ocaml.doc "Shape outside coordinates"]
    }
    [@@deriving yojson] [@@ocaml.doc "Box model."]
  end

  and ShapeOutsideInfo : sig
    type t = {
      bounds : Quad.t; [@key "bounds"] [@ocaml.doc "Shape bounds"]
      shape : string list;
          [@key "shape"] [@ocaml.doc "Shape coordinate details"]
      marginShape : string list;
          [@key "marginShape"] [@ocaml.doc "Margin shape bounds"]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Shape Outside details."]
  end

  and Rect : sig
    type t = {
      x : number; [@key "x"] [@ocaml.doc "X coordinate"]
      y : number; [@key "y"] [@ocaml.doc "Y coordinate"]
      width : number; [@key "width"] [@ocaml.doc "Rectangle width"]
      height : number; [@key "height"] [@ocaml.doc "Rectangle height"]
    }
    [@@deriving yojson] [@@ocaml.doc "Rectangle."]
  end

  and CSSComputedStyleProperty : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Computed style property name."]
      value : string;
          [@key "value"] [@ocaml.doc "Computed style property value."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec NodeId : sig
    type t = number
    [@@deriving yojson] [@@ocaml.doc "Unique DOM node identifier."]
  end = struct
    type t = number
    [@@deriving yojson] [@@ocaml.doc "Unique DOM node identifier."]
  end

  and BackendNodeId : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc
      "Unique DOM node identifier used to reference a node that may not have \
       been pushed to the\n\
       front-end."]
  end = struct
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc
      "Unique DOM node identifier used to reference a node that may not have \
       been pushed to the\n\
       front-end."]
  end

  and BackendNode : sig
    type t = {
      nodeType : number; [@key "nodeType"] [@ocaml.doc "`Node`'s nodeType."]
      nodeName : string; [@key "nodeName"] [@ocaml.doc "`Node`'s nodeName."]
      backendNodeId : BackendNodeId.t;
          [@key "backendNodeId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Backend node with a friendly name."]
  end = struct
    type t = {
      nodeType : number; [@key "nodeType"] [@ocaml.doc "`Node`'s nodeType."]
      nodeName : string; [@key "nodeName"] [@ocaml.doc "`Node`'s nodeName."]
      backendNodeId : BackendNodeId.t;
          [@key "backendNodeId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Backend node with a friendly name."]
  end

  and PseudoType : sig
    type _pseudotype =
      [ `first_line
      | `first_letter
      | `before
      | `after
      | `marker
      | `backdrop
      | `selection
      | `target_text
      | `spelling_error
      | `grammar_error
      | `highlight
      | `first_line_inherited
      | `scrollbar
      | `scrollbar_thumb
      | `scrollbar_button
      | `scrollbar_track
      | `scrollbar_track_piece
      | `scrollbar_corner
      | `resizer
      | `input_list_button
      | `view_transition
      | `view_transition_group
      | `view_transition_image_pair
      | `view_transition_old
      | `view_transition_new ]

    val _pseudotype_of_yojson : Yojson.Basic.t -> _pseudotype
    val yojson_of__pseudotype : _pseudotype -> Yojson.Basic.t

    type t = _pseudotype
    [@@deriving yojson] [@@ocaml.doc "Pseudo element type."]
  end = struct
    type _pseudotype =
      [ `first_line
      | `first_letter
      | `before
      | `after
      | `marker
      | `backdrop
      | `selection
      | `target_text
      | `spelling_error
      | `grammar_error
      | `highlight
      | `first_line_inherited
      | `scrollbar
      | `scrollbar_thumb
      | `scrollbar_button
      | `scrollbar_track
      | `scrollbar_track_piece
      | `scrollbar_corner
      | `resizer
      | `input_list_button
      | `view_transition
      | `view_transition_group
      | `view_transition_image_pair
      | `view_transition_old
      | `view_transition_new ]

    let _pseudotype_of_yojson = function
      | `String "first-line" -> `first_line
      | `String "first-letter" -> `first_letter
      | `String "before" -> `before
      | `String "after" -> `after
      | `String "marker" -> `marker
      | `String "backdrop" -> `backdrop
      | `String "selection" -> `selection
      | `String "target-text" -> `target_text
      | `String "spelling-error" -> `spelling_error
      | `String "grammar-error" -> `grammar_error
      | `String "highlight" -> `highlight
      | `String "first-line-inherited" -> `first_line_inherited
      | `String "scrollbar" -> `scrollbar
      | `String "scrollbar-thumb" -> `scrollbar_thumb
      | `String "scrollbar-button" -> `scrollbar_button
      | `String "scrollbar-track" -> `scrollbar_track
      | `String "scrollbar-track-piece" -> `scrollbar_track_piece
      | `String "scrollbar-corner" -> `scrollbar_corner
      | `String "resizer" -> `resizer
      | `String "input-list-button" -> `input_list_button
      | `String "view-transition" -> `view_transition
      | `String "view-transition-group" -> `view_transition_group
      | `String "view-transition-image-pair" -> `view_transition_image_pair
      | `String "view-transition-old" -> `view_transition_old
      | `String "view-transition-new" -> `view_transition_new
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__pseudotype = function
      | `first_line -> `String "first-line"
      | `first_letter -> `String "first-letter"
      | `before -> `String "before"
      | `after -> `String "after"
      | `marker -> `String "marker"
      | `backdrop -> `String "backdrop"
      | `selection -> `String "selection"
      | `target_text -> `String "target-text"
      | `spelling_error -> `String "spelling-error"
      | `grammar_error -> `String "grammar-error"
      | `highlight -> `String "highlight"
      | `first_line_inherited -> `String "first-line-inherited"
      | `scrollbar -> `String "scrollbar"
      | `scrollbar_thumb -> `String "scrollbar-thumb"
      | `scrollbar_button -> `String "scrollbar-button"
      | `scrollbar_track -> `String "scrollbar-track"
      | `scrollbar_track_piece -> `String "scrollbar-track-piece"
      | `scrollbar_corner -> `String "scrollbar-corner"
      | `resizer -> `String "resizer"
      | `input_list_button -> `String "input-list-button"
      | `view_transition -> `String "view-transition"
      | `view_transition_group -> `String "view-transition-group"
      | `view_transition_image_pair -> `String "view-transition-image-pair"
      | `view_transition_old -> `String "view-transition-old"
      | `view_transition_new -> `String "view-transition-new"

    type t = _pseudotype
    [@@deriving yojson] [@@ocaml.doc "Pseudo element type."]
  end

  and ShadowRootType : sig
    type _shadowroottype = [ `user_agent | `open_ | `closed ]

    val _shadowroottype_of_yojson : Yojson.Basic.t -> _shadowroottype
    val yojson_of__shadowroottype : _shadowroottype -> Yojson.Basic.t

    type t = _shadowroottype
    [@@deriving yojson] [@@ocaml.doc "Shadow root type."]
  end = struct
    type _shadowroottype = [ `user_agent | `open_ | `closed ]

    let _shadowroottype_of_yojson = function
      | `String "user-agent" -> `user_agent
      | `String "open" -> `open_
      | `String "closed" -> `closed
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__shadowroottype = function
      | `user_agent -> `String "user-agent"
      | `open_ -> `String "open"
      | `closed -> `String "closed"

    type t = _shadowroottype
    [@@deriving yojson] [@@ocaml.doc "Shadow root type."]
  end

  and CompatibilityMode : sig
    type _compatibilitymode =
      [ `QuirksMode | `LimitedQuirksMode | `NoQuirksMode ]

    val _compatibilitymode_of_yojson : Yojson.Basic.t -> _compatibilitymode
    val yojson_of__compatibilitymode : _compatibilitymode -> Yojson.Basic.t

    type t = _compatibilitymode
    [@@deriving yojson] [@@ocaml.doc "Document compatibility mode."]
  end = struct
    type _compatibilitymode =
      [ `QuirksMode | `LimitedQuirksMode | `NoQuirksMode ]

    let _compatibilitymode_of_yojson = function
      | `String "QuirksMode" -> `QuirksMode
      | `String "LimitedQuirksMode" -> `LimitedQuirksMode
      | `String "NoQuirksMode" -> `NoQuirksMode
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__compatibilitymode = function
      | `QuirksMode -> `String "QuirksMode"
      | `LimitedQuirksMode -> `String "LimitedQuirksMode"
      | `NoQuirksMode -> `String "NoQuirksMode"

    type t = _compatibilitymode
    [@@deriving yojson] [@@ocaml.doc "Document compatibility mode."]
  end

  and PhysicalAxes : sig
    type _physicalaxes = [ `Horizontal | `Vertical | `Both ]

    val _physicalaxes_of_yojson : Yojson.Basic.t -> _physicalaxes
    val yojson_of__physicalaxes : _physicalaxes -> Yojson.Basic.t

    type t = _physicalaxes
    [@@deriving yojson] [@@ocaml.doc "ContainerSelector physical axes"]
  end = struct
    type _physicalaxes = [ `Horizontal | `Vertical | `Both ]

    let _physicalaxes_of_yojson = function
      | `String "Horizontal" -> `Horizontal
      | `String "Vertical" -> `Vertical
      | `String "Both" -> `Both
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__physicalaxes = function
      | `Horizontal -> `String "Horizontal"
      | `Vertical -> `String "Vertical"
      | `Both -> `String "Both"

    type t = _physicalaxes
    [@@deriving yojson] [@@ocaml.doc "ContainerSelector physical axes"]
  end

  and LogicalAxes : sig
    type _logicalaxes = [ `Inline | `Block | `Both ]

    val _logicalaxes_of_yojson : Yojson.Basic.t -> _logicalaxes
    val yojson_of__logicalaxes : _logicalaxes -> Yojson.Basic.t

    type t = _logicalaxes
    [@@deriving yojson] [@@ocaml.doc "ContainerSelector logical axes"]
  end = struct
    type _logicalaxes = [ `Inline | `Block | `Both ]

    let _logicalaxes_of_yojson = function
      | `String "Inline" -> `Inline
      | `String "Block" -> `Block
      | `String "Both" -> `Both
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__logicalaxes = function
      | `Inline -> `String "Inline"
      | `Block -> `String "Block"
      | `Both -> `String "Both"

    type t = _logicalaxes
    [@@deriving yojson] [@@ocaml.doc "ContainerSelector logical axes"]
  end

  and Node : sig
    type t = {
      nodeId : NodeId.t;
          [@key "nodeId"]
          [@ocaml.doc
            "Node identifier that is passed into the rest of the DOM messages \
             as the `nodeId`. Backend\n\
             will only push node with given `id` once. It is aware of all \
             requested nodes and will only\n\
             fire DOM events for nodes known to the client."]
      parentId : NodeId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc "The id of the parent node if any."]
      backendNodeId : BackendNodeId.t;
          [@key "backendNodeId"] [@ocaml.doc "The BackendNodeId for this node."]
      nodeType : number; [@key "nodeType"] [@ocaml.doc "`Node`'s nodeType."]
      nodeName : string; [@key "nodeName"] [@ocaml.doc "`Node`'s nodeName."]
      localName : string; [@key "localName"] [@ocaml.doc "`Node`'s localName."]
      nodeValue : string; [@key "nodeValue"] [@ocaml.doc "`Node`'s nodeValue."]
      childNodeCount : number option;
          [@key "childNodeCount"]
          [@yojson.option]
          [@ocaml.doc "Child count for `Container` nodes."]
      children : Node.t list option;
          [@key "children"]
          [@yojson.option]
          [@ocaml.doc "Child nodes of this node when requested with children."]
      attributes : string list option;
          [@key "attributes"]
          [@yojson.option]
          [@ocaml.doc
            "Attributes of the `Element` node in the form of flat array \
             `[name1, value1, name2, value2]`."]
      documentURL : string option;
          [@key "documentURL"]
          [@yojson.option]
          [@ocaml.doc
            "Document URL that `Document` or `FrameOwner` node points to."]
      baseURL : string option;
          [@key "baseURL"]
          [@yojson.option]
          [@ocaml.doc
            "Base URL that `Document` or `FrameOwner` node uses for URL \
             completion."]
      publicId : string option;
          [@key "publicId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType`'s publicId."]
      systemId : string option;
          [@key "systemId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType`'s systemId."]
      internalSubset : string option;
          [@key "internalSubset"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType`'s internalSubset."]
      xmlVersion : string option;
          [@key "xmlVersion"]
          [@yojson.option]
          [@ocaml.doc "`Document`'s XML version in case of XML documents."]
      name : string option;
          [@key "name"] [@yojson.option] [@ocaml.doc "`Attr`'s name."]
      value : string option;
          [@key "value"] [@yojson.option] [@ocaml.doc "`Attr`'s value."]
      pseudoType : PseudoType.t option;
          [@key "pseudoType"]
          [@yojson.option]
          [@ocaml.doc "Pseudo element type for this node."]
      pseudoIdentifier : string option;
          [@key "pseudoIdentifier"]
          [@yojson.option]
          [@ocaml.doc
            "Pseudo element identifier for this node. Only present if there is a\n\
             valid pseudoType."]
      shadowRootType : ShadowRootType.t option;
          [@key "shadowRootType"]
          [@yojson.option]
          [@ocaml.doc "Shadow root type."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc "Frame ID for frame owner elements."]
      contentDocument : Node.t option;
          [@key "contentDocument"]
          [@yojson.option]
          [@ocaml.doc "Content document for frame owner elements."]
      shadowRoots : Node.t list option;
          [@key "shadowRoots"]
          [@yojson.option]
          [@ocaml.doc "Shadow root list for given element host."]
      templateContent : Node.t option;
          [@key "templateContent"]
          [@yojson.option]
          [@ocaml.doc "Content document fragment for template elements."]
      pseudoElements : Node.t list option;
          [@key "pseudoElements"]
          [@yojson.option]
          [@ocaml.doc "Pseudo elements associated with this node."]
      importedDocument : Node.t option;
          [@key "importedDocument"]
          [@yojson.option]
          [@ocaml.doc
            "Deprecated, as the HTML Imports API has been removed \
             (crbug.com/937746).\n\
             This property used to return the imported document for the \
             HTMLImport links.\n\
             The property is always undefined now."]
      distributedNodes : BackendNode.t list option;
          [@key "distributedNodes"]
          [@yojson.option]
          [@ocaml.doc "Distributed nodes for given insertion point."]
      isSVG : bool option;
          [@key "isSVG"]
          [@yojson.option]
          [@ocaml.doc "Whether the node is SVG."]
      compatibilityMode : CompatibilityMode.t option;
          [@key "compatibilityMode"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      assignedSlot : BackendNode.t option;
          [@key "assignedSlot"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "DOM interaction is implemented in terms of mirror objects that \
       represent the actual DOM nodes.\n\
       DOMNode is a base node mirror type."]
  end = struct
    type t = {
      nodeId : NodeId.t;
          [@key "nodeId"]
          [@ocaml.doc
            "Node identifier that is passed into the rest of the DOM messages \
             as the `nodeId`. Backend\n\
             will only push node with given `id` once. It is aware of all \
             requested nodes and will only\n\
             fire DOM events for nodes known to the client."]
      parentId : NodeId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc "The id of the parent node if any."]
      backendNodeId : BackendNodeId.t;
          [@key "backendNodeId"] [@ocaml.doc "The BackendNodeId for this node."]
      nodeType : number; [@key "nodeType"] [@ocaml.doc "`Node`'s nodeType."]
      nodeName : string; [@key "nodeName"] [@ocaml.doc "`Node`'s nodeName."]
      localName : string; [@key "localName"] [@ocaml.doc "`Node`'s localName."]
      nodeValue : string; [@key "nodeValue"] [@ocaml.doc "`Node`'s nodeValue."]
      childNodeCount : number option;
          [@key "childNodeCount"]
          [@yojson.option]
          [@ocaml.doc "Child count for `Container` nodes."]
      children : Node.t list option;
          [@key "children"]
          [@yojson.option]
          [@ocaml.doc "Child nodes of this node when requested with children."]
      attributes : string list option;
          [@key "attributes"]
          [@yojson.option]
          [@ocaml.doc
            "Attributes of the `Element` node in the form of flat array \
             `[name1, value1, name2, value2]`."]
      documentURL : string option;
          [@key "documentURL"]
          [@yojson.option]
          [@ocaml.doc
            "Document URL that `Document` or `FrameOwner` node points to."]
      baseURL : string option;
          [@key "baseURL"]
          [@yojson.option]
          [@ocaml.doc
            "Base URL that `Document` or `FrameOwner` node uses for URL \
             completion."]
      publicId : string option;
          [@key "publicId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType`'s publicId."]
      systemId : string option;
          [@key "systemId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType`'s systemId."]
      internalSubset : string option;
          [@key "internalSubset"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType`'s internalSubset."]
      xmlVersion : string option;
          [@key "xmlVersion"]
          [@yojson.option]
          [@ocaml.doc "`Document`'s XML version in case of XML documents."]
      name : string option;
          [@key "name"] [@yojson.option] [@ocaml.doc "`Attr`'s name."]
      value : string option;
          [@key "value"] [@yojson.option] [@ocaml.doc "`Attr`'s value."]
      pseudoType : PseudoType.t option;
          [@key "pseudoType"]
          [@yojson.option]
          [@ocaml.doc "Pseudo element type for this node."]
      pseudoIdentifier : string option;
          [@key "pseudoIdentifier"]
          [@yojson.option]
          [@ocaml.doc
            "Pseudo element identifier for this node. Only present if there is a\n\
             valid pseudoType."]
      shadowRootType : ShadowRootType.t option;
          [@key "shadowRootType"]
          [@yojson.option]
          [@ocaml.doc "Shadow root type."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc "Frame ID for frame owner elements."]
      contentDocument : Node.t option;
          [@key "contentDocument"]
          [@yojson.option]
          [@ocaml.doc "Content document for frame owner elements."]
      shadowRoots : Node.t list option;
          [@key "shadowRoots"]
          [@yojson.option]
          [@ocaml.doc "Shadow root list for given element host."]
      templateContent : Node.t option;
          [@key "templateContent"]
          [@yojson.option]
          [@ocaml.doc "Content document fragment for template elements."]
      pseudoElements : Node.t list option;
          [@key "pseudoElements"]
          [@yojson.option]
          [@ocaml.doc "Pseudo elements associated with this node."]
      importedDocument : Node.t option;
          [@key "importedDocument"]
          [@yojson.option]
          [@ocaml.doc
            "Deprecated, as the HTML Imports API has been removed \
             (crbug.com/937746).\n\
             This property used to return the imported document for the \
             HTMLImport links.\n\
             The property is always undefined now."]
      distributedNodes : BackendNode.t list option;
          [@key "distributedNodes"]
          [@yojson.option]
          [@ocaml.doc "Distributed nodes for given insertion point."]
      isSVG : bool option;
          [@key "isSVG"]
          [@yojson.option]
          [@ocaml.doc "Whether the node is SVG."]
      compatibilityMode : CompatibilityMode.t option;
          [@key "compatibilityMode"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      assignedSlot : BackendNode.t option;
          [@key "assignedSlot"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "DOM interaction is implemented in terms of mirror objects that \
       represent the actual DOM nodes.\n\
       DOMNode is a base node mirror type."]
  end

  and RGBA : sig
    type t = {
      r : number;
          [@key "r"] [@ocaml.doc "The red component, in the [0-255] range."]
      g : number;
          [@key "g"] [@ocaml.doc "The green component, in the [0-255] range."]
      b : number;
          [@key "b"] [@ocaml.doc "The blue component, in the [0-255] range."]
      a : number option;
          [@key "a"]
          [@yojson.option]
          [@ocaml.doc "The alpha component, in the [0-1] range (default: 1)."]
    }
    [@@deriving yojson] [@@ocaml.doc "A structure holding an RGBA color."]
  end = struct
    type t = {
      r : number;
          [@key "r"] [@ocaml.doc "The red component, in the [0-255] range."]
      g : number;
          [@key "g"] [@ocaml.doc "The green component, in the [0-255] range."]
      b : number;
          [@key "b"] [@ocaml.doc "The blue component, in the [0-255] range."]
      a : number option;
          [@key "a"]
          [@yojson.option]
          [@ocaml.doc "The alpha component, in the [0-1] range (default: 1)."]
    }
    [@@deriving yojson] [@@ocaml.doc "A structure holding an RGBA color."]
  end

  and Quad : sig
    type t = number list
    [@@deriving yojson]
    [@@ocaml.doc
      "An array of quad vertices, x immediately followed by y for each point, \
       points clock-wise."]
  end = struct
    type t = number list
    [@@deriving yojson]
    [@@ocaml.doc
      "An array of quad vertices, x immediately followed by y for each point, \
       points clock-wise."]
  end

  and BoxModel : sig
    type t = {
      content : Quad.t; [@key "content"] [@ocaml.doc "Content box"]
      padding : Quad.t; [@key "padding"] [@ocaml.doc "Padding box"]
      border : Quad.t; [@key "border"] [@ocaml.doc "Border box"]
      margin : Quad.t; [@key "margin"] [@ocaml.doc "Margin box"]
      width : number; [@key "width"] [@ocaml.doc "Node width"]
      height : number; [@key "height"] [@ocaml.doc "Node height"]
      shapeOutside : ShapeOutsideInfo.t option;
          [@key "shapeOutside"]
          [@yojson.option]
          [@ocaml.doc "Shape outside coordinates"]
    }
    [@@deriving yojson] [@@ocaml.doc "Box model."]
  end = struct
    type t = {
      content : Quad.t; [@key "content"] [@ocaml.doc "Content box"]
      padding : Quad.t; [@key "padding"] [@ocaml.doc "Padding box"]
      border : Quad.t; [@key "border"] [@ocaml.doc "Border box"]
      margin : Quad.t; [@key "margin"] [@ocaml.doc "Margin box"]
      width : number; [@key "width"] [@ocaml.doc "Node width"]
      height : number; [@key "height"] [@ocaml.doc "Node height"]
      shapeOutside : ShapeOutsideInfo.t option;
          [@key "shapeOutside"]
          [@yojson.option]
          [@ocaml.doc "Shape outside coordinates"]
    }
    [@@deriving yojson] [@@ocaml.doc "Box model."]
  end

  and ShapeOutsideInfo : sig
    type t = {
      bounds : Quad.t; [@key "bounds"] [@ocaml.doc "Shape bounds"]
      shape : string list;
          [@key "shape"] [@ocaml.doc "Shape coordinate details"]
      marginShape : string list;
          [@key "marginShape"] [@ocaml.doc "Margin shape bounds"]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Shape Outside details."]
  end = struct
    type t = {
      bounds : Quad.t; [@key "bounds"] [@ocaml.doc "Shape bounds"]
      shape : string list;
          [@key "shape"] [@ocaml.doc "Shape coordinate details"]
      marginShape : string list;
          [@key "marginShape"] [@ocaml.doc "Margin shape bounds"]
    }
    [@@deriving yojson] [@@ocaml.doc "CSS Shape Outside details."]
  end

  and Rect : sig
    type t = {
      x : number; [@key "x"] [@ocaml.doc "X coordinate"]
      y : number; [@key "y"] [@ocaml.doc "Y coordinate"]
      width : number; [@key "width"] [@ocaml.doc "Rectangle width"]
      height : number; [@key "height"] [@ocaml.doc "Rectangle height"]
    }
    [@@deriving yojson] [@@ocaml.doc "Rectangle."]
  end = struct
    type t = {
      x : number; [@key "x"] [@ocaml.doc "X coordinate"]
      y : number; [@key "y"] [@ocaml.doc "Y coordinate"]
      width : number; [@key "width"] [@ocaml.doc "Rectangle width"]
      height : number; [@key "height"] [@ocaml.doc "Rectangle height"]
    }
    [@@deriving yojson] [@@ocaml.doc "Rectangle."]
  end

  and CSSComputedStyleProperty : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Computed style property name."]
      value : string;
          [@key "value"] [@ocaml.doc "Computed style property value."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Computed style property name."]
      value : string;
          [@key "value"] [@ocaml.doc "Computed style property value."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and DOMDebugger : sig
  module rec DOMBreakpointType : sig
    type _dombreakpointtype =
      [ `subtree_modified | `attribute_modified | `node_removed ]

    val _dombreakpointtype_of_yojson : Yojson.Basic.t -> _dombreakpointtype
    val yojson_of__dombreakpointtype : _dombreakpointtype -> Yojson.Basic.t

    type t = _dombreakpointtype
    [@@deriving yojson] [@@ocaml.doc "DOM breakpoint type."]
  end

  and CSPViolationType : sig
    type _cspviolationtype =
      [ `trustedtype_sink_violation | `trustedtype_policy_violation ]

    val _cspviolationtype_of_yojson : Yojson.Basic.t -> _cspviolationtype
    val yojson_of__cspviolationtype : _cspviolationtype -> Yojson.Basic.t

    type t = _cspviolationtype
    [@@deriving yojson] [@@ocaml.doc "CSP Violation type."]
  end

  and EventListener : sig
    type t = {
      type_ : string; [@key "type"] [@ocaml.doc "`EventListener`'s type."]
      useCapture : bool;
          [@key "useCapture"] [@ocaml.doc "`EventListener`'s useCapture."]
      passive : bool;
          [@key "passive"] [@ocaml.doc "`EventListener`'s passive flag."]
      once : bool; [@key "once"] [@ocaml.doc "`EventListener`'s once flag."]
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "Script id of the handler code."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number in the script (0-based)."]
      columnNumber : number;
          [@key "columnNumber"]
          [@ocaml.doc "Column number in the script (0-based)."]
      handler : Runtime.RemoteObject.t option;
          [@key "handler"]
          [@yojson.option]
          [@ocaml.doc "Event handler function value."]
      originalHandler : Runtime.RemoteObject.t option;
          [@key "originalHandler"]
          [@yojson.option]
          [@ocaml.doc "Event original handler function value."]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "Node the listener is added to (if any)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object event listener."]
  end
end = struct
  module rec DOMBreakpointType : sig
    type _dombreakpointtype =
      [ `subtree_modified | `attribute_modified | `node_removed ]

    val _dombreakpointtype_of_yojson : Yojson.Basic.t -> _dombreakpointtype
    val yojson_of__dombreakpointtype : _dombreakpointtype -> Yojson.Basic.t

    type t = _dombreakpointtype
    [@@deriving yojson] [@@ocaml.doc "DOM breakpoint type."]
  end = struct
    type _dombreakpointtype =
      [ `subtree_modified | `attribute_modified | `node_removed ]

    let _dombreakpointtype_of_yojson = function
      | `String "subtree-modified" -> `subtree_modified
      | `String "attribute-modified" -> `attribute_modified
      | `String "node-removed" -> `node_removed
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__dombreakpointtype = function
      | `subtree_modified -> `String "subtree-modified"
      | `attribute_modified -> `String "attribute-modified"
      | `node_removed -> `String "node-removed"

    type t = _dombreakpointtype
    [@@deriving yojson] [@@ocaml.doc "DOM breakpoint type."]
  end

  and CSPViolationType : sig
    type _cspviolationtype =
      [ `trustedtype_sink_violation | `trustedtype_policy_violation ]

    val _cspviolationtype_of_yojson : Yojson.Basic.t -> _cspviolationtype
    val yojson_of__cspviolationtype : _cspviolationtype -> Yojson.Basic.t

    type t = _cspviolationtype
    [@@deriving yojson] [@@ocaml.doc "CSP Violation type."]
  end = struct
    type _cspviolationtype =
      [ `trustedtype_sink_violation | `trustedtype_policy_violation ]

    let _cspviolationtype_of_yojson = function
      | `String "trustedtype-sink-violation" -> `trustedtype_sink_violation
      | `String "trustedtype-policy-violation" -> `trustedtype_policy_violation
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cspviolationtype = function
      | `trustedtype_sink_violation -> `String "trustedtype-sink-violation"
      | `trustedtype_policy_violation -> `String "trustedtype-policy-violation"

    type t = _cspviolationtype
    [@@deriving yojson] [@@ocaml.doc "CSP Violation type."]
  end

  and EventListener : sig
    type t = {
      type_ : string; [@key "type"] [@ocaml.doc "`EventListener`'s type."]
      useCapture : bool;
          [@key "useCapture"] [@ocaml.doc "`EventListener`'s useCapture."]
      passive : bool;
          [@key "passive"] [@ocaml.doc "`EventListener`'s passive flag."]
      once : bool; [@key "once"] [@ocaml.doc "`EventListener`'s once flag."]
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "Script id of the handler code."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number in the script (0-based)."]
      columnNumber : number;
          [@key "columnNumber"]
          [@ocaml.doc "Column number in the script (0-based)."]
      handler : Runtime.RemoteObject.t option;
          [@key "handler"]
          [@yojson.option]
          [@ocaml.doc "Event handler function value."]
      originalHandler : Runtime.RemoteObject.t option;
          [@key "originalHandler"]
          [@yojson.option]
          [@ocaml.doc "Event original handler function value."]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "Node the listener is added to (if any)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object event listener."]
  end = struct
    type t = {
      type_ : string; [@key "type"] [@ocaml.doc "`EventListener`'s type."]
      useCapture : bool;
          [@key "useCapture"] [@ocaml.doc "`EventListener`'s useCapture."]
      passive : bool;
          [@key "passive"] [@ocaml.doc "`EventListener`'s passive flag."]
      once : bool; [@key "once"] [@ocaml.doc "`EventListener`'s once flag."]
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "Script id of the handler code."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number in the script (0-based)."]
      columnNumber : number;
          [@key "columnNumber"]
          [@ocaml.doc "Column number in the script (0-based)."]
      handler : Runtime.RemoteObject.t option;
          [@key "handler"]
          [@yojson.option]
          [@ocaml.doc "Event handler function value."]
      originalHandler : Runtime.RemoteObject.t option;
          [@key "originalHandler"]
          [@yojson.option]
          [@ocaml.doc "Event original handler function value."]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "Node the listener is added to (if any)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object event listener."]
  end
end

and DOMSnapshot : sig
  module rec DOMNode : sig
    type t = {
      nodeType : number; [@key "nodeType"] [@ocaml.doc "`Node`'s nodeType."]
      nodeName : string; [@key "nodeName"] [@ocaml.doc "`Node`'s nodeName."]
      nodeValue : string; [@key "nodeValue"] [@ocaml.doc "`Node`'s nodeValue."]
      textValue : string option;
          [@key "textValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for textarea elements, contains the text value."]
      inputValue : string option;
          [@key "inputValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for input elements, contains the input's associated text \
             value."]
      inputChecked : bool option;
          [@key "inputChecked"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for radio and checkbox input elements, indicates if the \
             element has been checked"]
      optionSelected : bool option;
          [@key "optionSelected"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for option elements, indicates if the element has been \
             selected"]
      backendNodeId : DOM.BackendNodeId.t;
          [@key "backendNodeId"]
          [@ocaml.doc "`Node`'s id, corresponds to DOM.Node.backendNodeId."]
      childNodeIndexes : number list option;
          [@key "childNodeIndexes"]
          [@yojson.option]
          [@ocaml.doc
            "The indexes of the node's child nodes in the `domNodes` array \
             returned by `getSnapshot`, if\n\
             any."]
      attributes : NameValue.t list option;
          [@key "attributes"]
          [@yojson.option]
          [@ocaml.doc "Attributes of an `Element` node."]
      pseudoElementIndexes : number list option;
          [@key "pseudoElementIndexes"]
          [@yojson.option]
          [@ocaml.doc
            "Indexes of pseudo elements associated with this node in the \
             `domNodes` array returned by\n\
             `getSnapshot`, if any."]
      layoutNodeIndex : number option;
          [@key "layoutNodeIndex"]
          [@yojson.option]
          [@ocaml.doc
            "The index of the node's related layout tree node in the \
             `layoutTreeNodes` array returned by\n\
             `getSnapshot`, if any."]
      documentURL : string option;
          [@key "documentURL"]
          [@yojson.option]
          [@ocaml.doc
            "Document URL that `Document` or `FrameOwner` node points to."]
      baseURL : string option;
          [@key "baseURL"]
          [@yojson.option]
          [@ocaml.doc
            "Base URL that `Document` or `FrameOwner` node uses for URL \
             completion."]
      contentLanguage : string option;
          [@key "contentLanguage"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for documents, contains the document's content language."]
      documentEncoding : string option;
          [@key "documentEncoding"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for documents, contains the document's character set \
             encoding."]
      publicId : string option;
          [@key "publicId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType` node's publicId."]
      systemId : string option;
          [@key "systemId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType` node's systemId."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc
            "Frame ID for frame owner elements and also for the document node."]
      contentDocumentIndex : number option;
          [@key "contentDocumentIndex"]
          [@yojson.option]
          [@ocaml.doc
            "The index of a frame owner element's content document in the \
             `domNodes` array returned by\n\
             `getSnapshot`, if any."]
      pseudoType : DOM.PseudoType.t option;
          [@key "pseudoType"]
          [@yojson.option]
          [@ocaml.doc "Type of a pseudo element node."]
      shadowRootType : DOM.ShadowRootType.t option;
          [@key "shadowRootType"]
          [@yojson.option]
          [@ocaml.doc "Shadow root type."]
      isClickable : bool option;
          [@key "isClickable"]
          [@yojson.option]
          [@ocaml.doc
            "Whether this DOM node responds to mouse clicks. This includes \
             nodes that have had click\n\
             event listeners attached via JavaScript as well as anchor tags \
             that naturally navigate when\n\
             clicked."]
      eventListeners : DOMDebugger.EventListener.t list option;
          [@key "eventListeners"]
          [@yojson.option]
          [@ocaml.doc "Details of the node's event listeners, if any."]
      currentSourceURL : string option;
          [@key "currentSourceURL"]
          [@yojson.option]
          [@ocaml.doc "The selected url for nodes with a srcset attribute."]
      originURL : string option;
          [@key "originURL"]
          [@yojson.option]
          [@ocaml.doc
            "The url of the script (if any) that generates this node."]
      scrollOffsetX : number option;
          [@key "scrollOffsetX"]
          [@yojson.option]
          [@ocaml.doc "Scroll offsets, set when this node is a Document."]
      scrollOffsetY : number option;
          [@key "scrollOffsetY"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "A Node in the DOM tree."]
  end

  and InlineTextBox : sig
    type t = {
      boundingBox : DOM.Rect.t;
          [@key "boundingBox"]
          [@ocaml.doc
            "The bounding box in document coordinates. Note that scroll offset \
             of the document is ignored."]
      startCharacterIndex : number;
          [@key "startCharacterIndex"]
          [@ocaml.doc
            "The starting index in characters, for this post layout textbox \
             substring. Characters that\n\
             would be represented as a surrogate pair in UTF-16 have length 2."]
      numCharacters : number;
          [@key "numCharacters"]
          [@ocaml.doc
            "The number of characters in this post layout textbox substring. \
             Characters that would be\n\
             represented as a surrogate pair in UTF-16 have length 2."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details of post layout rendered text positions. The exact layout should \
       not be regarded as\n\
       stable and may change between versions."]
  end

  and LayoutTreeNode : sig
    type t = {
      domNodeIndex : number;
          [@key "domNodeIndex"]
          [@ocaml.doc
            "The index of the related DOM node in the `domNodes` array \
             returned by `getSnapshot`."]
      boundingBox : DOM.Rect.t;
          [@key "boundingBox"]
          [@ocaml.doc
            "The bounding box in document coordinates. Note that scroll offset \
             of the document is ignored."]
      layoutText : string option;
          [@key "layoutText"]
          [@yojson.option]
          [@ocaml.doc "Contents of the LayoutText, if any."]
      inlineTextNodes : InlineTextBox.t list option;
          [@key "inlineTextNodes"]
          [@yojson.option]
          [@ocaml.doc "The post-layout inline text nodes, if any."]
      styleIndex : number option;
          [@key "styleIndex"]
          [@yojson.option]
          [@ocaml.doc
            "Index into the `computedStyles` array returned by `getSnapshot`."]
      paintOrder : number option;
          [@key "paintOrder"]
          [@yojson.option]
          [@ocaml.doc
            "Global paint order index, which is determined by the stacking \
             order of the nodes. Nodes\n\
             that are painted together will have the same index. Only provided \
             if includePaintOrder in\n\
             getSnapshot was true."]
      isStackingContext : bool option;
          [@key "isStackingContext"]
          [@yojson.option]
          [@ocaml.doc
            "Set to true to indicate the element begins a new stacking context."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Details of an element in the DOM tree with a LayoutObject."]
  end

  and ComputedStyle : sig
    type t = {
      properties : NameValue.t list;
          [@key "properties"]
          [@ocaml.doc "Name/value pairs of computed style properties."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A subset of the full ComputedStyle as defined by the request whitelist."]
  end

  and NameValue : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Attribute/property name."]
      value : string; [@key "value"] [@ocaml.doc "Attribute/property value."]
    }
    [@@deriving yojson] [@@ocaml.doc "A name/value pair."]
  end

  and StringIndex : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc "Index of the string in the strings table."]
  end

  and ArrayOfStrings : sig
    type t = StringIndex.t list
    [@@deriving yojson]
    [@@ocaml.doc "Index of the string in the strings table."]
  end

  and RareStringData : sig
    type t = {
      index : number list; [@key "index"] [@ocaml.doc "No description provided"]
      value : StringIndex.t list;
          [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Data that is only present on rare nodes."]
  end

  and RareBooleanData : sig
    type t = {
      index : number list; [@key "index"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and RareIntegerData : sig
    type t = {
      index : number list; [@key "index"] [@ocaml.doc "No description provided"]
      value : number list; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Rectangle : sig
    type t = number list
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and DocumentSnapshot : sig
    type t = {
      documentURL : StringIndex.t;
          [@key "documentURL"]
          [@ocaml.doc
            "Document URL that `Document` or `FrameOwner` node points to."]
      title : StringIndex.t; [@key "title"] [@ocaml.doc "Document title."]
      baseURL : StringIndex.t;
          [@key "baseURL"]
          [@ocaml.doc
            "Base URL that `Document` or `FrameOwner` node uses for URL \
             completion."]
      contentLanguage : StringIndex.t;
          [@key "contentLanguage"]
          [@ocaml.doc "Contains the document's content language."]
      encodingName : StringIndex.t;
          [@key "encodingName"]
          [@ocaml.doc "Contains the document's character set encoding."]
      publicId : StringIndex.t;
          [@key "publicId"] [@ocaml.doc "`DocumentType` node's publicId."]
      systemId : StringIndex.t;
          [@key "systemId"] [@ocaml.doc "`DocumentType` node's systemId."]
      frameId : StringIndex.t;
          [@key "frameId"]
          [@ocaml.doc
            "Frame ID for frame owner elements and also for the document node."]
      nodes : NodeTreeSnapshot.t;
          [@key "nodes"] [@ocaml.doc "A table with dom nodes."]
      layout : LayoutTreeSnapshot.t;
          [@key "layout"] [@ocaml.doc "The nodes in the layout tree."]
      textBoxes : TextBoxSnapshot.t;
          [@key "textBoxes"] [@ocaml.doc "The post-layout inline text nodes."]
      scrollOffsetX : number option;
          [@key "scrollOffsetX"]
          [@yojson.option]
          [@ocaml.doc "Horizontal scroll offset."]
      scrollOffsetY : number option;
          [@key "scrollOffsetY"]
          [@yojson.option]
          [@ocaml.doc "Vertical scroll offset."]
      contentWidth : number option;
          [@key "contentWidth"]
          [@yojson.option]
          [@ocaml.doc "Document content width."]
      contentHeight : number option;
          [@key "contentHeight"]
          [@yojson.option]
          [@ocaml.doc "Document content height."]
    }
    [@@deriving yojson] [@@ocaml.doc "Document snapshot."]
  end

  and NodeTreeSnapshot : sig
    type t = {
      parentIndex : number list option;
          [@key "parentIndex"]
          [@yojson.option]
          [@ocaml.doc "Parent node index."]
      nodeType : number list option;
          [@key "nodeType"] [@yojson.option] [@ocaml.doc "`Node`'s nodeType."]
      shadowRootType : RareStringData.t option;
          [@key "shadowRootType"]
          [@yojson.option]
          [@ocaml.doc
            "Type of the shadow root the `Node` is in. String values are equal \
             to the `ShadowRootType` enum."]
      nodeName : StringIndex.t list option;
          [@key "nodeName"] [@yojson.option] [@ocaml.doc "`Node`'s nodeName."]
      nodeValue : StringIndex.t list option;
          [@key "nodeValue"] [@yojson.option] [@ocaml.doc "`Node`'s nodeValue."]
      backendNodeId : DOM.BackendNodeId.t list option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "`Node`'s id, corresponds to DOM.Node.backendNodeId."]
      attributes : ArrayOfStrings.t list option;
          [@key "attributes"]
          [@yojson.option]
          [@ocaml.doc
            "Attributes of an `Element` node. Flatten name, value pairs."]
      textValue : RareStringData.t option;
          [@key "textValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for textarea elements, contains the text value."]
      inputValue : RareStringData.t option;
          [@key "inputValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for input elements, contains the input's associated text \
             value."]
      inputChecked : RareBooleanData.t option;
          [@key "inputChecked"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for radio and checkbox input elements, indicates if the \
             element has been checked"]
      optionSelected : RareBooleanData.t option;
          [@key "optionSelected"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for option elements, indicates if the element has been \
             selected"]
      contentDocumentIndex : RareIntegerData.t option;
          [@key "contentDocumentIndex"]
          [@yojson.option]
          [@ocaml.doc
            "The index of the document in the list of the snapshot documents."]
      pseudoType : RareStringData.t option;
          [@key "pseudoType"]
          [@yojson.option]
          [@ocaml.doc "Type of a pseudo element node."]
      pseudoIdentifier : RareStringData.t option;
          [@key "pseudoIdentifier"]
          [@yojson.option]
          [@ocaml.doc
            "Pseudo element identifier for this node. Only present if there is a\n\
             valid pseudoType."]
      isClickable : RareBooleanData.t option;
          [@key "isClickable"]
          [@yojson.option]
          [@ocaml.doc
            "Whether this DOM node responds to mouse clicks. This includes \
             nodes that have had click\n\
             event listeners attached via JavaScript as well as anchor tags \
             that naturally navigate when\n\
             clicked."]
      currentSourceURL : RareStringData.t option;
          [@key "currentSourceURL"]
          [@yojson.option]
          [@ocaml.doc "The selected url for nodes with a srcset attribute."]
      originURL : RareStringData.t option;
          [@key "originURL"]
          [@yojson.option]
          [@ocaml.doc
            "The url of the script (if any) that generates this node."]
    }
    [@@deriving yojson] [@@ocaml.doc "Table containing nodes."]
  end

  and LayoutTreeSnapshot : sig
    type t = {
      nodeIndex : number list;
          [@key "nodeIndex"]
          [@ocaml.doc
            "Index of the corresponding node in the `NodeTreeSnapshot` array \
             returned by `captureSnapshot`."]
      styles : ArrayOfStrings.t list;
          [@key "styles"]
          [@ocaml.doc
            "Array of indexes specifying computed style strings, filtered \
             according to the `computedStyles` parameter passed to \
             `captureSnapshot`."]
      bounds : Rectangle.t list;
          [@key "bounds"] [@ocaml.doc "The absolute position bounding box."]
      text : StringIndex.t list;
          [@key "text"] [@ocaml.doc "Contents of the LayoutText, if any."]
      stackingContexts : RareBooleanData.t;
          [@key "stackingContexts"] [@ocaml.doc "Stacking context information."]
      paintOrders : number list option;
          [@key "paintOrders"]
          [@yojson.option]
          [@ocaml.doc
            "Global paint order index, which is determined by the stacking \
             order of the nodes. Nodes\n\
             that are painted together will have the same index. Only provided \
             if includePaintOrder in\n\
             captureSnapshot was true."]
      offsetRects : Rectangle.t list option;
          [@key "offsetRects"]
          [@yojson.option]
          [@ocaml.doc
            "The offset rect of nodes. Only available when includeDOMRects is \
             set to true"]
      scrollRects : Rectangle.t list option;
          [@key "scrollRects"]
          [@yojson.option]
          [@ocaml.doc
            "The scroll rect of nodes. Only available when includeDOMRects is \
             set to true"]
      clientRects : Rectangle.t list option;
          [@key "clientRects"]
          [@yojson.option]
          [@ocaml.doc
            "The client rect of nodes. Only available when includeDOMRects is \
             set to true"]
      blendedBackgroundColors : StringIndex.t list option;
          [@key "blendedBackgroundColors"]
          [@yojson.option]
          [@ocaml.doc
            "The list of background colors that are blended with colors of \
             overlapping elements."]
      textColorOpacities : number list option;
          [@key "textColorOpacities"]
          [@yojson.option]
          [@ocaml.doc "The list of computed text opacities."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Table of details of an element in the DOM tree with a LayoutObject."]
  end

  and TextBoxSnapshot : sig
    type t = {
      layoutIndex : number list;
          [@key "layoutIndex"]
          [@ocaml.doc
            "Index of the layout tree node that owns this box collection."]
      bounds : Rectangle.t list;
          [@key "bounds"] [@ocaml.doc "The absolute position bounding box."]
      start : number list;
          [@key "start"]
          [@ocaml.doc
            "The starting index in characters, for this post layout textbox \
             substring. Characters that\n\
             would be represented as a surrogate pair in UTF-16 have length 2."]
      length : number list;
          [@key "length"]
          [@ocaml.doc
            "The number of characters in this post layout textbox substring. \
             Characters that would be\n\
             represented as a surrogate pair in UTF-16 have length 2."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Table of details of the post layout rendered text positions. The exact \
       layout should not be regarded as\n\
       stable and may change between versions."]
  end
end = struct
  module rec DOMNode : sig
    type t = {
      nodeType : number; [@key "nodeType"] [@ocaml.doc "`Node`'s nodeType."]
      nodeName : string; [@key "nodeName"] [@ocaml.doc "`Node`'s nodeName."]
      nodeValue : string; [@key "nodeValue"] [@ocaml.doc "`Node`'s nodeValue."]
      textValue : string option;
          [@key "textValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for textarea elements, contains the text value."]
      inputValue : string option;
          [@key "inputValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for input elements, contains the input's associated text \
             value."]
      inputChecked : bool option;
          [@key "inputChecked"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for radio and checkbox input elements, indicates if the \
             element has been checked"]
      optionSelected : bool option;
          [@key "optionSelected"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for option elements, indicates if the element has been \
             selected"]
      backendNodeId : DOM.BackendNodeId.t;
          [@key "backendNodeId"]
          [@ocaml.doc "`Node`'s id, corresponds to DOM.Node.backendNodeId."]
      childNodeIndexes : number list option;
          [@key "childNodeIndexes"]
          [@yojson.option]
          [@ocaml.doc
            "The indexes of the node's child nodes in the `domNodes` array \
             returned by `getSnapshot`, if\n\
             any."]
      attributes : NameValue.t list option;
          [@key "attributes"]
          [@yojson.option]
          [@ocaml.doc "Attributes of an `Element` node."]
      pseudoElementIndexes : number list option;
          [@key "pseudoElementIndexes"]
          [@yojson.option]
          [@ocaml.doc
            "Indexes of pseudo elements associated with this node in the \
             `domNodes` array returned by\n\
             `getSnapshot`, if any."]
      layoutNodeIndex : number option;
          [@key "layoutNodeIndex"]
          [@yojson.option]
          [@ocaml.doc
            "The index of the node's related layout tree node in the \
             `layoutTreeNodes` array returned by\n\
             `getSnapshot`, if any."]
      documentURL : string option;
          [@key "documentURL"]
          [@yojson.option]
          [@ocaml.doc
            "Document URL that `Document` or `FrameOwner` node points to."]
      baseURL : string option;
          [@key "baseURL"]
          [@yojson.option]
          [@ocaml.doc
            "Base URL that `Document` or `FrameOwner` node uses for URL \
             completion."]
      contentLanguage : string option;
          [@key "contentLanguage"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for documents, contains the document's content language."]
      documentEncoding : string option;
          [@key "documentEncoding"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for documents, contains the document's character set \
             encoding."]
      publicId : string option;
          [@key "publicId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType` node's publicId."]
      systemId : string option;
          [@key "systemId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType` node's systemId."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc
            "Frame ID for frame owner elements and also for the document node."]
      contentDocumentIndex : number option;
          [@key "contentDocumentIndex"]
          [@yojson.option]
          [@ocaml.doc
            "The index of a frame owner element's content document in the \
             `domNodes` array returned by\n\
             `getSnapshot`, if any."]
      pseudoType : DOM.PseudoType.t option;
          [@key "pseudoType"]
          [@yojson.option]
          [@ocaml.doc "Type of a pseudo element node."]
      shadowRootType : DOM.ShadowRootType.t option;
          [@key "shadowRootType"]
          [@yojson.option]
          [@ocaml.doc "Shadow root type."]
      isClickable : bool option;
          [@key "isClickable"]
          [@yojson.option]
          [@ocaml.doc
            "Whether this DOM node responds to mouse clicks. This includes \
             nodes that have had click\n\
             event listeners attached via JavaScript as well as anchor tags \
             that naturally navigate when\n\
             clicked."]
      eventListeners : DOMDebugger.EventListener.t list option;
          [@key "eventListeners"]
          [@yojson.option]
          [@ocaml.doc "Details of the node's event listeners, if any."]
      currentSourceURL : string option;
          [@key "currentSourceURL"]
          [@yojson.option]
          [@ocaml.doc "The selected url for nodes with a srcset attribute."]
      originURL : string option;
          [@key "originURL"]
          [@yojson.option]
          [@ocaml.doc
            "The url of the script (if any) that generates this node."]
      scrollOffsetX : number option;
          [@key "scrollOffsetX"]
          [@yojson.option]
          [@ocaml.doc "Scroll offsets, set when this node is a Document."]
      scrollOffsetY : number option;
          [@key "scrollOffsetY"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "A Node in the DOM tree."]
  end = struct
    type t = {
      nodeType : number; [@key "nodeType"] [@ocaml.doc "`Node`'s nodeType."]
      nodeName : string; [@key "nodeName"] [@ocaml.doc "`Node`'s nodeName."]
      nodeValue : string; [@key "nodeValue"] [@ocaml.doc "`Node`'s nodeValue."]
      textValue : string option;
          [@key "textValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for textarea elements, contains the text value."]
      inputValue : string option;
          [@key "inputValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for input elements, contains the input's associated text \
             value."]
      inputChecked : bool option;
          [@key "inputChecked"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for radio and checkbox input elements, indicates if the \
             element has been checked"]
      optionSelected : bool option;
          [@key "optionSelected"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for option elements, indicates if the element has been \
             selected"]
      backendNodeId : DOM.BackendNodeId.t;
          [@key "backendNodeId"]
          [@ocaml.doc "`Node`'s id, corresponds to DOM.Node.backendNodeId."]
      childNodeIndexes : number list option;
          [@key "childNodeIndexes"]
          [@yojson.option]
          [@ocaml.doc
            "The indexes of the node's child nodes in the `domNodes` array \
             returned by `getSnapshot`, if\n\
             any."]
      attributes : NameValue.t list option;
          [@key "attributes"]
          [@yojson.option]
          [@ocaml.doc "Attributes of an `Element` node."]
      pseudoElementIndexes : number list option;
          [@key "pseudoElementIndexes"]
          [@yojson.option]
          [@ocaml.doc
            "Indexes of pseudo elements associated with this node in the \
             `domNodes` array returned by\n\
             `getSnapshot`, if any."]
      layoutNodeIndex : number option;
          [@key "layoutNodeIndex"]
          [@yojson.option]
          [@ocaml.doc
            "The index of the node's related layout tree node in the \
             `layoutTreeNodes` array returned by\n\
             `getSnapshot`, if any."]
      documentURL : string option;
          [@key "documentURL"]
          [@yojson.option]
          [@ocaml.doc
            "Document URL that `Document` or `FrameOwner` node points to."]
      baseURL : string option;
          [@key "baseURL"]
          [@yojson.option]
          [@ocaml.doc
            "Base URL that `Document` or `FrameOwner` node uses for URL \
             completion."]
      contentLanguage : string option;
          [@key "contentLanguage"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for documents, contains the document's content language."]
      documentEncoding : string option;
          [@key "documentEncoding"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for documents, contains the document's character set \
             encoding."]
      publicId : string option;
          [@key "publicId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType` node's publicId."]
      systemId : string option;
          [@key "systemId"]
          [@yojson.option]
          [@ocaml.doc "`DocumentType` node's systemId."]
      frameId : Page.FrameId.t option;
          [@key "frameId"]
          [@yojson.option]
          [@ocaml.doc
            "Frame ID for frame owner elements and also for the document node."]
      contentDocumentIndex : number option;
          [@key "contentDocumentIndex"]
          [@yojson.option]
          [@ocaml.doc
            "The index of a frame owner element's content document in the \
             `domNodes` array returned by\n\
             `getSnapshot`, if any."]
      pseudoType : DOM.PseudoType.t option;
          [@key "pseudoType"]
          [@yojson.option]
          [@ocaml.doc "Type of a pseudo element node."]
      shadowRootType : DOM.ShadowRootType.t option;
          [@key "shadowRootType"]
          [@yojson.option]
          [@ocaml.doc "Shadow root type."]
      isClickable : bool option;
          [@key "isClickable"]
          [@yojson.option]
          [@ocaml.doc
            "Whether this DOM node responds to mouse clicks. This includes \
             nodes that have had click\n\
             event listeners attached via JavaScript as well as anchor tags \
             that naturally navigate when\n\
             clicked."]
      eventListeners : DOMDebugger.EventListener.t list option;
          [@key "eventListeners"]
          [@yojson.option]
          [@ocaml.doc "Details of the node's event listeners, if any."]
      currentSourceURL : string option;
          [@key "currentSourceURL"]
          [@yojson.option]
          [@ocaml.doc "The selected url for nodes with a srcset attribute."]
      originURL : string option;
          [@key "originURL"]
          [@yojson.option]
          [@ocaml.doc
            "The url of the script (if any) that generates this node."]
      scrollOffsetX : number option;
          [@key "scrollOffsetX"]
          [@yojson.option]
          [@ocaml.doc "Scroll offsets, set when this node is a Document."]
      scrollOffsetY : number option;
          [@key "scrollOffsetY"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "A Node in the DOM tree."]
  end

  and InlineTextBox : sig
    type t = {
      boundingBox : DOM.Rect.t;
          [@key "boundingBox"]
          [@ocaml.doc
            "The bounding box in document coordinates. Note that scroll offset \
             of the document is ignored."]
      startCharacterIndex : number;
          [@key "startCharacterIndex"]
          [@ocaml.doc
            "The starting index in characters, for this post layout textbox \
             substring. Characters that\n\
             would be represented as a surrogate pair in UTF-16 have length 2."]
      numCharacters : number;
          [@key "numCharacters"]
          [@ocaml.doc
            "The number of characters in this post layout textbox substring. \
             Characters that would be\n\
             represented as a surrogate pair in UTF-16 have length 2."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details of post layout rendered text positions. The exact layout should \
       not be regarded as\n\
       stable and may change between versions."]
  end = struct
    type t = {
      boundingBox : DOM.Rect.t;
          [@key "boundingBox"]
          [@ocaml.doc
            "The bounding box in document coordinates. Note that scroll offset \
             of the document is ignored."]
      startCharacterIndex : number;
          [@key "startCharacterIndex"]
          [@ocaml.doc
            "The starting index in characters, for this post layout textbox \
             substring. Characters that\n\
             would be represented as a surrogate pair in UTF-16 have length 2."]
      numCharacters : number;
          [@key "numCharacters"]
          [@ocaml.doc
            "The number of characters in this post layout textbox substring. \
             Characters that would be\n\
             represented as a surrogate pair in UTF-16 have length 2."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Details of post layout rendered text positions. The exact layout should \
       not be regarded as\n\
       stable and may change between versions."]
  end

  and LayoutTreeNode : sig
    type t = {
      domNodeIndex : number;
          [@key "domNodeIndex"]
          [@ocaml.doc
            "The index of the related DOM node in the `domNodes` array \
             returned by `getSnapshot`."]
      boundingBox : DOM.Rect.t;
          [@key "boundingBox"]
          [@ocaml.doc
            "The bounding box in document coordinates. Note that scroll offset \
             of the document is ignored."]
      layoutText : string option;
          [@key "layoutText"]
          [@yojson.option]
          [@ocaml.doc "Contents of the LayoutText, if any."]
      inlineTextNodes : InlineTextBox.t list option;
          [@key "inlineTextNodes"]
          [@yojson.option]
          [@ocaml.doc "The post-layout inline text nodes, if any."]
      styleIndex : number option;
          [@key "styleIndex"]
          [@yojson.option]
          [@ocaml.doc
            "Index into the `computedStyles` array returned by `getSnapshot`."]
      paintOrder : number option;
          [@key "paintOrder"]
          [@yojson.option]
          [@ocaml.doc
            "Global paint order index, which is determined by the stacking \
             order of the nodes. Nodes\n\
             that are painted together will have the same index. Only provided \
             if includePaintOrder in\n\
             getSnapshot was true."]
      isStackingContext : bool option;
          [@key "isStackingContext"]
          [@yojson.option]
          [@ocaml.doc
            "Set to true to indicate the element begins a new stacking context."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Details of an element in the DOM tree with a LayoutObject."]
  end = struct
    type t = {
      domNodeIndex : number;
          [@key "domNodeIndex"]
          [@ocaml.doc
            "The index of the related DOM node in the `domNodes` array \
             returned by `getSnapshot`."]
      boundingBox : DOM.Rect.t;
          [@key "boundingBox"]
          [@ocaml.doc
            "The bounding box in document coordinates. Note that scroll offset \
             of the document is ignored."]
      layoutText : string option;
          [@key "layoutText"]
          [@yojson.option]
          [@ocaml.doc "Contents of the LayoutText, if any."]
      inlineTextNodes : InlineTextBox.t list option;
          [@key "inlineTextNodes"]
          [@yojson.option]
          [@ocaml.doc "The post-layout inline text nodes, if any."]
      styleIndex : number option;
          [@key "styleIndex"]
          [@yojson.option]
          [@ocaml.doc
            "Index into the `computedStyles` array returned by `getSnapshot`."]
      paintOrder : number option;
          [@key "paintOrder"]
          [@yojson.option]
          [@ocaml.doc
            "Global paint order index, which is determined by the stacking \
             order of the nodes. Nodes\n\
             that are painted together will have the same index. Only provided \
             if includePaintOrder in\n\
             getSnapshot was true."]
      isStackingContext : bool option;
          [@key "isStackingContext"]
          [@yojson.option]
          [@ocaml.doc
            "Set to true to indicate the element begins a new stacking context."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Details of an element in the DOM tree with a LayoutObject."]
  end

  and ComputedStyle : sig
    type t = {
      properties : NameValue.t list;
          [@key "properties"]
          [@ocaml.doc "Name/value pairs of computed style properties."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A subset of the full ComputedStyle as defined by the request whitelist."]
  end = struct
    type t = {
      properties : NameValue.t list;
          [@key "properties"]
          [@ocaml.doc "Name/value pairs of computed style properties."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A subset of the full ComputedStyle as defined by the request whitelist."]
  end

  and NameValue : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Attribute/property name."]
      value : string; [@key "value"] [@ocaml.doc "Attribute/property value."]
    }
    [@@deriving yojson] [@@ocaml.doc "A name/value pair."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Attribute/property name."]
      value : string; [@key "value"] [@ocaml.doc "Attribute/property value."]
    }
    [@@deriving yojson] [@@ocaml.doc "A name/value pair."]
  end

  and StringIndex : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc "Index of the string in the strings table."]
  end = struct
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc "Index of the string in the strings table."]
  end

  and ArrayOfStrings : sig
    type t = StringIndex.t list
    [@@deriving yojson]
    [@@ocaml.doc "Index of the string in the strings table."]
  end = struct
    type t = StringIndex.t list
    [@@deriving yojson]
    [@@ocaml.doc "Index of the string in the strings table."]
  end

  and RareStringData : sig
    type t = {
      index : number list; [@key "index"] [@ocaml.doc "No description provided"]
      value : StringIndex.t list;
          [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Data that is only present on rare nodes."]
  end = struct
    type t = {
      index : number list; [@key "index"] [@ocaml.doc "No description provided"]
      value : StringIndex.t list;
          [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Data that is only present on rare nodes."]
  end

  and RareBooleanData : sig
    type t = {
      index : number list; [@key "index"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      index : number list; [@key "index"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and RareIntegerData : sig
    type t = {
      index : number list; [@key "index"] [@ocaml.doc "No description provided"]
      value : number list; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      index : number list; [@key "index"] [@ocaml.doc "No description provided"]
      value : number list; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Rectangle : sig
    type t = number list
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = number list
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and DocumentSnapshot : sig
    type t = {
      documentURL : StringIndex.t;
          [@key "documentURL"]
          [@ocaml.doc
            "Document URL that `Document` or `FrameOwner` node points to."]
      title : StringIndex.t; [@key "title"] [@ocaml.doc "Document title."]
      baseURL : StringIndex.t;
          [@key "baseURL"]
          [@ocaml.doc
            "Base URL that `Document` or `FrameOwner` node uses for URL \
             completion."]
      contentLanguage : StringIndex.t;
          [@key "contentLanguage"]
          [@ocaml.doc "Contains the document's content language."]
      encodingName : StringIndex.t;
          [@key "encodingName"]
          [@ocaml.doc "Contains the document's character set encoding."]
      publicId : StringIndex.t;
          [@key "publicId"] [@ocaml.doc "`DocumentType` node's publicId."]
      systemId : StringIndex.t;
          [@key "systemId"] [@ocaml.doc "`DocumentType` node's systemId."]
      frameId : StringIndex.t;
          [@key "frameId"]
          [@ocaml.doc
            "Frame ID for frame owner elements and also for the document node."]
      nodes : NodeTreeSnapshot.t;
          [@key "nodes"] [@ocaml.doc "A table with dom nodes."]
      layout : LayoutTreeSnapshot.t;
          [@key "layout"] [@ocaml.doc "The nodes in the layout tree."]
      textBoxes : TextBoxSnapshot.t;
          [@key "textBoxes"] [@ocaml.doc "The post-layout inline text nodes."]
      scrollOffsetX : number option;
          [@key "scrollOffsetX"]
          [@yojson.option]
          [@ocaml.doc "Horizontal scroll offset."]
      scrollOffsetY : number option;
          [@key "scrollOffsetY"]
          [@yojson.option]
          [@ocaml.doc "Vertical scroll offset."]
      contentWidth : number option;
          [@key "contentWidth"]
          [@yojson.option]
          [@ocaml.doc "Document content width."]
      contentHeight : number option;
          [@key "contentHeight"]
          [@yojson.option]
          [@ocaml.doc "Document content height."]
    }
    [@@deriving yojson] [@@ocaml.doc "Document snapshot."]
  end = struct
    type t = {
      documentURL : StringIndex.t;
          [@key "documentURL"]
          [@ocaml.doc
            "Document URL that `Document` or `FrameOwner` node points to."]
      title : StringIndex.t; [@key "title"] [@ocaml.doc "Document title."]
      baseURL : StringIndex.t;
          [@key "baseURL"]
          [@ocaml.doc
            "Base URL that `Document` or `FrameOwner` node uses for URL \
             completion."]
      contentLanguage : StringIndex.t;
          [@key "contentLanguage"]
          [@ocaml.doc "Contains the document's content language."]
      encodingName : StringIndex.t;
          [@key "encodingName"]
          [@ocaml.doc "Contains the document's character set encoding."]
      publicId : StringIndex.t;
          [@key "publicId"] [@ocaml.doc "`DocumentType` node's publicId."]
      systemId : StringIndex.t;
          [@key "systemId"] [@ocaml.doc "`DocumentType` node's systemId."]
      frameId : StringIndex.t;
          [@key "frameId"]
          [@ocaml.doc
            "Frame ID for frame owner elements and also for the document node."]
      nodes : NodeTreeSnapshot.t;
          [@key "nodes"] [@ocaml.doc "A table with dom nodes."]
      layout : LayoutTreeSnapshot.t;
          [@key "layout"] [@ocaml.doc "The nodes in the layout tree."]
      textBoxes : TextBoxSnapshot.t;
          [@key "textBoxes"] [@ocaml.doc "The post-layout inline text nodes."]
      scrollOffsetX : number option;
          [@key "scrollOffsetX"]
          [@yojson.option]
          [@ocaml.doc "Horizontal scroll offset."]
      scrollOffsetY : number option;
          [@key "scrollOffsetY"]
          [@yojson.option]
          [@ocaml.doc "Vertical scroll offset."]
      contentWidth : number option;
          [@key "contentWidth"]
          [@yojson.option]
          [@ocaml.doc "Document content width."]
      contentHeight : number option;
          [@key "contentHeight"]
          [@yojson.option]
          [@ocaml.doc "Document content height."]
    }
    [@@deriving yojson] [@@ocaml.doc "Document snapshot."]
  end

  and NodeTreeSnapshot : sig
    type t = {
      parentIndex : number list option;
          [@key "parentIndex"]
          [@yojson.option]
          [@ocaml.doc "Parent node index."]
      nodeType : number list option;
          [@key "nodeType"] [@yojson.option] [@ocaml.doc "`Node`'s nodeType."]
      shadowRootType : RareStringData.t option;
          [@key "shadowRootType"]
          [@yojson.option]
          [@ocaml.doc
            "Type of the shadow root the `Node` is in. String values are equal \
             to the `ShadowRootType` enum."]
      nodeName : StringIndex.t list option;
          [@key "nodeName"] [@yojson.option] [@ocaml.doc "`Node`'s nodeName."]
      nodeValue : StringIndex.t list option;
          [@key "nodeValue"] [@yojson.option] [@ocaml.doc "`Node`'s nodeValue."]
      backendNodeId : DOM.BackendNodeId.t list option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "`Node`'s id, corresponds to DOM.Node.backendNodeId."]
      attributes : ArrayOfStrings.t list option;
          [@key "attributes"]
          [@yojson.option]
          [@ocaml.doc
            "Attributes of an `Element` node. Flatten name, value pairs."]
      textValue : RareStringData.t option;
          [@key "textValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for textarea elements, contains the text value."]
      inputValue : RareStringData.t option;
          [@key "inputValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for input elements, contains the input's associated text \
             value."]
      inputChecked : RareBooleanData.t option;
          [@key "inputChecked"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for radio and checkbox input elements, indicates if the \
             element has been checked"]
      optionSelected : RareBooleanData.t option;
          [@key "optionSelected"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for option elements, indicates if the element has been \
             selected"]
      contentDocumentIndex : RareIntegerData.t option;
          [@key "contentDocumentIndex"]
          [@yojson.option]
          [@ocaml.doc
            "The index of the document in the list of the snapshot documents."]
      pseudoType : RareStringData.t option;
          [@key "pseudoType"]
          [@yojson.option]
          [@ocaml.doc "Type of a pseudo element node."]
      pseudoIdentifier : RareStringData.t option;
          [@key "pseudoIdentifier"]
          [@yojson.option]
          [@ocaml.doc
            "Pseudo element identifier for this node. Only present if there is a\n\
             valid pseudoType."]
      isClickable : RareBooleanData.t option;
          [@key "isClickable"]
          [@yojson.option]
          [@ocaml.doc
            "Whether this DOM node responds to mouse clicks. This includes \
             nodes that have had click\n\
             event listeners attached via JavaScript as well as anchor tags \
             that naturally navigate when\n\
             clicked."]
      currentSourceURL : RareStringData.t option;
          [@key "currentSourceURL"]
          [@yojson.option]
          [@ocaml.doc "The selected url for nodes with a srcset attribute."]
      originURL : RareStringData.t option;
          [@key "originURL"]
          [@yojson.option]
          [@ocaml.doc
            "The url of the script (if any) that generates this node."]
    }
    [@@deriving yojson] [@@ocaml.doc "Table containing nodes."]
  end = struct
    type t = {
      parentIndex : number list option;
          [@key "parentIndex"]
          [@yojson.option]
          [@ocaml.doc "Parent node index."]
      nodeType : number list option;
          [@key "nodeType"] [@yojson.option] [@ocaml.doc "`Node`'s nodeType."]
      shadowRootType : RareStringData.t option;
          [@key "shadowRootType"]
          [@yojson.option]
          [@ocaml.doc
            "Type of the shadow root the `Node` is in. String values are equal \
             to the `ShadowRootType` enum."]
      nodeName : StringIndex.t list option;
          [@key "nodeName"] [@yojson.option] [@ocaml.doc "`Node`'s nodeName."]
      nodeValue : StringIndex.t list option;
          [@key "nodeValue"] [@yojson.option] [@ocaml.doc "`Node`'s nodeValue."]
      backendNodeId : DOM.BackendNodeId.t list option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "`Node`'s id, corresponds to DOM.Node.backendNodeId."]
      attributes : ArrayOfStrings.t list option;
          [@key "attributes"]
          [@yojson.option]
          [@ocaml.doc
            "Attributes of an `Element` node. Flatten name, value pairs."]
      textValue : RareStringData.t option;
          [@key "textValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for textarea elements, contains the text value."]
      inputValue : RareStringData.t option;
          [@key "inputValue"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for input elements, contains the input's associated text \
             value."]
      inputChecked : RareBooleanData.t option;
          [@key "inputChecked"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for radio and checkbox input elements, indicates if the \
             element has been checked"]
      optionSelected : RareBooleanData.t option;
          [@key "optionSelected"]
          [@yojson.option]
          [@ocaml.doc
            "Only set for option elements, indicates if the element has been \
             selected"]
      contentDocumentIndex : RareIntegerData.t option;
          [@key "contentDocumentIndex"]
          [@yojson.option]
          [@ocaml.doc
            "The index of the document in the list of the snapshot documents."]
      pseudoType : RareStringData.t option;
          [@key "pseudoType"]
          [@yojson.option]
          [@ocaml.doc "Type of a pseudo element node."]
      pseudoIdentifier : RareStringData.t option;
          [@key "pseudoIdentifier"]
          [@yojson.option]
          [@ocaml.doc
            "Pseudo element identifier for this node. Only present if there is a\n\
             valid pseudoType."]
      isClickable : RareBooleanData.t option;
          [@key "isClickable"]
          [@yojson.option]
          [@ocaml.doc
            "Whether this DOM node responds to mouse clicks. This includes \
             nodes that have had click\n\
             event listeners attached via JavaScript as well as anchor tags \
             that naturally navigate when\n\
             clicked."]
      currentSourceURL : RareStringData.t option;
          [@key "currentSourceURL"]
          [@yojson.option]
          [@ocaml.doc "The selected url for nodes with a srcset attribute."]
      originURL : RareStringData.t option;
          [@key "originURL"]
          [@yojson.option]
          [@ocaml.doc
            "The url of the script (if any) that generates this node."]
    }
    [@@deriving yojson] [@@ocaml.doc "Table containing nodes."]
  end

  and LayoutTreeSnapshot : sig
    type t = {
      nodeIndex : number list;
          [@key "nodeIndex"]
          [@ocaml.doc
            "Index of the corresponding node in the `NodeTreeSnapshot` array \
             returned by `captureSnapshot`."]
      styles : ArrayOfStrings.t list;
          [@key "styles"]
          [@ocaml.doc
            "Array of indexes specifying computed style strings, filtered \
             according to the `computedStyles` parameter passed to \
             `captureSnapshot`."]
      bounds : Rectangle.t list;
          [@key "bounds"] [@ocaml.doc "The absolute position bounding box."]
      text : StringIndex.t list;
          [@key "text"] [@ocaml.doc "Contents of the LayoutText, if any."]
      stackingContexts : RareBooleanData.t;
          [@key "stackingContexts"] [@ocaml.doc "Stacking context information."]
      paintOrders : number list option;
          [@key "paintOrders"]
          [@yojson.option]
          [@ocaml.doc
            "Global paint order index, which is determined by the stacking \
             order of the nodes. Nodes\n\
             that are painted together will have the same index. Only provided \
             if includePaintOrder in\n\
             captureSnapshot was true."]
      offsetRects : Rectangle.t list option;
          [@key "offsetRects"]
          [@yojson.option]
          [@ocaml.doc
            "The offset rect of nodes. Only available when includeDOMRects is \
             set to true"]
      scrollRects : Rectangle.t list option;
          [@key "scrollRects"]
          [@yojson.option]
          [@ocaml.doc
            "The scroll rect of nodes. Only available when includeDOMRects is \
             set to true"]
      clientRects : Rectangle.t list option;
          [@key "clientRects"]
          [@yojson.option]
          [@ocaml.doc
            "The client rect of nodes. Only available when includeDOMRects is \
             set to true"]
      blendedBackgroundColors : StringIndex.t list option;
          [@key "blendedBackgroundColors"]
          [@yojson.option]
          [@ocaml.doc
            "The list of background colors that are blended with colors of \
             overlapping elements."]
      textColorOpacities : number list option;
          [@key "textColorOpacities"]
          [@yojson.option]
          [@ocaml.doc "The list of computed text opacities."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Table of details of an element in the DOM tree with a LayoutObject."]
  end = struct
    type t = {
      nodeIndex : number list;
          [@key "nodeIndex"]
          [@ocaml.doc
            "Index of the corresponding node in the `NodeTreeSnapshot` array \
             returned by `captureSnapshot`."]
      styles : ArrayOfStrings.t list;
          [@key "styles"]
          [@ocaml.doc
            "Array of indexes specifying computed style strings, filtered \
             according to the `computedStyles` parameter passed to \
             `captureSnapshot`."]
      bounds : Rectangle.t list;
          [@key "bounds"] [@ocaml.doc "The absolute position bounding box."]
      text : StringIndex.t list;
          [@key "text"] [@ocaml.doc "Contents of the LayoutText, if any."]
      stackingContexts : RareBooleanData.t;
          [@key "stackingContexts"] [@ocaml.doc "Stacking context information."]
      paintOrders : number list option;
          [@key "paintOrders"]
          [@yojson.option]
          [@ocaml.doc
            "Global paint order index, which is determined by the stacking \
             order of the nodes. Nodes\n\
             that are painted together will have the same index. Only provided \
             if includePaintOrder in\n\
             captureSnapshot was true."]
      offsetRects : Rectangle.t list option;
          [@key "offsetRects"]
          [@yojson.option]
          [@ocaml.doc
            "The offset rect of nodes. Only available when includeDOMRects is \
             set to true"]
      scrollRects : Rectangle.t list option;
          [@key "scrollRects"]
          [@yojson.option]
          [@ocaml.doc
            "The scroll rect of nodes. Only available when includeDOMRects is \
             set to true"]
      clientRects : Rectangle.t list option;
          [@key "clientRects"]
          [@yojson.option]
          [@ocaml.doc
            "The client rect of nodes. Only available when includeDOMRects is \
             set to true"]
      blendedBackgroundColors : StringIndex.t list option;
          [@key "blendedBackgroundColors"]
          [@yojson.option]
          [@ocaml.doc
            "The list of background colors that are blended with colors of \
             overlapping elements."]
      textColorOpacities : number list option;
          [@key "textColorOpacities"]
          [@yojson.option]
          [@ocaml.doc "The list of computed text opacities."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Table of details of an element in the DOM tree with a LayoutObject."]
  end

  and TextBoxSnapshot : sig
    type t = {
      layoutIndex : number list;
          [@key "layoutIndex"]
          [@ocaml.doc
            "Index of the layout tree node that owns this box collection."]
      bounds : Rectangle.t list;
          [@key "bounds"] [@ocaml.doc "The absolute position bounding box."]
      start : number list;
          [@key "start"]
          [@ocaml.doc
            "The starting index in characters, for this post layout textbox \
             substring. Characters that\n\
             would be represented as a surrogate pair in UTF-16 have length 2."]
      length : number list;
          [@key "length"]
          [@ocaml.doc
            "The number of characters in this post layout textbox substring. \
             Characters that would be\n\
             represented as a surrogate pair in UTF-16 have length 2."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Table of details of the post layout rendered text positions. The exact \
       layout should not be regarded as\n\
       stable and may change between versions."]
  end = struct
    type t = {
      layoutIndex : number list;
          [@key "layoutIndex"]
          [@ocaml.doc
            "Index of the layout tree node that owns this box collection."]
      bounds : Rectangle.t list;
          [@key "bounds"] [@ocaml.doc "The absolute position bounding box."]
      start : number list;
          [@key "start"]
          [@ocaml.doc
            "The starting index in characters, for this post layout textbox \
             substring. Characters that\n\
             would be represented as a surrogate pair in UTF-16 have length 2."]
      length : number list;
          [@key "length"]
          [@ocaml.doc
            "The number of characters in this post layout textbox substring. \
             Characters that would be\n\
             represented as a surrogate pair in UTF-16 have length 2."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Table of details of the post layout rendered text positions. The exact \
       layout should not be regarded as\n\
       stable and may change between versions."]
  end
end

and DOMStorage : sig
  module rec SerializedStorageKey : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StorageId : sig
    type t = {
      securityOrigin : string option;
          [@key "securityOrigin"]
          [@yojson.option]
          [@ocaml.doc "Security origin for the storage."]
      storageKey : SerializedStorageKey.t option;
          [@key "storageKey"]
          [@yojson.option]
          [@ocaml.doc
            "Represents a key by which DOM Storage keys its CachedStorageAreas"]
      isLocalStorage : bool;
          [@key "isLocalStorage"]
          [@ocaml.doc
            "Whether the storage is local storage (not session storage)."]
    }
    [@@deriving yojson] [@@ocaml.doc "DOM Storage identifier."]
  end

  and Item : sig
    type t = string list [@@deriving yojson] [@@ocaml.doc "DOM Storage item."]
  end
end = struct
  module rec SerializedStorageKey : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StorageId : sig
    type t = {
      securityOrigin : string option;
          [@key "securityOrigin"]
          [@yojson.option]
          [@ocaml.doc "Security origin for the storage."]
      storageKey : SerializedStorageKey.t option;
          [@key "storageKey"]
          [@yojson.option]
          [@ocaml.doc
            "Represents a key by which DOM Storage keys its CachedStorageAreas"]
      isLocalStorage : bool;
          [@key "isLocalStorage"]
          [@ocaml.doc
            "Whether the storage is local storage (not session storage)."]
    }
    [@@deriving yojson] [@@ocaml.doc "DOM Storage identifier."]
  end = struct
    type t = {
      securityOrigin : string option;
          [@key "securityOrigin"]
          [@yojson.option]
          [@ocaml.doc "Security origin for the storage."]
      storageKey : SerializedStorageKey.t option;
          [@key "storageKey"]
          [@yojson.option]
          [@ocaml.doc
            "Represents a key by which DOM Storage keys its CachedStorageAreas"]
      isLocalStorage : bool;
          [@key "isLocalStorage"]
          [@ocaml.doc
            "Whether the storage is local storage (not session storage)."]
    }
    [@@deriving yojson] [@@ocaml.doc "DOM Storage identifier."]
  end

  and Item : sig
    type t = string list [@@deriving yojson] [@@ocaml.doc "DOM Storage item."]
  end = struct
    type t = string list [@@deriving yojson] [@@ocaml.doc "DOM Storage item."]
  end
end

and Database : sig
  module rec DatabaseId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique identifier of Database object."]
  end

  and Database : sig
    type t = {
      id : DatabaseId.t; [@key "id"] [@ocaml.doc "Database ID."]
      domain : string; [@key "domain"] [@ocaml.doc "Database domain."]
      name : string; [@key "name"] [@ocaml.doc "Database name."]
      version : string; [@key "version"] [@ocaml.doc "Database version."]
    }
    [@@deriving yojson] [@@ocaml.doc "Database object."]
  end

  and Error : sig
    type t = {
      message : string; [@key "message"] [@ocaml.doc "Error message."]
      code : number; [@key "code"] [@ocaml.doc "Error code."]
    }
    [@@deriving yojson] [@@ocaml.doc "Database error."]
  end
end = struct
  module rec DatabaseId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique identifier of Database object."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique identifier of Database object."]
  end

  and Database : sig
    type t = {
      id : DatabaseId.t; [@key "id"] [@ocaml.doc "Database ID."]
      domain : string; [@key "domain"] [@ocaml.doc "Database domain."]
      name : string; [@key "name"] [@ocaml.doc "Database name."]
      version : string; [@key "version"] [@ocaml.doc "Database version."]
    }
    [@@deriving yojson] [@@ocaml.doc "Database object."]
  end = struct
    type t = {
      id : DatabaseId.t; [@key "id"] [@ocaml.doc "Database ID."]
      domain : string; [@key "domain"] [@ocaml.doc "Database domain."]
      name : string; [@key "name"] [@ocaml.doc "Database name."]
      version : string; [@key "version"] [@ocaml.doc "Database version."]
    }
    [@@deriving yojson] [@@ocaml.doc "Database object."]
  end

  and Error : sig
    type t = {
      message : string; [@key "message"] [@ocaml.doc "Error message."]
      code : number; [@key "code"] [@ocaml.doc "Error code."]
    }
    [@@deriving yojson] [@@ocaml.doc "Database error."]
  end = struct
    type t = {
      message : string; [@key "message"] [@ocaml.doc "Error message."]
      code : number; [@key "code"] [@ocaml.doc "Error code."]
    }
    [@@deriving yojson] [@@ocaml.doc "Database error."]
  end
end

and Emulation : sig
  module rec ScreenOrientation : sig
    type _screenorientation_type =
      [ `portraitPrimary
      | `portraitSecondary
      | `landscapePrimary
      | `landscapeSecondary ]

    val _screenorientation_type_of_yojson :
      Yojson.Basic.t -> _screenorientation_type

    val yojson_of__screenorientation_type :
      _screenorientation_type -> Yojson.Basic.t

    type t = {
      type_ : _screenorientation_type;
          [@key "type"] [@ocaml.doc "Orientation type."]
      angle : number; [@key "angle"] [@ocaml.doc "Orientation angle."]
    }
    [@@deriving yojson] [@@ocaml.doc "Screen orientation."]
  end

  and DisplayFeature : sig
    type _displayfeature_orientation = [ `vertical | `horizontal ]

    val _displayfeature_orientation_of_yojson :
      Yojson.Basic.t -> _displayfeature_orientation

    val yojson_of__displayfeature_orientation :
      _displayfeature_orientation -> Yojson.Basic.t

    type t = {
      orientation : _displayfeature_orientation;
          [@key "orientation"]
          [@ocaml.doc "Orientation of a display feature in relation to screen"]
      offset : number;
          [@key "offset"]
          [@ocaml.doc
            "The offset from the screen origin in either the x (for vertical\n\
             orientation) or y (for horizontal orientation) direction."]
      maskLength : number;
          [@key "maskLength"]
          [@ocaml.doc
            "A display feature may mask content such that it is not physically\n\
             displayed - this length along with the offset describes this area.\n\
             A display feature that only splits content will have a 0 \
             mask_length."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and MediaFeature : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and VirtualTimePolicy : sig
    type _virtualtimepolicy =
      [ `advance | `pause | `pauseIfNetworkFetchesPending ]

    val _virtualtimepolicy_of_yojson : Yojson.Basic.t -> _virtualtimepolicy
    val yojson_of__virtualtimepolicy : _virtualtimepolicy -> Yojson.Basic.t

    type t = _virtualtimepolicy
    [@@deriving yojson]
    [@@ocaml.doc
      "advance: If the scheduler runs out of immediate work, the virtual time \
       base may fast forward to\n\
       allow the next delayed task (if any) to run; pause: The virtual time \
       base may not advance;\n\
       pauseIfNetworkFetchesPending: The virtual time base may not advance if \
       there are any pending\n\
       resource fetches."]
  end

  and UserAgentBrandVersion : sig
    type t = {
      brand : string; [@key "brand"] [@ocaml.doc "No description provided"]
      version : string; [@key "version"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Used to specify User Agent Cient Hints to emulate. See \
       https://wicg.github.io/ua-client-hints"]
  end

  and UserAgentMetadata : sig
    type t = {
      brands : UserAgentBrandVersion.t list option;
          [@key "brands"]
          [@yojson.option]
          [@ocaml.doc "Brands appearing in Sec-CH-UA."]
      fullVersionList : UserAgentBrandVersion.t list option;
          [@key "fullVersionList"]
          [@yojson.option]
          [@ocaml.doc "Brands appearing in Sec-CH-UA-Full-Version-List."]
      fullVersion : string option;
          [@key "fullVersion"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      platform : string;
          [@key "platform"] [@ocaml.doc "No description provided"]
      platformVersion : string;
          [@key "platformVersion"] [@ocaml.doc "No description provided"]
      architecture : string;
          [@key "architecture"] [@ocaml.doc "No description provided"]
      model : string; [@key "model"] [@ocaml.doc "No description provided"]
      mobile : bool; [@key "mobile"] [@ocaml.doc "No description provided"]
      bitness : string option;
          [@key "bitness"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      wow64 : bool option;
          [@key "wow64"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Used to specify User Agent Cient Hints to emulate. See \
       https://wicg.github.io/ua-client-hints\n\
       Missing optional values will be filled in by the target with what it \
       would normally use."]
  end

  and DisabledImageType : sig
    type _disabledimagetype = [ `avif | `webp ]

    val _disabledimagetype_of_yojson : Yojson.Basic.t -> _disabledimagetype
    val yojson_of__disabledimagetype : _disabledimagetype -> Yojson.Basic.t

    type t = _disabledimagetype
    [@@deriving yojson]
    [@@ocaml.doc "Enum of image types that can be disabled."]
  end
end = struct
  module rec ScreenOrientation : sig
    type _screenorientation_type =
      [ `portraitPrimary
      | `portraitSecondary
      | `landscapePrimary
      | `landscapeSecondary ]

    val _screenorientation_type_of_yojson :
      Yojson.Basic.t -> _screenorientation_type

    val yojson_of__screenorientation_type :
      _screenorientation_type -> Yojson.Basic.t

    type t = {
      type_ : _screenorientation_type;
          [@key "type"] [@ocaml.doc "Orientation type."]
      angle : number; [@key "angle"] [@ocaml.doc "Orientation angle."]
    }
    [@@deriving yojson] [@@ocaml.doc "Screen orientation."]
  end = struct
    type _screenorientation_type =
      [ `portraitPrimary
      | `portraitSecondary
      | `landscapePrimary
      | `landscapeSecondary ]

    let _screenorientation_type_of_yojson = function
      | `String "portraitPrimary" -> `portraitPrimary
      | `String "portraitSecondary" -> `portraitSecondary
      | `String "landscapePrimary" -> `landscapePrimary
      | `String "landscapeSecondary" -> `landscapeSecondary
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__screenorientation_type = function
      | `portraitPrimary -> `String "portraitPrimary"
      | `portraitSecondary -> `String "portraitSecondary"
      | `landscapePrimary -> `String "landscapePrimary"
      | `landscapeSecondary -> `String "landscapeSecondary"

    type t = {
      type_ : _screenorientation_type;
          [@key "type"] [@ocaml.doc "Orientation type."]
      angle : number; [@key "angle"] [@ocaml.doc "Orientation angle."]
    }
    [@@deriving yojson] [@@ocaml.doc "Screen orientation."]
  end

  and DisplayFeature : sig
    type _displayfeature_orientation = [ `vertical | `horizontal ]

    val _displayfeature_orientation_of_yojson :
      Yojson.Basic.t -> _displayfeature_orientation

    val yojson_of__displayfeature_orientation :
      _displayfeature_orientation -> Yojson.Basic.t

    type t = {
      orientation : _displayfeature_orientation;
          [@key "orientation"]
          [@ocaml.doc "Orientation of a display feature in relation to screen"]
      offset : number;
          [@key "offset"]
          [@ocaml.doc
            "The offset from the screen origin in either the x (for vertical\n\
             orientation) or y (for horizontal orientation) direction."]
      maskLength : number;
          [@key "maskLength"]
          [@ocaml.doc
            "A display feature may mask content such that it is not physically\n\
             displayed - this length along with the offset describes this area.\n\
             A display feature that only splits content will have a 0 \
             mask_length."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _displayfeature_orientation = [ `vertical | `horizontal ]

    let _displayfeature_orientation_of_yojson = function
      | `String "vertical" -> `vertical
      | `String "horizontal" -> `horizontal
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__displayfeature_orientation = function
      | `vertical -> `String "vertical"
      | `horizontal -> `String "horizontal"

    type t = {
      orientation : _displayfeature_orientation;
          [@key "orientation"]
          [@ocaml.doc "Orientation of a display feature in relation to screen"]
      offset : number;
          [@key "offset"]
          [@ocaml.doc
            "The offset from the screen origin in either the x (for vertical\n\
             orientation) or y (for horizontal orientation) direction."]
      maskLength : number;
          [@key "maskLength"]
          [@ocaml.doc
            "A display feature may mask content such that it is not physically\n\
             displayed - this length along with the offset describes this area.\n\
             A display feature that only splits content will have a 0 \
             mask_length."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and MediaFeature : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and VirtualTimePolicy : sig
    type _virtualtimepolicy =
      [ `advance | `pause | `pauseIfNetworkFetchesPending ]

    val _virtualtimepolicy_of_yojson : Yojson.Basic.t -> _virtualtimepolicy
    val yojson_of__virtualtimepolicy : _virtualtimepolicy -> Yojson.Basic.t

    type t = _virtualtimepolicy
    [@@deriving yojson]
    [@@ocaml.doc
      "advance: If the scheduler runs out of immediate work, the virtual time \
       base may fast forward to\n\
       allow the next delayed task (if any) to run; pause: The virtual time \
       base may not advance;\n\
       pauseIfNetworkFetchesPending: The virtual time base may not advance if \
       there are any pending\n\
       resource fetches."]
  end = struct
    type _virtualtimepolicy =
      [ `advance | `pause | `pauseIfNetworkFetchesPending ]

    let _virtualtimepolicy_of_yojson = function
      | `String "advance" -> `advance
      | `String "pause" -> `pause
      | `String "pauseIfNetworkFetchesPending" -> `pauseIfNetworkFetchesPending
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__virtualtimepolicy = function
      | `advance -> `String "advance"
      | `pause -> `String "pause"
      | `pauseIfNetworkFetchesPending -> `String "pauseIfNetworkFetchesPending"

    type t = _virtualtimepolicy
    [@@deriving yojson]
    [@@ocaml.doc
      "advance: If the scheduler runs out of immediate work, the virtual time \
       base may fast forward to\n\
       allow the next delayed task (if any) to run; pause: The virtual time \
       base may not advance;\n\
       pauseIfNetworkFetchesPending: The virtual time base may not advance if \
       there are any pending\n\
       resource fetches."]
  end

  and UserAgentBrandVersion : sig
    type t = {
      brand : string; [@key "brand"] [@ocaml.doc "No description provided"]
      version : string; [@key "version"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Used to specify User Agent Cient Hints to emulate. See \
       https://wicg.github.io/ua-client-hints"]
  end = struct
    type t = {
      brand : string; [@key "brand"] [@ocaml.doc "No description provided"]
      version : string; [@key "version"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Used to specify User Agent Cient Hints to emulate. See \
       https://wicg.github.io/ua-client-hints"]
  end

  and UserAgentMetadata : sig
    type t = {
      brands : UserAgentBrandVersion.t list option;
          [@key "brands"]
          [@yojson.option]
          [@ocaml.doc "Brands appearing in Sec-CH-UA."]
      fullVersionList : UserAgentBrandVersion.t list option;
          [@key "fullVersionList"]
          [@yojson.option]
          [@ocaml.doc "Brands appearing in Sec-CH-UA-Full-Version-List."]
      fullVersion : string option;
          [@key "fullVersion"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      platform : string;
          [@key "platform"] [@ocaml.doc "No description provided"]
      platformVersion : string;
          [@key "platformVersion"] [@ocaml.doc "No description provided"]
      architecture : string;
          [@key "architecture"] [@ocaml.doc "No description provided"]
      model : string; [@key "model"] [@ocaml.doc "No description provided"]
      mobile : bool; [@key "mobile"] [@ocaml.doc "No description provided"]
      bitness : string option;
          [@key "bitness"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      wow64 : bool option;
          [@key "wow64"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Used to specify User Agent Cient Hints to emulate. See \
       https://wicg.github.io/ua-client-hints\n\
       Missing optional values will be filled in by the target with what it \
       would normally use."]
  end = struct
    type t = {
      brands : UserAgentBrandVersion.t list option;
          [@key "brands"]
          [@yojson.option]
          [@ocaml.doc "Brands appearing in Sec-CH-UA."]
      fullVersionList : UserAgentBrandVersion.t list option;
          [@key "fullVersionList"]
          [@yojson.option]
          [@ocaml.doc "Brands appearing in Sec-CH-UA-Full-Version-List."]
      fullVersion : string option;
          [@key "fullVersion"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      platform : string;
          [@key "platform"] [@ocaml.doc "No description provided"]
      platformVersion : string;
          [@key "platformVersion"] [@ocaml.doc "No description provided"]
      architecture : string;
          [@key "architecture"] [@ocaml.doc "No description provided"]
      model : string; [@key "model"] [@ocaml.doc "No description provided"]
      mobile : bool; [@key "mobile"] [@ocaml.doc "No description provided"]
      bitness : string option;
          [@key "bitness"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      wow64 : bool option;
          [@key "wow64"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Used to specify User Agent Cient Hints to emulate. See \
       https://wicg.github.io/ua-client-hints\n\
       Missing optional values will be filled in by the target with what it \
       would normally use."]
  end

  and DisabledImageType : sig
    type _disabledimagetype = [ `avif | `webp ]

    val _disabledimagetype_of_yojson : Yojson.Basic.t -> _disabledimagetype
    val yojson_of__disabledimagetype : _disabledimagetype -> Yojson.Basic.t

    type t = _disabledimagetype
    [@@deriving yojson]
    [@@ocaml.doc "Enum of image types that can be disabled."]
  end = struct
    type _disabledimagetype = [ `avif | `webp ]

    let _disabledimagetype_of_yojson = function
      | `String "avif" -> `avif
      | `String "webp" -> `webp
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__disabledimagetype = function
      | `avif -> `String "avif"
      | `webp -> `String "webp"

    type t = _disabledimagetype
    [@@deriving yojson]
    [@@ocaml.doc "Enum of image types that can be disabled."]
  end
end

and HeadlessExperimental : sig
  module rec ScreenshotParams : sig
    type _screenshotparams_format = [ `jpeg | `png | `webp ]

    val _screenshotparams_format_of_yojson :
      Yojson.Basic.t -> _screenshotparams_format

    val yojson_of__screenshotparams_format :
      _screenshotparams_format -> Yojson.Basic.t

    type t = {
      format : _screenshotparams_format option;
          [@key "format"]
          [@yojson.option]
          [@ocaml.doc "Image compression format (defaults to png)."]
      quality : number option;
          [@key "quality"]
          [@yojson.option]
          [@ocaml.doc
            "Compression quality from range [0..100] (jpeg and webp only)."]
      optimizeForSpeed : bool option;
          [@key "optimizeForSpeed"]
          [@yojson.option]
          [@ocaml.doc
            "Optimize image encoding for speed, not for resulting size \
             (defaults to false)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Encoding options for a screenshot."]
  end
end = struct
  module rec ScreenshotParams : sig
    type _screenshotparams_format = [ `jpeg | `png | `webp ]

    val _screenshotparams_format_of_yojson :
      Yojson.Basic.t -> _screenshotparams_format

    val yojson_of__screenshotparams_format :
      _screenshotparams_format -> Yojson.Basic.t

    type t = {
      format : _screenshotparams_format option;
          [@key "format"]
          [@yojson.option]
          [@ocaml.doc "Image compression format (defaults to png)."]
      quality : number option;
          [@key "quality"]
          [@yojson.option]
          [@ocaml.doc
            "Compression quality from range [0..100] (jpeg and webp only)."]
      optimizeForSpeed : bool option;
          [@key "optimizeForSpeed"]
          [@yojson.option]
          [@ocaml.doc
            "Optimize image encoding for speed, not for resulting size \
             (defaults to false)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Encoding options for a screenshot."]
  end = struct
    type _screenshotparams_format = [ `jpeg | `png | `webp ]

    let _screenshotparams_format_of_yojson = function
      | `String "jpeg" -> `jpeg
      | `String "png" -> `png
      | `String "webp" -> `webp
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__screenshotparams_format = function
      | `jpeg -> `String "jpeg"
      | `png -> `String "png"
      | `webp -> `String "webp"

    type t = {
      format : _screenshotparams_format option;
          [@key "format"]
          [@yojson.option]
          [@ocaml.doc "Image compression format (defaults to png)."]
      quality : number option;
          [@key "quality"]
          [@yojson.option]
          [@ocaml.doc
            "Compression quality from range [0..100] (jpeg and webp only)."]
      optimizeForSpeed : bool option;
          [@key "optimizeForSpeed"]
          [@yojson.option]
          [@ocaml.doc
            "Optimize image encoding for speed, not for resulting size \
             (defaults to false)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Encoding options for a screenshot."]
  end
end

and IO : sig
  module rec StreamHandle : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "This is either obtained from another method or specified as \
       `blob:<uuid>` where\n\
       `<uuid>` is an UUID of a Blob."]
  end
end = struct
  module rec StreamHandle : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "This is either obtained from another method or specified as \
       `blob:<uuid>` where\n\
       `<uuid>` is an UUID of a Blob."]
  end = struct
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "This is either obtained from another method or specified as \
       `blob:<uuid>` where\n\
       `<uuid>` is an UUID of a Blob."]
  end
end

and IndexedDB : sig
  module rec DatabaseWithObjectStores : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Database name."]
      version : number;
          [@key "version"]
          [@ocaml.doc
            "Database version (type is not 'integer', as the standard\n\
             requires the version number to be 'unsigned long long')"]
      objectStores : ObjectStore.t list;
          [@key "objectStores"] [@ocaml.doc "Object stores in this database."]
    }
    [@@deriving yojson] [@@ocaml.doc "Database with an array of object stores."]
  end

  and ObjectStore : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Object store name."]
      keyPath : KeyPath.t;
          [@key "keyPath"] [@ocaml.doc "Object store key path."]
      autoIncrement : bool;
          [@key "autoIncrement"]
          [@ocaml.doc "If true, object store has auto increment flag set."]
      indexes : ObjectStoreIndex.t list;
          [@key "indexes"] [@ocaml.doc "Indexes in this object store."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object store."]
  end

  and ObjectStoreIndex : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Index name."]
      keyPath : KeyPath.t; [@key "keyPath"] [@ocaml.doc "Index key path."]
      unique : bool; [@key "unique"] [@ocaml.doc "If true, index is unique."]
      multiEntry : bool;
          [@key "multiEntry"]
          [@ocaml.doc "If true, index allows multiple entries for a key."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object store index."]
  end

  and Key : sig
    type _key_type = [ `number | `string | `date | `array ]

    val _key_type_of_yojson : Yojson.Basic.t -> _key_type
    val yojson_of__key_type : _key_type -> Yojson.Basic.t

    type t = {
      type_ : _key_type; [@key "type"] [@ocaml.doc "Key type."]
      number : number option;
          [@key "number"] [@yojson.option] [@ocaml.doc "Number value."]
      string : string option;
          [@key "string"] [@yojson.option] [@ocaml.doc "String value."]
      date : number option;
          [@key "date"] [@yojson.option] [@ocaml.doc "Date value."]
      array : Key.t list option;
          [@key "array"] [@yojson.option] [@ocaml.doc "Array value."]
    }
    [@@deriving yojson] [@@ocaml.doc "Key."]
  end

  and KeyRange : sig
    type t = {
      lower : Key.t option;
          [@key "lower"] [@yojson.option] [@ocaml.doc "Lower bound."]
      upper : Key.t option;
          [@key "upper"] [@yojson.option] [@ocaml.doc "Upper bound."]
      lowerOpen : bool;
          [@key "lowerOpen"] [@ocaml.doc "If true lower bound is open."]
      upperOpen : bool;
          [@key "upperOpen"] [@ocaml.doc "If true upper bound is open."]
    }
    [@@deriving yojson] [@@ocaml.doc "Key range."]
  end

  and DataEntry : sig
    type t = {
      key : Runtime.RemoteObject.t; [@key "key"] [@ocaml.doc "Key object."]
      primaryKey : Runtime.RemoteObject.t;
          [@key "primaryKey"] [@ocaml.doc "Primary key object."]
      value : Runtime.RemoteObject.t; [@key "value"] [@ocaml.doc "Value object."]
    }
    [@@deriving yojson] [@@ocaml.doc "Data entry."]
  end

  and KeyPath : sig
    type _keypath_type = [ `null | `string | `array ]

    val _keypath_type_of_yojson : Yojson.Basic.t -> _keypath_type
    val yojson_of__keypath_type : _keypath_type -> Yojson.Basic.t

    type t = {
      type_ : _keypath_type; [@key "type"] [@ocaml.doc "Key path type."]
      string : string option;
          [@key "string"] [@yojson.option] [@ocaml.doc "String value."]
      array : string list option;
          [@key "array"] [@yojson.option] [@ocaml.doc "Array value."]
    }
    [@@deriving yojson] [@@ocaml.doc "Key path."]
  end
end = struct
  module rec DatabaseWithObjectStores : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Database name."]
      version : number;
          [@key "version"]
          [@ocaml.doc
            "Database version (type is not 'integer', as the standard\n\
             requires the version number to be 'unsigned long long')"]
      objectStores : ObjectStore.t list;
          [@key "objectStores"] [@ocaml.doc "Object stores in this database."]
    }
    [@@deriving yojson] [@@ocaml.doc "Database with an array of object stores."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Database name."]
      version : number;
          [@key "version"]
          [@ocaml.doc
            "Database version (type is not 'integer', as the standard\n\
             requires the version number to be 'unsigned long long')"]
      objectStores : ObjectStore.t list;
          [@key "objectStores"] [@ocaml.doc "Object stores in this database."]
    }
    [@@deriving yojson] [@@ocaml.doc "Database with an array of object stores."]
  end

  and ObjectStore : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Object store name."]
      keyPath : KeyPath.t;
          [@key "keyPath"] [@ocaml.doc "Object store key path."]
      autoIncrement : bool;
          [@key "autoIncrement"]
          [@ocaml.doc "If true, object store has auto increment flag set."]
      indexes : ObjectStoreIndex.t list;
          [@key "indexes"] [@ocaml.doc "Indexes in this object store."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object store."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Object store name."]
      keyPath : KeyPath.t;
          [@key "keyPath"] [@ocaml.doc "Object store key path."]
      autoIncrement : bool;
          [@key "autoIncrement"]
          [@ocaml.doc "If true, object store has auto increment flag set."]
      indexes : ObjectStoreIndex.t list;
          [@key "indexes"] [@ocaml.doc "Indexes in this object store."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object store."]
  end

  and ObjectStoreIndex : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Index name."]
      keyPath : KeyPath.t; [@key "keyPath"] [@ocaml.doc "Index key path."]
      unique : bool; [@key "unique"] [@ocaml.doc "If true, index is unique."]
      multiEntry : bool;
          [@key "multiEntry"]
          [@ocaml.doc "If true, index allows multiple entries for a key."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object store index."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Index name."]
      keyPath : KeyPath.t; [@key "keyPath"] [@ocaml.doc "Index key path."]
      unique : bool; [@key "unique"] [@ocaml.doc "If true, index is unique."]
      multiEntry : bool;
          [@key "multiEntry"]
          [@ocaml.doc "If true, index allows multiple entries for a key."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object store index."]
  end

  and Key : sig
    type _key_type = [ `number | `string | `date | `array ]

    val _key_type_of_yojson : Yojson.Basic.t -> _key_type
    val yojson_of__key_type : _key_type -> Yojson.Basic.t

    type t = {
      type_ : _key_type; [@key "type"] [@ocaml.doc "Key type."]
      number : number option;
          [@key "number"] [@yojson.option] [@ocaml.doc "Number value."]
      string : string option;
          [@key "string"] [@yojson.option] [@ocaml.doc "String value."]
      date : number option;
          [@key "date"] [@yojson.option] [@ocaml.doc "Date value."]
      array : Key.t list option;
          [@key "array"] [@yojson.option] [@ocaml.doc "Array value."]
    }
    [@@deriving yojson] [@@ocaml.doc "Key."]
  end = struct
    type _key_type = [ `number | `string | `date | `array ]

    let _key_type_of_yojson = function
      | `String "number" -> `number
      | `String "string" -> `string
      | `String "date" -> `date
      | `String "array" -> `array
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__key_type = function
      | `number -> `String "number"
      | `string -> `String "string"
      | `date -> `String "date"
      | `array -> `String "array"

    type t = {
      type_ : _key_type; [@key "type"] [@ocaml.doc "Key type."]
      number : number option;
          [@key "number"] [@yojson.option] [@ocaml.doc "Number value."]
      string : string option;
          [@key "string"] [@yojson.option] [@ocaml.doc "String value."]
      date : number option;
          [@key "date"] [@yojson.option] [@ocaml.doc "Date value."]
      array : Key.t list option;
          [@key "array"] [@yojson.option] [@ocaml.doc "Array value."]
    }
    [@@deriving yojson] [@@ocaml.doc "Key."]
  end

  and KeyRange : sig
    type t = {
      lower : Key.t option;
          [@key "lower"] [@yojson.option] [@ocaml.doc "Lower bound."]
      upper : Key.t option;
          [@key "upper"] [@yojson.option] [@ocaml.doc "Upper bound."]
      lowerOpen : bool;
          [@key "lowerOpen"] [@ocaml.doc "If true lower bound is open."]
      upperOpen : bool;
          [@key "upperOpen"] [@ocaml.doc "If true upper bound is open."]
    }
    [@@deriving yojson] [@@ocaml.doc "Key range."]
  end = struct
    type t = {
      lower : Key.t option;
          [@key "lower"] [@yojson.option] [@ocaml.doc "Lower bound."]
      upper : Key.t option;
          [@key "upper"] [@yojson.option] [@ocaml.doc "Upper bound."]
      lowerOpen : bool;
          [@key "lowerOpen"] [@ocaml.doc "If true lower bound is open."]
      upperOpen : bool;
          [@key "upperOpen"] [@ocaml.doc "If true upper bound is open."]
    }
    [@@deriving yojson] [@@ocaml.doc "Key range."]
  end

  and DataEntry : sig
    type t = {
      key : Runtime.RemoteObject.t; [@key "key"] [@ocaml.doc "Key object."]
      primaryKey : Runtime.RemoteObject.t;
          [@key "primaryKey"] [@ocaml.doc "Primary key object."]
      value : Runtime.RemoteObject.t; [@key "value"] [@ocaml.doc "Value object."]
    }
    [@@deriving yojson] [@@ocaml.doc "Data entry."]
  end = struct
    type t = {
      key : Runtime.RemoteObject.t; [@key "key"] [@ocaml.doc "Key object."]
      primaryKey : Runtime.RemoteObject.t;
          [@key "primaryKey"] [@ocaml.doc "Primary key object."]
      value : Runtime.RemoteObject.t; [@key "value"] [@ocaml.doc "Value object."]
    }
    [@@deriving yojson] [@@ocaml.doc "Data entry."]
  end

  and KeyPath : sig
    type _keypath_type = [ `null | `string | `array ]

    val _keypath_type_of_yojson : Yojson.Basic.t -> _keypath_type
    val yojson_of__keypath_type : _keypath_type -> Yojson.Basic.t

    type t = {
      type_ : _keypath_type; [@key "type"] [@ocaml.doc "Key path type."]
      string : string option;
          [@key "string"] [@yojson.option] [@ocaml.doc "String value."]
      array : string list option;
          [@key "array"] [@yojson.option] [@ocaml.doc "Array value."]
    }
    [@@deriving yojson] [@@ocaml.doc "Key path."]
  end = struct
    type _keypath_type = [ `null | `string | `array ]

    let _keypath_type_of_yojson = function
      | `String "null" -> `null
      | `String "string" -> `string
      | `String "array" -> `array
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__keypath_type = function
      | `null -> `String "null"
      | `string -> `String "string"
      | `array -> `String "array"

    type t = {
      type_ : _keypath_type; [@key "type"] [@ocaml.doc "Key path type."]
      string : string option;
          [@key "string"] [@yojson.option] [@ocaml.doc "String value."]
      array : string list option;
          [@key "array"] [@yojson.option] [@ocaml.doc "Array value."]
    }
    [@@deriving yojson] [@@ocaml.doc "Key path."]
  end
end

and Input : sig
  module rec TouchPoint : sig
    type t = {
      x : number;
          [@key "x"]
          [@ocaml.doc
            "X coordinate of the event relative to the main frame's viewport \
             in CSS pixels."]
      y : number;
          [@key "y"]
          [@ocaml.doc
            "Y coordinate of the event relative to the main frame's viewport \
             in CSS pixels. 0 refers to\n\
             the top of the viewport and Y increases as it proceeds towards \
             the bottom of the viewport."]
      radiusX : number option;
          [@key "radiusX"]
          [@yojson.option]
          [@ocaml.doc "X radius of the touch area (default: 1.0)."]
      radiusY : number option;
          [@key "radiusY"]
          [@yojson.option]
          [@ocaml.doc "Y radius of the touch area (default: 1.0)."]
      rotationAngle : number option;
          [@key "rotationAngle"]
          [@yojson.option]
          [@ocaml.doc "Rotation angle (default: 0.0)."]
      force : number option;
          [@key "force"] [@yojson.option] [@ocaml.doc "Force (default: 1.0)."]
      tangentialPressure : number option;
          [@key "tangentialPressure"]
          [@yojson.option]
          [@ocaml.doc
            "The normalized tangential pressure, which has a range of [-1,1] \
             (default: 0)."]
      tiltX : number option;
          [@key "tiltX"]
          [@yojson.option]
          [@ocaml.doc
            "The plane angle between the Y-Z plane and the plane containing \
             both the stylus axis and the Y axis, in degrees of the range \
             [-90,90], a positive tiltX is to the right (default: 0)"]
      tiltY : number option;
          [@key "tiltY"]
          [@yojson.option]
          [@ocaml.doc
            "The plane angle between the X-Z plane and the plane containing \
             both the stylus axis and the X axis, in degrees of the range \
             [-90,90], a positive tiltY is towards the user (default: 0)."]
      twist : number option;
          [@key "twist"]
          [@yojson.option]
          [@ocaml.doc
            "The clockwise rotation of a pen stylus around its own major axis, \
             in degrees in the range [0,359] (default: 0)."]
      id : number option;
          [@key "id"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier used to track touch sources between events, must be \
             unique within an event."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and GestureSourceType : sig
    type _gesturesourcetype = [ `default | `touch | `mouse ]

    val _gesturesourcetype_of_yojson : Yojson.Basic.t -> _gesturesourcetype
    val yojson_of__gesturesourcetype : _gesturesourcetype -> Yojson.Basic.t

    type t = _gesturesourcetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and MouseButton : sig
    type _mousebutton = [ `none | `left | `middle | `right | `back | `forward ]

    val _mousebutton_of_yojson : Yojson.Basic.t -> _mousebutton
    val yojson_of__mousebutton : _mousebutton -> Yojson.Basic.t

    type t = _mousebutton
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and TimeSinceEpoch : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc "UTC time in seconds, counted from January 1, 1970."]
  end

  and DragDataItem : sig
    type t = {
      mimeType : string;
          [@key "mimeType"] [@ocaml.doc "Mime type of the dragged data."]
      data : string;
          [@key "data"]
          [@ocaml.doc
            "Depending of the value of `mimeType`, it contains the dragged link,\n\
             text, HTML markup or any other data."]
      title : string option;
          [@key "title"]
          [@yojson.option]
          [@ocaml.doc
            "Title associated with a link. Only valid when `mimeType` == \
             \"text/uri-list\"."]
      baseURL : string option;
          [@key "baseURL"]
          [@yojson.option]
          [@ocaml.doc
            "Stores the base URL for the contained markup. Only valid when \
             `mimeType`\n\
             == \"text/html\"."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and DragData : sig
    type t = {
      items : DragDataItem.t list;
          [@key "items"] [@ocaml.doc "No description provided"]
      files : string list option;
          [@key "files"]
          [@yojson.option]
          [@ocaml.doc "List of filenames that should be included when dropping"]
      dragOperationsMask : number;
          [@key "dragOperationsMask"]
          [@ocaml.doc
            "Bit field representing allowed drag operations. Copy = 1, Link = \
             2, Move = 16"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec TouchPoint : sig
    type t = {
      x : number;
          [@key "x"]
          [@ocaml.doc
            "X coordinate of the event relative to the main frame's viewport \
             in CSS pixels."]
      y : number;
          [@key "y"]
          [@ocaml.doc
            "Y coordinate of the event relative to the main frame's viewport \
             in CSS pixels. 0 refers to\n\
             the top of the viewport and Y increases as it proceeds towards \
             the bottom of the viewport."]
      radiusX : number option;
          [@key "radiusX"]
          [@yojson.option]
          [@ocaml.doc "X radius of the touch area (default: 1.0)."]
      radiusY : number option;
          [@key "radiusY"]
          [@yojson.option]
          [@ocaml.doc "Y radius of the touch area (default: 1.0)."]
      rotationAngle : number option;
          [@key "rotationAngle"]
          [@yojson.option]
          [@ocaml.doc "Rotation angle (default: 0.0)."]
      force : number option;
          [@key "force"] [@yojson.option] [@ocaml.doc "Force (default: 1.0)."]
      tangentialPressure : number option;
          [@key "tangentialPressure"]
          [@yojson.option]
          [@ocaml.doc
            "The normalized tangential pressure, which has a range of [-1,1] \
             (default: 0)."]
      tiltX : number option;
          [@key "tiltX"]
          [@yojson.option]
          [@ocaml.doc
            "The plane angle between the Y-Z plane and the plane containing \
             both the stylus axis and the Y axis, in degrees of the range \
             [-90,90], a positive tiltX is to the right (default: 0)"]
      tiltY : number option;
          [@key "tiltY"]
          [@yojson.option]
          [@ocaml.doc
            "The plane angle between the X-Z plane and the plane containing \
             both the stylus axis and the X axis, in degrees of the range \
             [-90,90], a positive tiltY is towards the user (default: 0)."]
      twist : number option;
          [@key "twist"]
          [@yojson.option]
          [@ocaml.doc
            "The clockwise rotation of a pen stylus around its own major axis, \
             in degrees in the range [0,359] (default: 0)."]
      id : number option;
          [@key "id"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier used to track touch sources between events, must be \
             unique within an event."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      x : number;
          [@key "x"]
          [@ocaml.doc
            "X coordinate of the event relative to the main frame's viewport \
             in CSS pixels."]
      y : number;
          [@key "y"]
          [@ocaml.doc
            "Y coordinate of the event relative to the main frame's viewport \
             in CSS pixels. 0 refers to\n\
             the top of the viewport and Y increases as it proceeds towards \
             the bottom of the viewport."]
      radiusX : number option;
          [@key "radiusX"]
          [@yojson.option]
          [@ocaml.doc "X radius of the touch area (default: 1.0)."]
      radiusY : number option;
          [@key "radiusY"]
          [@yojson.option]
          [@ocaml.doc "Y radius of the touch area (default: 1.0)."]
      rotationAngle : number option;
          [@key "rotationAngle"]
          [@yojson.option]
          [@ocaml.doc "Rotation angle (default: 0.0)."]
      force : number option;
          [@key "force"] [@yojson.option] [@ocaml.doc "Force (default: 1.0)."]
      tangentialPressure : number option;
          [@key "tangentialPressure"]
          [@yojson.option]
          [@ocaml.doc
            "The normalized tangential pressure, which has a range of [-1,1] \
             (default: 0)."]
      tiltX : number option;
          [@key "tiltX"]
          [@yojson.option]
          [@ocaml.doc
            "The plane angle between the Y-Z plane and the plane containing \
             both the stylus axis and the Y axis, in degrees of the range \
             [-90,90], a positive tiltX is to the right (default: 0)"]
      tiltY : number option;
          [@key "tiltY"]
          [@yojson.option]
          [@ocaml.doc
            "The plane angle between the X-Z plane and the plane containing \
             both the stylus axis and the X axis, in degrees of the range \
             [-90,90], a positive tiltY is towards the user (default: 0)."]
      twist : number option;
          [@key "twist"]
          [@yojson.option]
          [@ocaml.doc
            "The clockwise rotation of a pen stylus around its own major axis, \
             in degrees in the range [0,359] (default: 0)."]
      id : number option;
          [@key "id"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier used to track touch sources between events, must be \
             unique within an event."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and GestureSourceType : sig
    type _gesturesourcetype = [ `default | `touch | `mouse ]

    val _gesturesourcetype_of_yojson : Yojson.Basic.t -> _gesturesourcetype
    val yojson_of__gesturesourcetype : _gesturesourcetype -> Yojson.Basic.t

    type t = _gesturesourcetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _gesturesourcetype = [ `default | `touch | `mouse ]

    let _gesturesourcetype_of_yojson = function
      | `String "default" -> `default
      | `String "touch" -> `touch
      | `String "mouse" -> `mouse
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__gesturesourcetype = function
      | `default -> `String "default"
      | `touch -> `String "touch"
      | `mouse -> `String "mouse"

    type t = _gesturesourcetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and MouseButton : sig
    type _mousebutton = [ `none | `left | `middle | `right | `back | `forward ]

    val _mousebutton_of_yojson : Yojson.Basic.t -> _mousebutton
    val yojson_of__mousebutton : _mousebutton -> Yojson.Basic.t

    type t = _mousebutton
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _mousebutton = [ `none | `left | `middle | `right | `back | `forward ]

    let _mousebutton_of_yojson = function
      | `String "none" -> `none
      | `String "left" -> `left
      | `String "middle" -> `middle
      | `String "right" -> `right
      | `String "back" -> `back
      | `String "forward" -> `forward
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__mousebutton = function
      | `none -> `String "none"
      | `left -> `String "left"
      | `middle -> `String "middle"
      | `right -> `String "right"
      | `back -> `String "back"
      | `forward -> `String "forward"

    type t = _mousebutton
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and TimeSinceEpoch : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc "UTC time in seconds, counted from January 1, 1970."]
  end = struct
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc "UTC time in seconds, counted from January 1, 1970."]
  end

  and DragDataItem : sig
    type t = {
      mimeType : string;
          [@key "mimeType"] [@ocaml.doc "Mime type of the dragged data."]
      data : string;
          [@key "data"]
          [@ocaml.doc
            "Depending of the value of `mimeType`, it contains the dragged link,\n\
             text, HTML markup or any other data."]
      title : string option;
          [@key "title"]
          [@yojson.option]
          [@ocaml.doc
            "Title associated with a link. Only valid when `mimeType` == \
             \"text/uri-list\"."]
      baseURL : string option;
          [@key "baseURL"]
          [@yojson.option]
          [@ocaml.doc
            "Stores the base URL for the contained markup. Only valid when \
             `mimeType`\n\
             == \"text/html\"."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      mimeType : string;
          [@key "mimeType"] [@ocaml.doc "Mime type of the dragged data."]
      data : string;
          [@key "data"]
          [@ocaml.doc
            "Depending of the value of `mimeType`, it contains the dragged link,\n\
             text, HTML markup or any other data."]
      title : string option;
          [@key "title"]
          [@yojson.option]
          [@ocaml.doc
            "Title associated with a link. Only valid when `mimeType` == \
             \"text/uri-list\"."]
      baseURL : string option;
          [@key "baseURL"]
          [@yojson.option]
          [@ocaml.doc
            "Stores the base URL for the contained markup. Only valid when \
             `mimeType`\n\
             == \"text/html\"."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and DragData : sig
    type t = {
      items : DragDataItem.t list;
          [@key "items"] [@ocaml.doc "No description provided"]
      files : string list option;
          [@key "files"]
          [@yojson.option]
          [@ocaml.doc "List of filenames that should be included when dropping"]
      dragOperationsMask : number;
          [@key "dragOperationsMask"]
          [@ocaml.doc
            "Bit field representing allowed drag operations. Copy = 1, Link = \
             2, Move = 16"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      items : DragDataItem.t list;
          [@key "items"] [@ocaml.doc "No description provided"]
      files : string list option;
          [@key "files"]
          [@yojson.option]
          [@ocaml.doc "List of filenames that should be included when dropping"]
      dragOperationsMask : number;
          [@key "dragOperationsMask"]
          [@ocaml.doc
            "Bit field representing allowed drag operations. Copy = 1, Link = \
             2, Move = 16"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and LayerTree : sig
  module rec LayerId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Unique Layer identifier."]
  end

  and SnapshotId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique snapshot identifier."]
  end

  and ScrollRect : sig
    type _scrollrect_type =
      [ `RepaintsOnScroll | `TouchEventHandler | `WheelEventHandler ]

    val _scrollrect_type_of_yojson : Yojson.Basic.t -> _scrollrect_type
    val yojson_of__scrollrect_type : _scrollrect_type -> Yojson.Basic.t

    type t = {
      rect : DOM.Rect.t; [@key "rect"] [@ocaml.doc "Rectangle itself."]
      type_ : _scrollrect_type;
          [@key "type"]
          [@ocaml.doc
            "Reason for rectangle to force scrolling on the main thread"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Rectangle where scrolling happens on the main thread."]
  end

  and StickyPositionConstraint : sig
    type t = {
      stickyBoxRect : DOM.Rect.t;
          [@key "stickyBoxRect"]
          [@ocaml.doc
            "Layout rectangle of the sticky element before being shifted"]
      containingBlockRect : DOM.Rect.t;
          [@key "containingBlockRect"]
          [@ocaml.doc
            "Layout rectangle of the containing block of the sticky element"]
      nearestLayerShiftingStickyBox : LayerId.t option;
          [@key "nearestLayerShiftingStickyBox"]
          [@yojson.option]
          [@ocaml.doc "The nearest sticky layer that shifts the sticky box"]
      nearestLayerShiftingContainingBlock : LayerId.t option;
          [@key "nearestLayerShiftingContainingBlock"]
          [@yojson.option]
          [@ocaml.doc
            "The nearest sticky layer that shifts the containing block"]
    }
    [@@deriving yojson] [@@ocaml.doc "Sticky position constraints."]
  end

  and PictureTile : sig
    type t = {
      x : number;
          [@key "x"] [@ocaml.doc "Offset from owning layer left boundary"]
      y : number;
          [@key "y"] [@ocaml.doc "Offset from owning layer top boundary"]
      picture : string;
          [@key "picture"]
          [@ocaml.doc
            "Base64-encoded snapshot data. (Encoded as a base64 string when \
             passed over JSON)"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Serialized fragment of layer picture along with its offset within the \
       layer."]
  end

  and Layer : sig
    type t = {
      layerId : LayerId.t;
          [@key "layerId"] [@ocaml.doc "The unique id for this layer."]
      parentLayerId : LayerId.t option;
          [@key "parentLayerId"]
          [@yojson.option]
          [@ocaml.doc "The id of parent (not present for root)."]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "The backend id for the node associated with this layer."]
      offsetX : number;
          [@key "offsetX"]
          [@ocaml.doc "Offset from parent layer, X coordinate."]
      offsetY : number;
          [@key "offsetY"]
          [@ocaml.doc "Offset from parent layer, Y coordinate."]
      width : number; [@key "width"] [@ocaml.doc "Layer width."]
      height : number; [@key "height"] [@ocaml.doc "Layer height."]
      transform : number list option;
          [@key "transform"]
          [@yojson.option]
          [@ocaml.doc
            "Transformation matrix for layer, default is identity matrix"]
      anchorX : number option;
          [@key "anchorX"]
          [@yojson.option]
          [@ocaml.doc
            "Transform anchor point X, absent if no transform specified"]
      anchorY : number option;
          [@key "anchorY"]
          [@yojson.option]
          [@ocaml.doc
            "Transform anchor point Y, absent if no transform specified"]
      anchorZ : number option;
          [@key "anchorZ"]
          [@yojson.option]
          [@ocaml.doc
            "Transform anchor point Z, absent if no transform specified"]
      paintCount : number;
          [@key "paintCount"]
          [@ocaml.doc "Indicates how many time this layer has painted."]
      drawsContent : bool;
          [@key "drawsContent"]
          [@ocaml.doc
            "Indicates whether this layer hosts any content, rather than being \
             used for\n\
             transform/scrolling purposes only."]
      invisible : bool option;
          [@key "invisible"]
          [@yojson.option]
          [@ocaml.doc "Set if layer is not visible."]
      scrollRects : ScrollRect.t list option;
          [@key "scrollRects"]
          [@yojson.option]
          [@ocaml.doc "Rectangles scrolling on main thread only."]
      stickyPositionConstraint : StickyPositionConstraint.t option;
          [@key "stickyPositionConstraint"]
          [@yojson.option]
          [@ocaml.doc "Sticky position constraint information"]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about a compositing layer."]
  end

  and PaintProfile : sig
    type t = number list
    [@@deriving yojson] [@@ocaml.doc "Array of timings, one per paint step."]
  end
end = struct
  module rec LayerId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Unique Layer identifier."]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "Unique Layer identifier."]
  end

  and SnapshotId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique snapshot identifier."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique snapshot identifier."]
  end

  and ScrollRect : sig
    type _scrollrect_type =
      [ `RepaintsOnScroll | `TouchEventHandler | `WheelEventHandler ]

    val _scrollrect_type_of_yojson : Yojson.Basic.t -> _scrollrect_type
    val yojson_of__scrollrect_type : _scrollrect_type -> Yojson.Basic.t

    type t = {
      rect : DOM.Rect.t; [@key "rect"] [@ocaml.doc "Rectangle itself."]
      type_ : _scrollrect_type;
          [@key "type"]
          [@ocaml.doc
            "Reason for rectangle to force scrolling on the main thread"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Rectangle where scrolling happens on the main thread."]
  end = struct
    type _scrollrect_type =
      [ `RepaintsOnScroll | `TouchEventHandler | `WheelEventHandler ]

    let _scrollrect_type_of_yojson = function
      | `String "RepaintsOnScroll" -> `RepaintsOnScroll
      | `String "TouchEventHandler" -> `TouchEventHandler
      | `String "WheelEventHandler" -> `WheelEventHandler
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__scrollrect_type = function
      | `RepaintsOnScroll -> `String "RepaintsOnScroll"
      | `TouchEventHandler -> `String "TouchEventHandler"
      | `WheelEventHandler -> `String "WheelEventHandler"

    type t = {
      rect : DOM.Rect.t; [@key "rect"] [@ocaml.doc "Rectangle itself."]
      type_ : _scrollrect_type;
          [@key "type"]
          [@ocaml.doc
            "Reason for rectangle to force scrolling on the main thread"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Rectangle where scrolling happens on the main thread."]
  end

  and StickyPositionConstraint : sig
    type t = {
      stickyBoxRect : DOM.Rect.t;
          [@key "stickyBoxRect"]
          [@ocaml.doc
            "Layout rectangle of the sticky element before being shifted"]
      containingBlockRect : DOM.Rect.t;
          [@key "containingBlockRect"]
          [@ocaml.doc
            "Layout rectangle of the containing block of the sticky element"]
      nearestLayerShiftingStickyBox : LayerId.t option;
          [@key "nearestLayerShiftingStickyBox"]
          [@yojson.option]
          [@ocaml.doc "The nearest sticky layer that shifts the sticky box"]
      nearestLayerShiftingContainingBlock : LayerId.t option;
          [@key "nearestLayerShiftingContainingBlock"]
          [@yojson.option]
          [@ocaml.doc
            "The nearest sticky layer that shifts the containing block"]
    }
    [@@deriving yojson] [@@ocaml.doc "Sticky position constraints."]
  end = struct
    type t = {
      stickyBoxRect : DOM.Rect.t;
          [@key "stickyBoxRect"]
          [@ocaml.doc
            "Layout rectangle of the sticky element before being shifted"]
      containingBlockRect : DOM.Rect.t;
          [@key "containingBlockRect"]
          [@ocaml.doc
            "Layout rectangle of the containing block of the sticky element"]
      nearestLayerShiftingStickyBox : LayerId.t option;
          [@key "nearestLayerShiftingStickyBox"]
          [@yojson.option]
          [@ocaml.doc "The nearest sticky layer that shifts the sticky box"]
      nearestLayerShiftingContainingBlock : LayerId.t option;
          [@key "nearestLayerShiftingContainingBlock"]
          [@yojson.option]
          [@ocaml.doc
            "The nearest sticky layer that shifts the containing block"]
    }
    [@@deriving yojson] [@@ocaml.doc "Sticky position constraints."]
  end

  and PictureTile : sig
    type t = {
      x : number;
          [@key "x"] [@ocaml.doc "Offset from owning layer left boundary"]
      y : number;
          [@key "y"] [@ocaml.doc "Offset from owning layer top boundary"]
      picture : string;
          [@key "picture"]
          [@ocaml.doc
            "Base64-encoded snapshot data. (Encoded as a base64 string when \
             passed over JSON)"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Serialized fragment of layer picture along with its offset within the \
       layer."]
  end = struct
    type t = {
      x : number;
          [@key "x"] [@ocaml.doc "Offset from owning layer left boundary"]
      y : number;
          [@key "y"] [@ocaml.doc "Offset from owning layer top boundary"]
      picture : string;
          [@key "picture"]
          [@ocaml.doc
            "Base64-encoded snapshot data. (Encoded as a base64 string when \
             passed over JSON)"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Serialized fragment of layer picture along with its offset within the \
       layer."]
  end

  and Layer : sig
    type t = {
      layerId : LayerId.t;
          [@key "layerId"] [@ocaml.doc "The unique id for this layer."]
      parentLayerId : LayerId.t option;
          [@key "parentLayerId"]
          [@yojson.option]
          [@ocaml.doc "The id of parent (not present for root)."]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "The backend id for the node associated with this layer."]
      offsetX : number;
          [@key "offsetX"]
          [@ocaml.doc "Offset from parent layer, X coordinate."]
      offsetY : number;
          [@key "offsetY"]
          [@ocaml.doc "Offset from parent layer, Y coordinate."]
      width : number; [@key "width"] [@ocaml.doc "Layer width."]
      height : number; [@key "height"] [@ocaml.doc "Layer height."]
      transform : number list option;
          [@key "transform"]
          [@yojson.option]
          [@ocaml.doc
            "Transformation matrix for layer, default is identity matrix"]
      anchorX : number option;
          [@key "anchorX"]
          [@yojson.option]
          [@ocaml.doc
            "Transform anchor point X, absent if no transform specified"]
      anchorY : number option;
          [@key "anchorY"]
          [@yojson.option]
          [@ocaml.doc
            "Transform anchor point Y, absent if no transform specified"]
      anchorZ : number option;
          [@key "anchorZ"]
          [@yojson.option]
          [@ocaml.doc
            "Transform anchor point Z, absent if no transform specified"]
      paintCount : number;
          [@key "paintCount"]
          [@ocaml.doc "Indicates how many time this layer has painted."]
      drawsContent : bool;
          [@key "drawsContent"]
          [@ocaml.doc
            "Indicates whether this layer hosts any content, rather than being \
             used for\n\
             transform/scrolling purposes only."]
      invisible : bool option;
          [@key "invisible"]
          [@yojson.option]
          [@ocaml.doc "Set if layer is not visible."]
      scrollRects : ScrollRect.t list option;
          [@key "scrollRects"]
          [@yojson.option]
          [@ocaml.doc "Rectangles scrolling on main thread only."]
      stickyPositionConstraint : StickyPositionConstraint.t option;
          [@key "stickyPositionConstraint"]
          [@yojson.option]
          [@ocaml.doc "Sticky position constraint information"]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about a compositing layer."]
  end = struct
    type t = {
      layerId : LayerId.t;
          [@key "layerId"] [@ocaml.doc "The unique id for this layer."]
      parentLayerId : LayerId.t option;
          [@key "parentLayerId"]
          [@yojson.option]
          [@ocaml.doc "The id of parent (not present for root)."]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc "The backend id for the node associated with this layer."]
      offsetX : number;
          [@key "offsetX"]
          [@ocaml.doc "Offset from parent layer, X coordinate."]
      offsetY : number;
          [@key "offsetY"]
          [@ocaml.doc "Offset from parent layer, Y coordinate."]
      width : number; [@key "width"] [@ocaml.doc "Layer width."]
      height : number; [@key "height"] [@ocaml.doc "Layer height."]
      transform : number list option;
          [@key "transform"]
          [@yojson.option]
          [@ocaml.doc
            "Transformation matrix for layer, default is identity matrix"]
      anchorX : number option;
          [@key "anchorX"]
          [@yojson.option]
          [@ocaml.doc
            "Transform anchor point X, absent if no transform specified"]
      anchorY : number option;
          [@key "anchorY"]
          [@yojson.option]
          [@ocaml.doc
            "Transform anchor point Y, absent if no transform specified"]
      anchorZ : number option;
          [@key "anchorZ"]
          [@yojson.option]
          [@ocaml.doc
            "Transform anchor point Z, absent if no transform specified"]
      paintCount : number;
          [@key "paintCount"]
          [@ocaml.doc "Indicates how many time this layer has painted."]
      drawsContent : bool;
          [@key "drawsContent"]
          [@ocaml.doc
            "Indicates whether this layer hosts any content, rather than being \
             used for\n\
             transform/scrolling purposes only."]
      invisible : bool option;
          [@key "invisible"]
          [@yojson.option]
          [@ocaml.doc "Set if layer is not visible."]
      scrollRects : ScrollRect.t list option;
          [@key "scrollRects"]
          [@yojson.option]
          [@ocaml.doc "Rectangles scrolling on main thread only."]
      stickyPositionConstraint : StickyPositionConstraint.t option;
          [@key "stickyPositionConstraint"]
          [@yojson.option]
          [@ocaml.doc "Sticky position constraint information"]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about a compositing layer."]
  end

  and PaintProfile : sig
    type t = number list
    [@@deriving yojson] [@@ocaml.doc "Array of timings, one per paint step."]
  end = struct
    type t = number list
    [@@deriving yojson] [@@ocaml.doc "Array of timings, one per paint step."]
  end
end

and Log : sig
  module rec LogEntry : sig
    type _logentry_source =
      [ `xml
      | `javascript
      | `network
      | `storage
      | `appcache
      | `rendering
      | `security
      | `deprecation
      | `worker
      | `violation
      | `intervention
      | `recommendation
      | `other ]

    val _logentry_source_of_yojson : Yojson.Basic.t -> _logentry_source
    val yojson_of__logentry_source : _logentry_source -> Yojson.Basic.t

    type _logentry_level = [ `verbose | `info | `warning | `error ]

    val _logentry_level_of_yojson : Yojson.Basic.t -> _logentry_level
    val yojson_of__logentry_level : _logentry_level -> Yojson.Basic.t

    type _logentry_category = [ `cors ]

    val _logentry_category_of_yojson : Yojson.Basic.t -> _logentry_category
    val yojson_of__logentry_category : _logentry_category -> Yojson.Basic.t

    type t = {
      source : _logentry_source;
          [@key "source"] [@ocaml.doc "Log entry source."]
      level : _logentry_level; [@key "level"] [@ocaml.doc "Log entry severity."]
      text : string; [@key "text"] [@ocaml.doc "Logged text."]
      category : _logentry_category option;
          [@key "category"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      timestamp : Runtime.Timestamp.t;
          [@key "timestamp"] [@ocaml.doc "Timestamp when this entry was added."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc "URL of the resource if known."]
      lineNumber : number option;
          [@key "lineNumber"]
          [@yojson.option]
          [@ocaml.doc "Line number in the resource."]
      stackTrace : Runtime.StackTrace.t option;
          [@key "stackTrace"]
          [@yojson.option]
          [@ocaml.doc "JavaScript stack trace."]
      networkRequestId : Network.RequestId.t option;
          [@key "networkRequestId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the network request associated with this entry."]
      workerId : string option;
          [@key "workerId"]
          [@yojson.option]
          [@ocaml.doc "Identifier of the worker associated with this entry."]
      args : Runtime.RemoteObject.t list option;
          [@key "args"] [@yojson.option] [@ocaml.doc "Call arguments."]
    }
    [@@deriving yojson] [@@ocaml.doc "Log entry."]
  end

  and ViolationSetting : sig
    type _violationsetting_name =
      [ `longTask
      | `longLayout
      | `blockedEvent
      | `blockedParser
      | `discouragedAPIUse
      | `handler
      | `recurringHandler ]

    val _violationsetting_name_of_yojson :
      Yojson.Basic.t -> _violationsetting_name

    val yojson_of__violationsetting_name :
      _violationsetting_name -> Yojson.Basic.t

    type t = {
      name : _violationsetting_name;
          [@key "name"] [@ocaml.doc "Violation type."]
      threshold : number;
          [@key "threshold"] [@ocaml.doc "Time threshold to trigger upon."]
    }
    [@@deriving yojson] [@@ocaml.doc "Violation configuration setting."]
  end
end = struct
  module rec LogEntry : sig
    type _logentry_source =
      [ `xml
      | `javascript
      | `network
      | `storage
      | `appcache
      | `rendering
      | `security
      | `deprecation
      | `worker
      | `violation
      | `intervention
      | `recommendation
      | `other ]

    val _logentry_source_of_yojson : Yojson.Basic.t -> _logentry_source
    val yojson_of__logentry_source : _logentry_source -> Yojson.Basic.t

    type _logentry_level = [ `verbose | `info | `warning | `error ]

    val _logentry_level_of_yojson : Yojson.Basic.t -> _logentry_level
    val yojson_of__logentry_level : _logentry_level -> Yojson.Basic.t

    type _logentry_category = [ `cors ]

    val _logentry_category_of_yojson : Yojson.Basic.t -> _logentry_category
    val yojson_of__logentry_category : _logentry_category -> Yojson.Basic.t

    type t = {
      source : _logentry_source;
          [@key "source"] [@ocaml.doc "Log entry source."]
      level : _logentry_level; [@key "level"] [@ocaml.doc "Log entry severity."]
      text : string; [@key "text"] [@ocaml.doc "Logged text."]
      category : _logentry_category option;
          [@key "category"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      timestamp : Runtime.Timestamp.t;
          [@key "timestamp"] [@ocaml.doc "Timestamp when this entry was added."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc "URL of the resource if known."]
      lineNumber : number option;
          [@key "lineNumber"]
          [@yojson.option]
          [@ocaml.doc "Line number in the resource."]
      stackTrace : Runtime.StackTrace.t option;
          [@key "stackTrace"]
          [@yojson.option]
          [@ocaml.doc "JavaScript stack trace."]
      networkRequestId : Network.RequestId.t option;
          [@key "networkRequestId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the network request associated with this entry."]
      workerId : string option;
          [@key "workerId"]
          [@yojson.option]
          [@ocaml.doc "Identifier of the worker associated with this entry."]
      args : Runtime.RemoteObject.t list option;
          [@key "args"] [@yojson.option] [@ocaml.doc "Call arguments."]
    }
    [@@deriving yojson] [@@ocaml.doc "Log entry."]
  end = struct
    type _logentry_source =
      [ `xml
      | `javascript
      | `network
      | `storage
      | `appcache
      | `rendering
      | `security
      | `deprecation
      | `worker
      | `violation
      | `intervention
      | `recommendation
      | `other ]

    let _logentry_source_of_yojson = function
      | `String "xml" -> `xml
      | `String "javascript" -> `javascript
      | `String "network" -> `network
      | `String "storage" -> `storage
      | `String "appcache" -> `appcache
      | `String "rendering" -> `rendering
      | `String "security" -> `security
      | `String "deprecation" -> `deprecation
      | `String "worker" -> `worker
      | `String "violation" -> `violation
      | `String "intervention" -> `intervention
      | `String "recommendation" -> `recommendation
      | `String "other" -> `other
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__logentry_source = function
      | `xml -> `String "xml"
      | `javascript -> `String "javascript"
      | `network -> `String "network"
      | `storage -> `String "storage"
      | `appcache -> `String "appcache"
      | `rendering -> `String "rendering"
      | `security -> `String "security"
      | `deprecation -> `String "deprecation"
      | `worker -> `String "worker"
      | `violation -> `String "violation"
      | `intervention -> `String "intervention"
      | `recommendation -> `String "recommendation"
      | `other -> `String "other"

    type _logentry_level = [ `verbose | `info | `warning | `error ]

    let _logentry_level_of_yojson = function
      | `String "verbose" -> `verbose
      | `String "info" -> `info
      | `String "warning" -> `warning
      | `String "error" -> `error
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__logentry_level = function
      | `verbose -> `String "verbose"
      | `info -> `String "info"
      | `warning -> `String "warning"
      | `error -> `String "error"

    type _logentry_category = [ `cors ]

    let _logentry_category_of_yojson = function
      | `String "cors" -> `cors
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__logentry_category = function `cors -> `String "cors"

    type t = {
      source : _logentry_source;
          [@key "source"] [@ocaml.doc "Log entry source."]
      level : _logentry_level; [@key "level"] [@ocaml.doc "Log entry severity."]
      text : string; [@key "text"] [@ocaml.doc "Logged text."]
      category : _logentry_category option;
          [@key "category"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      timestamp : Runtime.Timestamp.t;
          [@key "timestamp"] [@ocaml.doc "Timestamp when this entry was added."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc "URL of the resource if known."]
      lineNumber : number option;
          [@key "lineNumber"]
          [@yojson.option]
          [@ocaml.doc "Line number in the resource."]
      stackTrace : Runtime.StackTrace.t option;
          [@key "stackTrace"]
          [@yojson.option]
          [@ocaml.doc "JavaScript stack trace."]
      networkRequestId : Network.RequestId.t option;
          [@key "networkRequestId"]
          [@yojson.option]
          [@ocaml.doc
            "Identifier of the network request associated with this entry."]
      workerId : string option;
          [@key "workerId"]
          [@yojson.option]
          [@ocaml.doc "Identifier of the worker associated with this entry."]
      args : Runtime.RemoteObject.t list option;
          [@key "args"] [@yojson.option] [@ocaml.doc "Call arguments."]
    }
    [@@deriving yojson] [@@ocaml.doc "Log entry."]
  end

  and ViolationSetting : sig
    type _violationsetting_name =
      [ `longTask
      | `longLayout
      | `blockedEvent
      | `blockedParser
      | `discouragedAPIUse
      | `handler
      | `recurringHandler ]

    val _violationsetting_name_of_yojson :
      Yojson.Basic.t -> _violationsetting_name

    val yojson_of__violationsetting_name :
      _violationsetting_name -> Yojson.Basic.t

    type t = {
      name : _violationsetting_name;
          [@key "name"] [@ocaml.doc "Violation type."]
      threshold : number;
          [@key "threshold"] [@ocaml.doc "Time threshold to trigger upon."]
    }
    [@@deriving yojson] [@@ocaml.doc "Violation configuration setting."]
  end = struct
    type _violationsetting_name =
      [ `longTask
      | `longLayout
      | `blockedEvent
      | `blockedParser
      | `discouragedAPIUse
      | `handler
      | `recurringHandler ]

    let _violationsetting_name_of_yojson = function
      | `String "longTask" -> `longTask
      | `String "longLayout" -> `longLayout
      | `String "blockedEvent" -> `blockedEvent
      | `String "blockedParser" -> `blockedParser
      | `String "discouragedAPIUse" -> `discouragedAPIUse
      | `String "handler" -> `handler
      | `String "recurringHandler" -> `recurringHandler
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__violationsetting_name = function
      | `longTask -> `String "longTask"
      | `longLayout -> `String "longLayout"
      | `blockedEvent -> `String "blockedEvent"
      | `blockedParser -> `String "blockedParser"
      | `discouragedAPIUse -> `String "discouragedAPIUse"
      | `handler -> `String "handler"
      | `recurringHandler -> `String "recurringHandler"

    type t = {
      name : _violationsetting_name;
          [@key "name"] [@ocaml.doc "Violation type."]
      threshold : number;
          [@key "threshold"] [@ocaml.doc "Time threshold to trigger upon."]
    }
    [@@deriving yojson] [@@ocaml.doc "Violation configuration setting."]
  end
end

and Memory : sig
  module rec PressureLevel : sig
    type _pressurelevel = [ `moderate | `critical ]

    val _pressurelevel_of_yojson : Yojson.Basic.t -> _pressurelevel
    val yojson_of__pressurelevel : _pressurelevel -> Yojson.Basic.t

    type t = _pressurelevel
    [@@deriving yojson] [@@ocaml.doc "Memory pressure level."]
  end

  and SamplingProfileNode : sig
    type t = {
      size : number;
          [@key "size"] [@ocaml.doc "Size of the sampled allocation."]
      total : number;
          [@key "total"] [@ocaml.doc "Total bytes attributed to this sample."]
      stack : string list;
          [@key "stack"]
          [@ocaml.doc "Execution stack at the point of allocation."]
    }
    [@@deriving yojson] [@@ocaml.doc "Heap profile sample."]
  end

  and SamplingProfile : sig
    type t = {
      samples : SamplingProfileNode.t list;
          [@key "samples"] [@ocaml.doc "No description provided"]
      modules : Module.t list;
          [@key "modules"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Array of heap profile samples."]
  end

  and Module : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Name of the module."]
      uuid : string; [@key "uuid"] [@ocaml.doc "UUID of the module."]
      baseAddress : string;
          [@key "baseAddress"]
          [@ocaml.doc
            "Base address where the module is loaded into memory. Encoded as a \
             decimal\n\
             or hexadecimal (0x prefixed) string."]
      size : number; [@key "size"] [@ocaml.doc "Size of the module in bytes."]
    }
    [@@deriving yojson] [@@ocaml.doc "Executable module information"]
  end
end = struct
  module rec PressureLevel : sig
    type _pressurelevel = [ `moderate | `critical ]

    val _pressurelevel_of_yojson : Yojson.Basic.t -> _pressurelevel
    val yojson_of__pressurelevel : _pressurelevel -> Yojson.Basic.t

    type t = _pressurelevel
    [@@deriving yojson] [@@ocaml.doc "Memory pressure level."]
  end = struct
    type _pressurelevel = [ `moderate | `critical ]

    let _pressurelevel_of_yojson = function
      | `String "moderate" -> `moderate
      | `String "critical" -> `critical
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__pressurelevel = function
      | `moderate -> `String "moderate"
      | `critical -> `String "critical"

    type t = _pressurelevel
    [@@deriving yojson] [@@ocaml.doc "Memory pressure level."]
  end

  and SamplingProfileNode : sig
    type t = {
      size : number;
          [@key "size"] [@ocaml.doc "Size of the sampled allocation."]
      total : number;
          [@key "total"] [@ocaml.doc "Total bytes attributed to this sample."]
      stack : string list;
          [@key "stack"]
          [@ocaml.doc "Execution stack at the point of allocation."]
    }
    [@@deriving yojson] [@@ocaml.doc "Heap profile sample."]
  end = struct
    type t = {
      size : number;
          [@key "size"] [@ocaml.doc "Size of the sampled allocation."]
      total : number;
          [@key "total"] [@ocaml.doc "Total bytes attributed to this sample."]
      stack : string list;
          [@key "stack"]
          [@ocaml.doc "Execution stack at the point of allocation."]
    }
    [@@deriving yojson] [@@ocaml.doc "Heap profile sample."]
  end

  and SamplingProfile : sig
    type t = {
      samples : SamplingProfileNode.t list;
          [@key "samples"] [@ocaml.doc "No description provided"]
      modules : Module.t list;
          [@key "modules"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Array of heap profile samples."]
  end = struct
    type t = {
      samples : SamplingProfileNode.t list;
          [@key "samples"] [@ocaml.doc "No description provided"]
      modules : Module.t list;
          [@key "modules"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Array of heap profile samples."]
  end

  and Module : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Name of the module."]
      uuid : string; [@key "uuid"] [@ocaml.doc "UUID of the module."]
      baseAddress : string;
          [@key "baseAddress"]
          [@ocaml.doc
            "Base address where the module is loaded into memory. Encoded as a \
             decimal\n\
             or hexadecimal (0x prefixed) string."]
      size : number; [@key "size"] [@ocaml.doc "Size of the module in bytes."]
    }
    [@@deriving yojson] [@@ocaml.doc "Executable module information"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Name of the module."]
      uuid : string; [@key "uuid"] [@ocaml.doc "UUID of the module."]
      baseAddress : string;
          [@key "baseAddress"]
          [@ocaml.doc
            "Base address where the module is loaded into memory. Encoded as a \
             decimal\n\
             or hexadecimal (0x prefixed) string."]
      size : number; [@key "size"] [@ocaml.doc "Size of the module in bytes."]
    }
    [@@deriving yojson] [@@ocaml.doc "Executable module information"]
  end
end

and Network : sig
  module rec ResourceType : sig
    type _resourcetype =
      [ `Document
      | `Stylesheet
      | `Image
      | `Media
      | `Font
      | `Script
      | `TextTrack
      | `XHR
      | `Fetch
      | `Prefetch
      | `EventSource
      | `WebSocket
      | `Manifest
      | `SignedExchange
      | `Ping
      | `CSPViolationReport
      | `Preflight
      | `Other ]

    val _resourcetype_of_yojson : Yojson.Basic.t -> _resourcetype
    val yojson_of__resourcetype : _resourcetype -> Yojson.Basic.t

    type t = _resourcetype
    [@@deriving yojson]
    [@@ocaml.doc "Resource type as it was perceived by the rendering engine."]
  end

  and LoaderId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique loader identifier."]
  end

  and RequestId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique request identifier."]
  end

  and InterceptionId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique intercepted request identifier."]
  end

  and ErrorReason : sig
    type _errorreason =
      [ `Failed
      | `Aborted
      | `TimedOut
      | `AccessDenied
      | `ConnectionClosed
      | `ConnectionReset
      | `ConnectionRefused
      | `ConnectionAborted
      | `ConnectionFailed
      | `NameNotResolved
      | `InternetDisconnected
      | `AddressUnreachable
      | `BlockedByClient
      | `BlockedByResponse ]

    val _errorreason_of_yojson : Yojson.Basic.t -> _errorreason
    val yojson_of__errorreason : _errorreason -> Yojson.Basic.t

    type t = _errorreason
    [@@deriving yojson] [@@ocaml.doc "Network level fetch failure reason."]
  end

  and TimeSinceEpoch : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc "UTC time in seconds, counted from January 1, 1970."]
  end

  and MonotonicTime : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc
      "Monotonically increasing time in seconds since an arbitrary point in \
       the past."]
  end

  and Headers : sig
    type t = assoc
    [@@deriving yojson]
    [@@ocaml.doc "Request / response headers as keys / values of JSON object."]
  end

  and ConnectionType : sig
    type _connectiontype =
      [ `none
      | `cellular2g
      | `cellular3g
      | `cellular4g
      | `bluetooth
      | `ethernet
      | `wifi
      | `wimax
      | `other ]

    val _connectiontype_of_yojson : Yojson.Basic.t -> _connectiontype
    val yojson_of__connectiontype : _connectiontype -> Yojson.Basic.t

    type t = _connectiontype
    [@@deriving yojson]
    [@@ocaml.doc
      "The underlying connection technology that the browser is supposedly \
       using."]
  end

  and CookieSameSite : sig
    type _cookiesamesite = [ `Strict | `Lax | `None ]

    val _cookiesamesite_of_yojson : Yojson.Basic.t -> _cookiesamesite
    val yojson_of__cookiesamesite : _cookiesamesite -> Yojson.Basic.t

    type t = _cookiesamesite
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the cookie's 'SameSite' status:\n\
       https://tools.ietf.org/html/draft-west-first-party-cookies"]
  end

  and CookiePriority : sig
    type _cookiepriority = [ `Low | `Medium | `High ]

    val _cookiepriority_of_yojson : Yojson.Basic.t -> _cookiepriority
    val yojson_of__cookiepriority : _cookiepriority -> Yojson.Basic.t

    type t = _cookiepriority
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the cookie's 'Priority' status:\n\
       https://tools.ietf.org/html/draft-west-cookie-priority-00"]
  end

  and CookieSourceScheme : sig
    type _cookiesourcescheme = [ `Unset | `NonSecure | `Secure ]

    val _cookiesourcescheme_of_yojson : Yojson.Basic.t -> _cookiesourcescheme
    val yojson_of__cookiesourcescheme : _cookiesourcescheme -> Yojson.Basic.t

    type t = _cookiesourcescheme
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the source scheme of the origin that originally set the \
       cookie.\n\
       A value of \"Unset\" allows protocol clients to emulate legacy cookie \
       scope for the scheme.\n\
       This is a temporary ability and it will be removed in the future."]
  end

  and ResourceTiming : sig
    type t = {
      requestTime : number;
          [@key "requestTime"]
          [@ocaml.doc
            "Timing's requestTime is a baseline in seconds, while the other \
             numbers are ticks in\n\
             milliseconds relatively to this requestTime."]
      proxyStart : number;
          [@key "proxyStart"] [@ocaml.doc "Started resolving proxy."]
      proxyEnd : number;
          [@key "proxyEnd"] [@ocaml.doc "Finished resolving proxy."]
      dnsStart : number;
          [@key "dnsStart"] [@ocaml.doc "Started DNS address resolve."]
      dnsEnd : number;
          [@key "dnsEnd"] [@ocaml.doc "Finished DNS address resolve."]
      connectStart : number;
          [@key "connectStart"]
          [@ocaml.doc "Started connecting to the remote host."]
      connectEnd : number;
          [@key "connectEnd"] [@ocaml.doc "Connected to the remote host."]
      sslStart : number; [@key "sslStart"] [@ocaml.doc "Started SSL handshake."]
      sslEnd : number; [@key "sslEnd"] [@ocaml.doc "Finished SSL handshake."]
      workerStart : number;
          [@key "workerStart"] [@ocaml.doc "Started running ServiceWorker."]
      workerReady : number;
          [@key "workerReady"] [@ocaml.doc "Finished Starting ServiceWorker."]
      workerFetchStart : number;
          [@key "workerFetchStart"] [@ocaml.doc "Started fetch event."]
      workerRespondWithSettled : number;
          [@key "workerRespondWithSettled"]
          [@ocaml.doc "Settled fetch event respondWith promise."]
      sendStart : number;
          [@key "sendStart"] [@ocaml.doc "Started sending request."]
      sendEnd : number;
          [@key "sendEnd"] [@ocaml.doc "Finished sending request."]
      pushStart : number;
          [@key "pushStart"]
          [@ocaml.doc "Time the server started pushing request."]
      pushEnd : number;
          [@key "pushEnd"]
          [@ocaml.doc "Time the server finished pushing request."]
      receiveHeadersStart : number;
          [@key "receiveHeadersStart"]
          [@ocaml.doc "Started receiving response headers."]
      receiveHeadersEnd : number;
          [@key "receiveHeadersEnd"]
          [@ocaml.doc "Finished receiving response headers."]
    }
    [@@deriving yojson] [@@ocaml.doc "Timing information for the request."]
  end

  and ResourcePriority : sig
    type _resourcepriority = [ `VeryLow | `Low | `Medium | `High | `VeryHigh ]

    val _resourcepriority_of_yojson : Yojson.Basic.t -> _resourcepriority
    val yojson_of__resourcepriority : _resourcepriority -> Yojson.Basic.t

    type t = _resourcepriority
    [@@deriving yojson] [@@ocaml.doc "Loading priority of a resource request."]
  end

  and PostDataEntry : sig
    type t = {
      bytes : string option;
          [@key "bytes"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Post data entry for HTTP request"]
  end

  and Request : sig
    type _request_referrerpolicy =
      [ `unsafe_url
      | `no_referrer_when_downgrade
      | `no_referrer
      | `origin
      | `origin_when_cross_origin
      | `same_origin
      | `strict_origin
      | `strict_origin_when_cross_origin ]

    val _request_referrerpolicy_of_yojson :
      Yojson.Basic.t -> _request_referrerpolicy

    val yojson_of__request_referrerpolicy :
      _request_referrerpolicy -> Yojson.Basic.t

    type t = {
      url : string; [@key "url"] [@ocaml.doc "Request URL (without fragment)."]
      urlFragment : string option;
          [@key "urlFragment"]
          [@yojson.option]
          [@ocaml.doc
            "Fragment of the requested URL starting with hash, if present."]
      method_ : string; [@key "method"] [@ocaml.doc "HTTP request method."]
      headers : Headers.t; [@key "headers"] [@ocaml.doc "HTTP request headers."]
      postData : string option;
          [@key "postData"]
          [@yojson.option]
          [@ocaml.doc "HTTP POST request data."]
      hasPostData : bool option;
          [@key "hasPostData"]
          [@yojson.option]
          [@ocaml.doc
            "True when the request has POST data. Note that postData might \
             still be omitted when this flag is true when the data is too \
             long."]
      postDataEntries : PostDataEntry.t list option;
          [@key "postDataEntries"]
          [@yojson.option]
          [@ocaml.doc
            "Request body elements. This will be converted from base64 to \
             binary"]
      mixedContentType : Security.MixedContentType.t option;
          [@key "mixedContentType"]
          [@yojson.option]
          [@ocaml.doc "The mixed content type of the request."]
      initialPriority : ResourcePriority.t;
          [@key "initialPriority"]
          [@ocaml.doc
            "Priority of the resource request at the time request is sent."]
      referrerPolicy : _request_referrerpolicy;
          [@key "referrerPolicy"]
          [@ocaml.doc
            "The referrer policy of the request, as defined in \
             https://www.w3.org/TR/referrer-policy/"]
      isLinkPreload : bool option;
          [@key "isLinkPreload"]
          [@yojson.option]
          [@ocaml.doc "Whether is loaded via link preload."]
      trustTokenParams : TrustTokenParams.t option;
          [@key "trustTokenParams"]
          [@yojson.option]
          [@ocaml.doc
            "Set for requests when the TrustToken API is used. Contains the \
             parameters\n\
             passed by the developer (e.g. via \"fetch\") as understood by the \
             backend."]
      isSameSite : bool option;
          [@key "isSameSite"]
          [@yojson.option]
          [@ocaml.doc
            "True if this resource request is considered to be the 'same site' \
             as the\n\
             request correspondinfg to the main frame."]
    }
    [@@deriving yojson] [@@ocaml.doc "HTTP request data."]
  end

  and SignedCertificateTimestamp : sig
    type t = {
      status : string; [@key "status"] [@ocaml.doc "Validation status."]
      origin : string; [@key "origin"] [@ocaml.doc "Origin."]
      logDescription : string;
          [@key "logDescription"] [@ocaml.doc "Log name / description."]
      logId : string; [@key "logId"] [@ocaml.doc "Log ID."]
      timestamp : number;
          [@key "timestamp"]
          [@ocaml.doc
            "Issuance date. Unlike TimeSinceEpoch, this contains the number of\n\
             milliseconds since January 1, 1970, UTC, not the number of \
             seconds."]
      hashAlgorithm : string;
          [@key "hashAlgorithm"] [@ocaml.doc "Hash algorithm."]
      signatureAlgorithm : string;
          [@key "signatureAlgorithm"] [@ocaml.doc "Signature algorithm."]
      signatureData : string;
          [@key "signatureData"] [@ocaml.doc "Signature data."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Details of a signed certificate timestamp (SCT)."]
  end

  and SecurityDetails : sig
    type t = {
      protocol : string;
          [@key "protocol"]
          [@ocaml.doc "Protocol name (e.g. \"TLS 1.2\" or \"QUIC\")."]
      keyExchange : string;
          [@key "keyExchange"]
          [@ocaml.doc
            "Key Exchange used by the connection, or the empty string if not \
             applicable."]
      keyExchangeGroup : string option;
          [@key "keyExchangeGroup"]
          [@yojson.option]
          [@ocaml.doc "(EC)DH group used by the connection, if applicable."]
      cipher : string; [@key "cipher"] [@ocaml.doc "Cipher name."]
      mac : string option;
          [@key "mac"]
          [@yojson.option]
          [@ocaml.doc
            "TLS MAC. Note that AEAD ciphers do not have separate MACs."]
      certificateId : Security.CertificateId.t;
          [@key "certificateId"] [@ocaml.doc "Certificate ID value."]
      subjectName : string;
          [@key "subjectName"] [@ocaml.doc "Certificate subject name."]
      sanList : string list;
          [@key "sanList"]
          [@ocaml.doc
            "Subject Alternative Name (SAN) DNS names and IP addresses."]
      issuer : string; [@key "issuer"] [@ocaml.doc "Name of the issuing CA."]
      validFrom : TimeSinceEpoch.t;
          [@key "validFrom"] [@ocaml.doc "Certificate valid from date."]
      validTo : TimeSinceEpoch.t;
          [@key "validTo"] [@ocaml.doc "Certificate valid to (expiration) date"]
      signedCertificateTimestampList : SignedCertificateTimestamp.t list;
          [@key "signedCertificateTimestampList"]
          [@ocaml.doc "List of signed certificate timestamps (SCTs)."]
      certificateTransparencyCompliance : CertificateTransparencyCompliance.t;
          [@key "certificateTransparencyCompliance"]
          [@ocaml.doc
            "Whether the request complied with Certificate Transparency policy"]
      serverSignatureAlgorithm : number option;
          [@key "serverSignatureAlgorithm"]
          [@yojson.option]
          [@ocaml.doc
            "The signature algorithm used by the server in the TLS server \
             signature,\n\
             represented as a TLS SignatureScheme code point. Omitted if not\n\
             applicable or not known."]
      encryptedClientHello : bool;
          [@key "encryptedClientHello"]
          [@ocaml.doc "Whether the connection used Encrypted ClientHello"]
    }
    [@@deriving yojson] [@@ocaml.doc "Security details about a request."]
  end

  and CertificateTransparencyCompliance : sig
    type _certificatetransparencycompliance =
      [ `unknown | `not_compliant | `compliant ]

    val _certificatetransparencycompliance_of_yojson :
      Yojson.Basic.t -> _certificatetransparencycompliance

    val yojson_of__certificatetransparencycompliance :
      _certificatetransparencycompliance -> Yojson.Basic.t

    type t = _certificatetransparencycompliance
    [@@deriving yojson]
    [@@ocaml.doc
      "Whether the request complied with Certificate Transparency policy."]
  end

  and BlockedReason : sig
    type _blockedreason =
      [ `other
      | `csp
      | `mixed_content
      | `origin
      | `inspector
      | `subresource_filter
      | `content_type
      | `coep_frame_resource_needs_coep_header
      | `coop_sandboxed_iframe_cannot_navigate_to_coop_page
      | `corp_not_same_origin
      | `corp_not_same_origin_after_defaulted_to_same_origin_by_coep
      | `corp_not_same_site ]

    val _blockedreason_of_yojson : Yojson.Basic.t -> _blockedreason
    val yojson_of__blockedreason : _blockedreason -> Yojson.Basic.t

    type t = _blockedreason
    [@@deriving yojson] [@@ocaml.doc "The reason why request was blocked."]
  end

  and CorsError : sig
    type _corserror =
      [ `DisallowedByMode
      | `InvalidResponse
      | `WildcardOriginNotAllowed
      | `MissingAllowOriginHeader
      | `MultipleAllowOriginValues
      | `InvalidAllowOriginValue
      | `AllowOriginMismatch
      | `InvalidAllowCredentials
      | `CorsDisabledScheme
      | `PreflightInvalidStatus
      | `PreflightDisallowedRedirect
      | `PreflightWildcardOriginNotAllowed
      | `PreflightMissingAllowOriginHeader
      | `PreflightMultipleAllowOriginValues
      | `PreflightInvalidAllowOriginValue
      | `PreflightAllowOriginMismatch
      | `PreflightInvalidAllowCredentials
      | `PreflightMissingAllowExternal
      | `PreflightInvalidAllowExternal
      | `PreflightMissingAllowPrivateNetwork
      | `PreflightInvalidAllowPrivateNetwork
      | `InvalidAllowMethodsPreflightResponse
      | `InvalidAllowHeadersPreflightResponse
      | `MethodDisallowedByPreflightResponse
      | `HeaderDisallowedByPreflightResponse
      | `RedirectContainsCredentials
      | `InsecurePrivateNetwork
      | `InvalidPrivateNetworkAccess
      | `UnexpectedPrivateNetworkAccess
      | `NoCorsRedirectModeNotFollow
      | `PreflightMissingPrivateNetworkAccessId
      | `PreflightMissingPrivateNetworkAccessName
      | `PrivateNetworkAccessPermissionUnavailable
      | `PrivateNetworkAccessPermissionDenied ]

    val _corserror_of_yojson : Yojson.Basic.t -> _corserror
    val yojson_of__corserror : _corserror -> Yojson.Basic.t

    type t = _corserror
    [@@deriving yojson] [@@ocaml.doc "The reason why request was blocked."]
  end

  and CorsErrorStatus : sig
    type t = {
      corsError : CorsError.t;
          [@key "corsError"] [@ocaml.doc "No description provided"]
      failedParameter : string;
          [@key "failedParameter"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ServiceWorkerResponseSource : sig
    type _serviceworkerresponsesource =
      [ `cache_storage | `http_cache | `fallback_code | `network ]

    val _serviceworkerresponsesource_of_yojson :
      Yojson.Basic.t -> _serviceworkerresponsesource

    val yojson_of__serviceworkerresponsesource :
      _serviceworkerresponsesource -> Yojson.Basic.t

    type t = _serviceworkerresponsesource
    [@@deriving yojson] [@@ocaml.doc "Source of serviceworker response."]
  end

  and TrustTokenParams : sig
    type _trusttokenparams_refreshpolicy = [ `UseCached | `Refresh ]

    val _trusttokenparams_refreshpolicy_of_yojson :
      Yojson.Basic.t -> _trusttokenparams_refreshpolicy

    val yojson_of__trusttokenparams_refreshpolicy :
      _trusttokenparams_refreshpolicy -> Yojson.Basic.t

    type t = {
      operation : TrustTokenOperationType.t;
          [@key "operation"] [@ocaml.doc "No description provided"]
      refreshPolicy : _trusttokenparams_refreshpolicy;
          [@key "refreshPolicy"]
          [@ocaml.doc
            "Only set for \"token-redemption\" operation and determine whether\n\
             to request a fresh SRR or use a still valid cached SRR."]
      issuers : string list option;
          [@key "issuers"]
          [@yojson.option]
          [@ocaml.doc
            "Origins of issuers from whom to request tokens or redemption\n\
             records."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Determines what type of Trust Token operation is executed and\n\
       depending on the type, some additional parameters. The values\n\
       are specified in third_party/blink/renderer/core/fetch/trust_token.idl."]
  end

  and TrustTokenOperationType : sig
    type _trusttokenoperationtype = [ `Issuance | `Redemption | `Signing ]

    val _trusttokenoperationtype_of_yojson :
      Yojson.Basic.t -> _trusttokenoperationtype

    val yojson_of__trusttokenoperationtype :
      _trusttokenoperationtype -> Yojson.Basic.t

    type t = _trusttokenoperationtype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AlternateProtocolUsage : sig
    type _alternateprotocolusage =
      [ `alternativeJobWonWithoutRace
      | `alternativeJobWonRace
      | `mainJobWonRace
      | `mappingMissing
      | `broken
      | `dnsAlpnH3JobWonWithoutRace
      | `dnsAlpnH3JobWonRace
      | `unspecifiedReason ]

    val _alternateprotocolusage_of_yojson :
      Yojson.Basic.t -> _alternateprotocolusage

    val yojson_of__alternateprotocolusage :
      _alternateprotocolusage -> Yojson.Basic.t

    type t = _alternateprotocolusage
    [@@deriving yojson]
    [@@ocaml.doc
      "The reason why Chrome uses a specific transport protocol for HTTP \
       semantics."]
  end

  and Response : sig
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "Response URL. This URL can be different from CachedResource.url \
             in case of redirect."]
      status : number; [@key "status"] [@ocaml.doc "HTTP response status code."]
      statusText : string;
          [@key "statusText"] [@ocaml.doc "HTTP response status text."]
      headers : Headers.t;
          [@key "headers"] [@ocaml.doc "HTTP response headers."]
      headersText : string option;
          [@key "headersText"]
          [@yojson.option]
          [@ocaml.doc
            "HTTP response headers text. This has been replaced by the headers \
             in Network.responseReceivedExtraInfo."]
      mimeType : string;
          [@key "mimeType"]
          [@ocaml.doc "Resource mimeType as determined by the browser."]
      requestHeaders : Headers.t option;
          [@key "requestHeaders"]
          [@yojson.option]
          [@ocaml.doc
            "Refined HTTP request headers that were actually transmitted over \
             the network."]
      requestHeadersText : string option;
          [@key "requestHeadersText"]
          [@yojson.option]
          [@ocaml.doc
            "HTTP request headers text. This has been replaced by the headers \
             in Network.requestWillBeSentExtraInfo."]
      connectionReused : bool;
          [@key "connectionReused"]
          [@ocaml.doc
            "Specifies whether physical connection was actually reused for \
             this request."]
      connectionId : number;
          [@key "connectionId"]
          [@ocaml.doc
            "Physical connection id that was actually used for this request."]
      remoteIPAddress : string option;
          [@key "remoteIPAddress"]
          [@yojson.option]
          [@ocaml.doc "Remote IP address."]
      remotePort : number option;
          [@key "remotePort"] [@yojson.option] [@ocaml.doc "Remote port."]
      fromDiskCache : bool option;
          [@key "fromDiskCache"]
          [@yojson.option]
          [@ocaml.doc
            "Specifies that the request was served from the disk cache."]
      fromServiceWorker : bool option;
          [@key "fromServiceWorker"]
          [@yojson.option]
          [@ocaml.doc
            "Specifies that the request was served from the ServiceWorker."]
      fromPrefetchCache : bool option;
          [@key "fromPrefetchCache"]
          [@yojson.option]
          [@ocaml.doc
            "Specifies that the request was served from the prefetch cache."]
      encodedDataLength : number;
          [@key "encodedDataLength"]
          [@ocaml.doc "Total number of bytes received for this request so far."]
      timing : ResourceTiming.t option;
          [@key "timing"]
          [@yojson.option]
          [@ocaml.doc "Timing information for the given request."]
      serviceWorkerResponseSource : ServiceWorkerResponseSource.t option;
          [@key "serviceWorkerResponseSource"]
          [@yojson.option]
          [@ocaml.doc "Response source of response from ServiceWorker."]
      responseTime : TimeSinceEpoch.t option;
          [@key "responseTime"]
          [@yojson.option]
          [@ocaml.doc "The time at which the returned response was generated."]
      cacheStorageCacheName : string option;
          [@key "cacheStorageCacheName"]
          [@yojson.option]
          [@ocaml.doc "Cache Storage Cache Name."]
      protocol : string option;
          [@key "protocol"]
          [@yojson.option]
          [@ocaml.doc "Protocol used to fetch this request."]
      alternateProtocolUsage : AlternateProtocolUsage.t option;
          [@key "alternateProtocolUsage"]
          [@yojson.option]
          [@ocaml.doc
            "The reason why Chrome uses a specific transport protocol for HTTP \
             semantics."]
      securityState : Security.SecurityState.t;
          [@key "securityState"]
          [@ocaml.doc "Security state of the request resource."]
      securityDetails : SecurityDetails.t option;
          [@key "securityDetails"]
          [@yojson.option]
          [@ocaml.doc "Security details for the request."]
    }
    [@@deriving yojson] [@@ocaml.doc "HTTP response data."]
  end

  and WebSocketRequest : sig
    type t = {
      headers : Headers.t; [@key "headers"] [@ocaml.doc "HTTP request headers."]
    }
    [@@deriving yojson] [@@ocaml.doc "WebSocket request data."]
  end

  and WebSocketResponse : sig
    type t = {
      status : number; [@key "status"] [@ocaml.doc "HTTP response status code."]
      statusText : string;
          [@key "statusText"] [@ocaml.doc "HTTP response status text."]
      headers : Headers.t;
          [@key "headers"] [@ocaml.doc "HTTP response headers."]
      headersText : string option;
          [@key "headersText"]
          [@yojson.option]
          [@ocaml.doc "HTTP response headers text."]
      requestHeaders : Headers.t option;
          [@key "requestHeaders"]
          [@yojson.option]
          [@ocaml.doc "HTTP request headers."]
      requestHeadersText : string option;
          [@key "requestHeadersText"]
          [@yojson.option]
          [@ocaml.doc "HTTP request headers text."]
    }
    [@@deriving yojson] [@@ocaml.doc "WebSocket response data."]
  end

  and WebSocketFrame : sig
    type t = {
      opcode : number; [@key "opcode"] [@ocaml.doc "WebSocket message opcode."]
      mask : bool; [@key "mask"] [@ocaml.doc "WebSocket message mask."]
      payloadData : string;
          [@key "payloadData"]
          [@ocaml.doc
            "WebSocket message payload data.\n\
             If the opcode is 1, this is a text message and payloadData is a \
             UTF-8 string.\n\
             If the opcode isn't 1, then payloadData is a base64 encoded \
             string representing binary data."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "WebSocket message data. This represents an entire WebSocket message, \
       not just a fragmented frame as the name suggests."]
  end

  and CachedResource : sig
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "Resource URL. This is the url of the original network request."]
      type_ : ResourceType.t;
          [@key "type"] [@ocaml.doc "Type of this resource."]
      response : Response.t option;
          [@key "response"]
          [@yojson.option]
          [@ocaml.doc "Cached response data."]
      bodySize : number;
          [@key "bodySize"] [@ocaml.doc "Cached response body size."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the cached resource."]
  end

  and Initiator : sig
    type _initiator_type =
      [ `parser | `script | `preload | `SignedExchange | `preflight | `other ]

    val _initiator_type_of_yojson : Yojson.Basic.t -> _initiator_type
    val yojson_of__initiator_type : _initiator_type -> Yojson.Basic.t

    type t = {
      type_ : _initiator_type;
          [@key "type"] [@ocaml.doc "Type of this initiator."]
      stack : Runtime.StackTrace.t option;
          [@key "stack"]
          [@yojson.option]
          [@ocaml.doc "Initiator JavaScript stack trace, set for Script only."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc
            "Initiator URL, set for Parser type or for Script type (when \
             script is importing module) or for SignedExchange type."]
      lineNumber : number option;
          [@key "lineNumber"]
          [@yojson.option]
          [@ocaml.doc
            "Initiator line number, set for Parser type or for Script type \
             (when script is importing\n\
             module) (0-based)."]
      columnNumber : number option;
          [@key "columnNumber"]
          [@yojson.option]
          [@ocaml.doc
            "Initiator column number, set for Parser type or for Script type \
             (when script is importing\n\
             module) (0-based)."]
      requestId : RequestId.t option;
          [@key "requestId"]
          [@yojson.option]
          [@ocaml.doc
            "Set if another request triggered this request (e.g. preflight)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the request initiator."]
  end

  and Cookie : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Cookie name."]
      value : string; [@key "value"] [@ocaml.doc "Cookie value."]
      domain : string; [@key "domain"] [@ocaml.doc "Cookie domain."]
      path : string; [@key "path"] [@ocaml.doc "Cookie path."]
      expires : number;
          [@key "expires"]
          [@ocaml.doc
            "Cookie expiration date as the number of seconds since the UNIX \
             epoch."]
      size : number; [@key "size"] [@ocaml.doc "Cookie size."]
      httpOnly : bool;
          [@key "httpOnly"] [@ocaml.doc "True if cookie is http-only."]
      secure : bool; [@key "secure"] [@ocaml.doc "True if cookie is secure."]
      session : bool;
          [@key "session"] [@ocaml.doc "True in case of session cookie."]
      sameSite : CookieSameSite.t option;
          [@key "sameSite"]
          [@yojson.option]
          [@ocaml.doc "Cookie SameSite type."]
      priority : CookiePriority.t;
          [@key "priority"] [@ocaml.doc "Cookie Priority"]
      sameParty : bool;
          [@key "sameParty"] [@ocaml.doc "True if cookie is SameParty."]
      sourceScheme : CookieSourceScheme.t;
          [@key "sourceScheme"] [@ocaml.doc "Cookie source scheme type."]
      sourcePort : number;
          [@key "sourcePort"]
          [@ocaml.doc
            "Cookie source port. Valid values are {-1, [1, 65535]}, -1 \
             indicates an unspecified port.\n\
             An unspecified port value allows protocol clients to emulate \
             legacy cookie scope for the port.\n\
             This is a temporary ability and it will be removed in the future."]
      partitionKey : string option;
          [@key "partitionKey"]
          [@yojson.option]
          [@ocaml.doc
            "Cookie partition key. The site of the top-level URL the browser \
             was visiting at the start\n\
             of the request to the endpoint that set the cookie."]
      partitionKeyOpaque : bool option;
          [@key "partitionKeyOpaque"]
          [@yojson.option]
          [@ocaml.doc "True if cookie partition key is opaque."]
    }
    [@@deriving yojson] [@@ocaml.doc "Cookie object"]
  end

  and SetCookieBlockedReason : sig
    type _setcookieblockedreason =
      [ `SecureOnly
      | `SameSiteStrict
      | `SameSiteLax
      | `SameSiteUnspecifiedTreatedAsLax
      | `SameSiteNoneInsecure
      | `UserPreferences
      | `ThirdPartyBlockedInFirstPartySet
      | `SyntaxError
      | `SchemeNotSupported
      | `OverwriteSecure
      | `InvalidDomain
      | `InvalidPrefix
      | `UnknownError
      | `SchemefulSameSiteStrict
      | `SchemefulSameSiteLax
      | `SchemefulSameSiteUnspecifiedTreatedAsLax
      | `SamePartyFromCrossPartyContext
      | `SamePartyConflictsWithOtherAttributes
      | `NameValuePairExceedsMaxSize
      | `DisallowedCharacter ]

    val _setcookieblockedreason_of_yojson :
      Yojson.Basic.t -> _setcookieblockedreason

    val yojson_of__setcookieblockedreason :
      _setcookieblockedreason -> Yojson.Basic.t

    type t = _setcookieblockedreason
    [@@deriving yojson]
    [@@ocaml.doc
      "Types of reasons why a cookie may not be stored from a response."]
  end

  and CookieBlockedReason : sig
    type _cookieblockedreason =
      [ `SecureOnly
      | `NotOnPath
      | `DomainMismatch
      | `SameSiteStrict
      | `SameSiteLax
      | `SameSiteUnspecifiedTreatedAsLax
      | `SameSiteNoneInsecure
      | `UserPreferences
      | `ThirdPartyBlockedInFirstPartySet
      | `UnknownError
      | `SchemefulSameSiteStrict
      | `SchemefulSameSiteLax
      | `SchemefulSameSiteUnspecifiedTreatedAsLax
      | `SamePartyFromCrossPartyContext
      | `NameValuePairExceedsMaxSize ]

    val _cookieblockedreason_of_yojson : Yojson.Basic.t -> _cookieblockedreason
    val yojson_of__cookieblockedreason : _cookieblockedreason -> Yojson.Basic.t

    type t = _cookieblockedreason
    [@@deriving yojson]
    [@@ocaml.doc
      "Types of reasons why a cookie may not be sent with a request."]
  end

  and BlockedSetCookieWithReason : sig
    type t = {
      blockedReasons : SetCookieBlockedReason.t list;
          [@key "blockedReasons"]
          [@ocaml.doc "The reason(s) this cookie was blocked."]
      cookieLine : string;
          [@key "cookieLine"]
          [@ocaml.doc
            "The string representing this individual cookie as it would appear \
             in the header.\n\
             This is not the entire \"cookie\" or \"set-cookie\" header which \
             could have multiple cookies."]
      cookie : Cookie.t option;
          [@key "cookie"]
          [@yojson.option]
          [@ocaml.doc
            "The cookie object which represents the cookie which was not \
             stored. It is optional because\n\
             sometimes complete cookie information is not available, such as \
             in the case of parsing\n\
             errors."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A cookie which was not stored from a response with the corresponding \
       reason."]
  end

  and BlockedCookieWithReason : sig
    type t = {
      blockedReasons : CookieBlockedReason.t list;
          [@key "blockedReasons"]
          [@ocaml.doc "The reason(s) the cookie was blocked."]
      cookie : Cookie.t;
          [@key "cookie"]
          [@ocaml.doc
            "The cookie object representing the cookie which was not sent."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A cookie with was not sent with a request with the corresponding reason."]
  end

  and CookieParam : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Cookie name."]
      value : string; [@key "value"] [@ocaml.doc "Cookie value."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc
            "The request-URI to associate with the setting of the cookie. This \
             value can affect the\n\
             default domain, path, source port, and source scheme values of \
             the created cookie."]
      domain : string option;
          [@key "domain"] [@yojson.option] [@ocaml.doc "Cookie domain."]
      path : string option;
          [@key "path"] [@yojson.option] [@ocaml.doc "Cookie path."]
      secure : bool option;
          [@key "secure"]
          [@yojson.option]
          [@ocaml.doc "True if cookie is secure."]
      httpOnly : bool option;
          [@key "httpOnly"]
          [@yojson.option]
          [@ocaml.doc "True if cookie is http-only."]
      sameSite : CookieSameSite.t option;
          [@key "sameSite"]
          [@yojson.option]
          [@ocaml.doc "Cookie SameSite type."]
      expires : TimeSinceEpoch.t option;
          [@key "expires"]
          [@yojson.option]
          [@ocaml.doc "Cookie expiration date, session cookie if not set"]
      priority : CookiePriority.t option;
          [@key "priority"] [@yojson.option] [@ocaml.doc "Cookie Priority."]
      sameParty : bool option;
          [@key "sameParty"]
          [@yojson.option]
          [@ocaml.doc "True if cookie is SameParty."]
      sourceScheme : CookieSourceScheme.t option;
          [@key "sourceScheme"]
          [@yojson.option]
          [@ocaml.doc "Cookie source scheme type."]
      sourcePort : number option;
          [@key "sourcePort"]
          [@yojson.option]
          [@ocaml.doc
            "Cookie source port. Valid values are {-1, [1, 65535]}, -1 \
             indicates an unspecified port.\n\
             An unspecified port value allows protocol clients to emulate \
             legacy cookie scope for the port.\n\
             This is a temporary ability and it will be removed in the future."]
      partitionKey : string option;
          [@key "partitionKey"]
          [@yojson.option]
          [@ocaml.doc
            "Cookie partition key. The site of the top-level URL the browser \
             was visiting at the start\n\
             of the request to the endpoint that set the cookie.\n\
             If not set, the cookie will be set as not partitioned."]
    }
    [@@deriving yojson] [@@ocaml.doc "Cookie parameter object"]
  end

  and AuthChallenge : sig
    type _authchallenge_source = [ `Server | `Proxy ]

    val _authchallenge_source_of_yojson :
      Yojson.Basic.t -> _authchallenge_source

    val yojson_of__authchallenge_source :
      _authchallenge_source -> Yojson.Basic.t

    type t = {
      source : _authchallenge_source option;
          [@key "source"]
          [@yojson.option]
          [@ocaml.doc "Source of the authentication challenge."]
      origin : string; [@key "origin"] [@ocaml.doc "Origin of the challenger."]
      scheme : string;
          [@key "scheme"]
          [@ocaml.doc "The authentication scheme used, such as basic or digest"]
      realm : string;
          [@key "realm"]
          [@ocaml.doc "The realm of the challenge. May be empty."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Authorization challenge for HTTP status code 401 or 407."]
  end

  and AuthChallengeResponse : sig
    type _authchallengeresponse_response =
      [ `Default | `CancelAuth | `ProvideCredentials ]

    val _authchallengeresponse_response_of_yojson :
      Yojson.Basic.t -> _authchallengeresponse_response

    val yojson_of__authchallengeresponse_response :
      _authchallengeresponse_response -> Yojson.Basic.t

    type t = {
      response : _authchallengeresponse_response;
          [@key "response"]
          [@ocaml.doc
            "The decision on what to do in response to the authorization \
             challenge.  Default means\n\
             deferring to the default behavior of the net stack, which will \
             likely either the Cancel\n\
             authentication or display a popup dialog box."]
      username : string option;
          [@key "username"]
          [@yojson.option]
          [@ocaml.doc
            "The username to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
      password : string option;
          [@key "password"]
          [@yojson.option]
          [@ocaml.doc
            "The password to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
    }
    [@@deriving yojson] [@@ocaml.doc "Response to an AuthChallenge."]
  end

  and InterceptionStage : sig
    type _interceptionstage = [ `Request | `HeadersReceived ]

    val _interceptionstage_of_yojson : Yojson.Basic.t -> _interceptionstage
    val yojson_of__interceptionstage : _interceptionstage -> Yojson.Basic.t

    type t = _interceptionstage
    [@@deriving yojson]
    [@@ocaml.doc
      "Stages of the interception to begin intercepting. Request will \
       intercept before the request is\n\
       sent. Response will intercept after the response is received."]
  end

  and RequestPattern : sig
    type t = {
      urlPattern : string option;
          [@key "urlPattern"]
          [@yojson.option]
          [@ocaml.doc
            "Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are \
             allowed. Escape character is\n\
             backslash. Omitting is equivalent to `\"*\"`."]
      resourceType : ResourceType.t option;
          [@key "resourceType"]
          [@yojson.option]
          [@ocaml.doc
            "If set, only requests for matching resource types will be \
             intercepted."]
      interceptionStage : InterceptionStage.t option;
          [@key "interceptionStage"]
          [@yojson.option]
          [@ocaml.doc
            "Stage at which to begin intercepting requests. Default is Request."]
    }
    [@@deriving yojson] [@@ocaml.doc "Request pattern for interception."]
  end

  and SignedExchangeSignature : sig
    type t = {
      label : string;
          [@key "label"] [@ocaml.doc "Signed exchange signature label."]
      signature : string;
          [@key "signature"]
          [@ocaml.doc "The hex string of signed exchange signature."]
      integrity : string;
          [@key "integrity"] [@ocaml.doc "Signed exchange signature integrity."]
      certUrl : string option;
          [@key "certUrl"]
          [@yojson.option]
          [@ocaml.doc "Signed exchange signature cert Url."]
      certSha256 : string option;
          [@key "certSha256"]
          [@yojson.option]
          [@ocaml.doc
            "The hex string of signed exchange signature cert sha256."]
      validityUrl : string;
          [@key "validityUrl"]
          [@ocaml.doc "Signed exchange signature validity Url."]
      date : number;
          [@key "date"] [@ocaml.doc "Signed exchange signature date."]
      expires : number;
          [@key "expires"] [@ocaml.doc "Signed exchange signature expires."]
      certificates : string list option;
          [@key "certificates"]
          [@yojson.option]
          [@ocaml.doc "The encoded certificates."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a signed exchange signature.\n\
       https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#rfc.section.3.1"]
  end

  and SignedExchangeHeader : sig
    type t = {
      requestUrl : string;
          [@key "requestUrl"] [@ocaml.doc "Signed exchange request URL."]
      responseCode : number;
          [@key "responseCode"] [@ocaml.doc "Signed exchange response code."]
      responseHeaders : Headers.t;
          [@key "responseHeaders"]
          [@ocaml.doc "Signed exchange response headers."]
      signatures : SignedExchangeSignature.t list;
          [@key "signatures"] [@ocaml.doc "Signed exchange response signature."]
      headerIntegrity : string;
          [@key "headerIntegrity"]
          [@ocaml.doc
            "Signed exchange header integrity hash in the form of \
             `sha256-<base64-hash-value>`."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a signed exchange header.\n\
       https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation"]
  end

  and SignedExchangeErrorField : sig
    type _signedexchangeerrorfield =
      [ `signatureSig
      | `signatureIntegrity
      | `signatureCertUrl
      | `signatureCertSha256
      | `signatureValidityUrl
      | `signatureTimestamps ]

    val _signedexchangeerrorfield_of_yojson :
      Yojson.Basic.t -> _signedexchangeerrorfield

    val yojson_of__signedexchangeerrorfield :
      _signedexchangeerrorfield -> Yojson.Basic.t

    type t = _signedexchangeerrorfield
    [@@deriving yojson]
    [@@ocaml.doc "Field type for a signed exchange related error."]
  end

  and SignedExchangeError : sig
    type t = {
      message : string; [@key "message"] [@ocaml.doc "Error message."]
      signatureIndex : number option;
          [@key "signatureIndex"]
          [@yojson.option]
          [@ocaml.doc "The index of the signature which caused the error."]
      errorField : SignedExchangeErrorField.t option;
          [@key "errorField"]
          [@yojson.option]
          [@ocaml.doc "The field which caused the error."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about a signed exchange response."]
  end

  and SignedExchangeInfo : sig
    type t = {
      outerResponse : Response.t;
          [@key "outerResponse"]
          [@ocaml.doc
            "The outer response of signed HTTP exchange which was received \
             from network."]
      header : SignedExchangeHeader.t option;
          [@key "header"]
          [@yojson.option]
          [@ocaml.doc "Information about the signed exchange header."]
      securityDetails : SecurityDetails.t option;
          [@key "securityDetails"]
          [@yojson.option]
          [@ocaml.doc "Security details for the signed exchange header."]
      errors : SignedExchangeError.t list option;
          [@key "errors"]
          [@yojson.option]
          [@ocaml.doc "Errors occurred while handling the signed exchagne."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about a signed exchange response."]
  end

  and ContentEncoding : sig
    type _contentencoding = [ `deflate | `gzip | `br | `zstd ]

    val _contentencoding_of_yojson : Yojson.Basic.t -> _contentencoding
    val yojson_of__contentencoding : _contentencoding -> Yojson.Basic.t

    type t = _contentencoding
    [@@deriving yojson]
    [@@ocaml.doc "List of content encodings supported by the backend."]
  end

  and PrivateNetworkRequestPolicy : sig
    type _privatenetworkrequestpolicy =
      [ `Allow
      | `BlockFromInsecureToMorePrivate
      | `WarnFromInsecureToMorePrivate
      | `PreflightBlock
      | `PreflightWarn ]

    val _privatenetworkrequestpolicy_of_yojson :
      Yojson.Basic.t -> _privatenetworkrequestpolicy

    val yojson_of__privatenetworkrequestpolicy :
      _privatenetworkrequestpolicy -> Yojson.Basic.t

    type t = _privatenetworkrequestpolicy
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and IPAddressSpace : sig
    type _ipaddressspace = [ `Local | `Private | `Public | `Unknown ]

    val _ipaddressspace_of_yojson : Yojson.Basic.t -> _ipaddressspace
    val yojson_of__ipaddressspace : _ipaddressspace -> Yojson.Basic.t

    type t = _ipaddressspace
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ConnectTiming : sig
    type t = {
      requestTime : number;
          [@key "requestTime"]
          [@ocaml.doc
            "Timing's requestTime is a baseline in seconds, while the other \
             numbers are ticks in\n\
             milliseconds relatively to this requestTime. Matches \
             ResourceTiming's requestTime for\n\
             the same request (but not for redirected requests)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ClientSecurityState : sig
    type t = {
      initiatorIsSecureContext : bool;
          [@key "initiatorIsSecureContext"]
          [@ocaml.doc "No description provided"]
      initiatorIPAddressSpace : IPAddressSpace.t;
          [@key "initiatorIPAddressSpace"]
          [@ocaml.doc "No description provided"]
      privateNetworkRequestPolicy : PrivateNetworkRequestPolicy.t;
          [@key "privateNetworkRequestPolicy"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CrossOriginOpenerPolicyValue : sig
    type _crossoriginopenerpolicyvalue =
      [ `SameOrigin
      | `SameOriginAllowPopups
      | `RestrictProperties
      | `UnsafeNone
      | `SameOriginPlusCoep
      | `RestrictPropertiesPlusCoep ]

    val _crossoriginopenerpolicyvalue_of_yojson :
      Yojson.Basic.t -> _crossoriginopenerpolicyvalue

    val yojson_of__crossoriginopenerpolicyvalue :
      _crossoriginopenerpolicyvalue -> Yojson.Basic.t

    type t = _crossoriginopenerpolicyvalue
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CrossOriginOpenerPolicyStatus : sig
    type t = {
      value : CrossOriginOpenerPolicyValue.t;
          [@key "value"] [@ocaml.doc "No description provided"]
      reportOnlyValue : CrossOriginOpenerPolicyValue.t;
          [@key "reportOnlyValue"] [@ocaml.doc "No description provided"]
      reportingEndpoint : string option;
          [@key "reportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      reportOnlyReportingEndpoint : string option;
          [@key "reportOnlyReportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CrossOriginEmbedderPolicyValue : sig
    type _crossoriginembedderpolicyvalue =
      [ `None | `Credentialless | `RequireCorp ]

    val _crossoriginembedderpolicyvalue_of_yojson :
      Yojson.Basic.t -> _crossoriginembedderpolicyvalue

    val yojson_of__crossoriginembedderpolicyvalue :
      _crossoriginembedderpolicyvalue -> Yojson.Basic.t

    type t = _crossoriginembedderpolicyvalue
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CrossOriginEmbedderPolicyStatus : sig
    type t = {
      value : CrossOriginEmbedderPolicyValue.t;
          [@key "value"] [@ocaml.doc "No description provided"]
      reportOnlyValue : CrossOriginEmbedderPolicyValue.t;
          [@key "reportOnlyValue"] [@ocaml.doc "No description provided"]
      reportingEndpoint : string option;
          [@key "reportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      reportOnlyReportingEndpoint : string option;
          [@key "reportOnlyReportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContentSecurityPolicySource : sig
    type _contentsecuritypolicysource = [ `HTTP | `Meta ]

    val _contentsecuritypolicysource_of_yojson :
      Yojson.Basic.t -> _contentsecuritypolicysource

    val yojson_of__contentsecuritypolicysource :
      _contentsecuritypolicysource -> Yojson.Basic.t

    type t = _contentsecuritypolicysource
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContentSecurityPolicyStatus : sig
    type t = {
      effectiveDirectives : string;
          [@key "effectiveDirectives"] [@ocaml.doc "No description provided"]
      isEnforced : bool;
          [@key "isEnforced"] [@ocaml.doc "No description provided"]
      source : ContentSecurityPolicySource.t;
          [@key "source"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SecurityIsolationStatus : sig
    type t = {
      coop : CrossOriginOpenerPolicyStatus.t option;
          [@key "coop"] [@yojson.option] [@ocaml.doc "No description provided"]
      coep : CrossOriginEmbedderPolicyStatus.t option;
          [@key "coep"] [@yojson.option] [@ocaml.doc "No description provided"]
      csp : ContentSecurityPolicyStatus.t list option;
          [@key "csp"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ReportStatus : sig
    type _reportstatus = [ `Queued | `Pending | `MarkedForRemoval | `Success ]

    val _reportstatus_of_yojson : Yojson.Basic.t -> _reportstatus
    val yojson_of__reportstatus : _reportstatus -> Yojson.Basic.t

    type t = _reportstatus
    [@@deriving yojson] [@@ocaml.doc "The status of a Reporting API report."]
  end

  and ReportId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ReportingApiReport : sig
    type t = {
      id : ReportId.t; [@key "id"] [@ocaml.doc "No description provided"]
      initiatorUrl : string;
          [@key "initiatorUrl"]
          [@ocaml.doc "The URL of the document that triggered the report."]
      destination : string;
          [@key "destination"]
          [@ocaml.doc
            "The name of the endpoint group that should be used to deliver the \
             report."]
      type_ : string;
          [@key "type"]
          [@ocaml.doc
            "The type of the report (specifies the set of data that is \
             contained in the report body)."]
      timestamp : Network.TimeSinceEpoch.t;
          [@key "timestamp"] [@ocaml.doc "When the report was generated."]
      depth : number;
          [@key "depth"]
          [@ocaml.doc "How many uploads deep the related request was."]
      completedAttempts : number;
          [@key "completedAttempts"]
          [@ocaml.doc
            "The number of delivery attempts made so far, not including an \
             active attempt."]
      body : assoc; [@key "body"] [@ocaml.doc "No description provided"]
      status : ReportStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "An object representing a report generated by the Reporting API."]
  end

  and ReportingApiEndpoint : sig
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "The URL of the endpoint to which reports may be delivered."]
      groupName : string;
          [@key "groupName"] [@ocaml.doc "Name of the endpoint group."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and LoadNetworkResourcePageResult : sig
    type t = {
      success : bool; [@key "success"] [@ocaml.doc "No description provided"]
      netError : number option;
          [@key "netError"]
          [@yojson.option]
          [@ocaml.doc "Optional values used for error reporting."]
      netErrorName : string option;
          [@key "netErrorName"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      httpStatusCode : number option;
          [@key "httpStatusCode"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      stream : IO.StreamHandle.t option;
          [@key "stream"]
          [@yojson.option]
          [@ocaml.doc
            "If successful, one of the following two fields holds the result."]
      headers : Network.Headers.t option;
          [@key "headers"] [@yojson.option] [@ocaml.doc "Response headers."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "An object providing the result of a network resource load."]
  end

  and LoadNetworkResourceOptions : sig
    type t = {
      disableCache : bool;
          [@key "disableCache"] [@ocaml.doc "No description provided"]
      includeCredentials : bool;
          [@key "includeCredentials"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "An options object that may be extended later to better support CORS,\n\
       CORB and streaming."]
  end
end = struct
  module rec ResourceType : sig
    type _resourcetype =
      [ `Document
      | `Stylesheet
      | `Image
      | `Media
      | `Font
      | `Script
      | `TextTrack
      | `XHR
      | `Fetch
      | `Prefetch
      | `EventSource
      | `WebSocket
      | `Manifest
      | `SignedExchange
      | `Ping
      | `CSPViolationReport
      | `Preflight
      | `Other ]

    val _resourcetype_of_yojson : Yojson.Basic.t -> _resourcetype
    val yojson_of__resourcetype : _resourcetype -> Yojson.Basic.t

    type t = _resourcetype
    [@@deriving yojson]
    [@@ocaml.doc "Resource type as it was perceived by the rendering engine."]
  end = struct
    type _resourcetype =
      [ `Document
      | `Stylesheet
      | `Image
      | `Media
      | `Font
      | `Script
      | `TextTrack
      | `XHR
      | `Fetch
      | `Prefetch
      | `EventSource
      | `WebSocket
      | `Manifest
      | `SignedExchange
      | `Ping
      | `CSPViolationReport
      | `Preflight
      | `Other ]

    let _resourcetype_of_yojson = function
      | `String "Document" -> `Document
      | `String "Stylesheet" -> `Stylesheet
      | `String "Image" -> `Image
      | `String "Media" -> `Media
      | `String "Font" -> `Font
      | `String "Script" -> `Script
      | `String "TextTrack" -> `TextTrack
      | `String "XHR" -> `XHR
      | `String "Fetch" -> `Fetch
      | `String "Prefetch" -> `Prefetch
      | `String "EventSource" -> `EventSource
      | `String "WebSocket" -> `WebSocket
      | `String "Manifest" -> `Manifest
      | `String "SignedExchange" -> `SignedExchange
      | `String "Ping" -> `Ping
      | `String "CSPViolationReport" -> `CSPViolationReport
      | `String "Preflight" -> `Preflight
      | `String "Other" -> `Other
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__resourcetype = function
      | `Document -> `String "Document"
      | `Stylesheet -> `String "Stylesheet"
      | `Image -> `String "Image"
      | `Media -> `String "Media"
      | `Font -> `String "Font"
      | `Script -> `String "Script"
      | `TextTrack -> `String "TextTrack"
      | `XHR -> `String "XHR"
      | `Fetch -> `String "Fetch"
      | `Prefetch -> `String "Prefetch"
      | `EventSource -> `String "EventSource"
      | `WebSocket -> `String "WebSocket"
      | `Manifest -> `String "Manifest"
      | `SignedExchange -> `String "SignedExchange"
      | `Ping -> `String "Ping"
      | `CSPViolationReport -> `String "CSPViolationReport"
      | `Preflight -> `String "Preflight"
      | `Other -> `String "Other"

    type t = _resourcetype
    [@@deriving yojson]
    [@@ocaml.doc "Resource type as it was perceived by the rendering engine."]
  end

  and LoaderId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique loader identifier."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique loader identifier."]
  end

  and RequestId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique request identifier."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique request identifier."]
  end

  and InterceptionId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique intercepted request identifier."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique intercepted request identifier."]
  end

  and ErrorReason : sig
    type _errorreason =
      [ `Failed
      | `Aborted
      | `TimedOut
      | `AccessDenied
      | `ConnectionClosed
      | `ConnectionReset
      | `ConnectionRefused
      | `ConnectionAborted
      | `ConnectionFailed
      | `NameNotResolved
      | `InternetDisconnected
      | `AddressUnreachable
      | `BlockedByClient
      | `BlockedByResponse ]

    val _errorreason_of_yojson : Yojson.Basic.t -> _errorreason
    val yojson_of__errorreason : _errorreason -> Yojson.Basic.t

    type t = _errorreason
    [@@deriving yojson] [@@ocaml.doc "Network level fetch failure reason."]
  end = struct
    type _errorreason =
      [ `Failed
      | `Aborted
      | `TimedOut
      | `AccessDenied
      | `ConnectionClosed
      | `ConnectionReset
      | `ConnectionRefused
      | `ConnectionAborted
      | `ConnectionFailed
      | `NameNotResolved
      | `InternetDisconnected
      | `AddressUnreachable
      | `BlockedByClient
      | `BlockedByResponse ]

    let _errorreason_of_yojson = function
      | `String "Failed" -> `Failed
      | `String "Aborted" -> `Aborted
      | `String "TimedOut" -> `TimedOut
      | `String "AccessDenied" -> `AccessDenied
      | `String "ConnectionClosed" -> `ConnectionClosed
      | `String "ConnectionReset" -> `ConnectionReset
      | `String "ConnectionRefused" -> `ConnectionRefused
      | `String "ConnectionAborted" -> `ConnectionAborted
      | `String "ConnectionFailed" -> `ConnectionFailed
      | `String "NameNotResolved" -> `NameNotResolved
      | `String "InternetDisconnected" -> `InternetDisconnected
      | `String "AddressUnreachable" -> `AddressUnreachable
      | `String "BlockedByClient" -> `BlockedByClient
      | `String "BlockedByResponse" -> `BlockedByResponse
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__errorreason = function
      | `Failed -> `String "Failed"
      | `Aborted -> `String "Aborted"
      | `TimedOut -> `String "TimedOut"
      | `AccessDenied -> `String "AccessDenied"
      | `ConnectionClosed -> `String "ConnectionClosed"
      | `ConnectionReset -> `String "ConnectionReset"
      | `ConnectionRefused -> `String "ConnectionRefused"
      | `ConnectionAborted -> `String "ConnectionAborted"
      | `ConnectionFailed -> `String "ConnectionFailed"
      | `NameNotResolved -> `String "NameNotResolved"
      | `InternetDisconnected -> `String "InternetDisconnected"
      | `AddressUnreachable -> `String "AddressUnreachable"
      | `BlockedByClient -> `String "BlockedByClient"
      | `BlockedByResponse -> `String "BlockedByResponse"

    type t = _errorreason
    [@@deriving yojson] [@@ocaml.doc "Network level fetch failure reason."]
  end

  and TimeSinceEpoch : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc "UTC time in seconds, counted from January 1, 1970."]
  end = struct
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc "UTC time in seconds, counted from January 1, 1970."]
  end

  and MonotonicTime : sig
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc
      "Monotonically increasing time in seconds since an arbitrary point in \
       the past."]
  end = struct
    type t = number
    [@@deriving yojson]
    [@@ocaml.doc
      "Monotonically increasing time in seconds since an arbitrary point in \
       the past."]
  end

  and Headers : sig
    type t = assoc
    [@@deriving yojson]
    [@@ocaml.doc "Request / response headers as keys / values of JSON object."]
  end = struct
    type t = assoc
    [@@deriving yojson]
    [@@ocaml.doc "Request / response headers as keys / values of JSON object."]
  end

  and ConnectionType : sig
    type _connectiontype =
      [ `none
      | `cellular2g
      | `cellular3g
      | `cellular4g
      | `bluetooth
      | `ethernet
      | `wifi
      | `wimax
      | `other ]

    val _connectiontype_of_yojson : Yojson.Basic.t -> _connectiontype
    val yojson_of__connectiontype : _connectiontype -> Yojson.Basic.t

    type t = _connectiontype
    [@@deriving yojson]
    [@@ocaml.doc
      "The underlying connection technology that the browser is supposedly \
       using."]
  end = struct
    type _connectiontype =
      [ `none
      | `cellular2g
      | `cellular3g
      | `cellular4g
      | `bluetooth
      | `ethernet
      | `wifi
      | `wimax
      | `other ]

    let _connectiontype_of_yojson = function
      | `String "none" -> `none
      | `String "cellular2g" -> `cellular2g
      | `String "cellular3g" -> `cellular3g
      | `String "cellular4g" -> `cellular4g
      | `String "bluetooth" -> `bluetooth
      | `String "ethernet" -> `ethernet
      | `String "wifi" -> `wifi
      | `String "wimax" -> `wimax
      | `String "other" -> `other
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__connectiontype = function
      | `none -> `String "none"
      | `cellular2g -> `String "cellular2g"
      | `cellular3g -> `String "cellular3g"
      | `cellular4g -> `String "cellular4g"
      | `bluetooth -> `String "bluetooth"
      | `ethernet -> `String "ethernet"
      | `wifi -> `String "wifi"
      | `wimax -> `String "wimax"
      | `other -> `String "other"

    type t = _connectiontype
    [@@deriving yojson]
    [@@ocaml.doc
      "The underlying connection technology that the browser is supposedly \
       using."]
  end

  and CookieSameSite : sig
    type _cookiesamesite = [ `Strict | `Lax | `None ]

    val _cookiesamesite_of_yojson : Yojson.Basic.t -> _cookiesamesite
    val yojson_of__cookiesamesite : _cookiesamesite -> Yojson.Basic.t

    type t = _cookiesamesite
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the cookie's 'SameSite' status:\n\
       https://tools.ietf.org/html/draft-west-first-party-cookies"]
  end = struct
    type _cookiesamesite = [ `Strict | `Lax | `None ]

    let _cookiesamesite_of_yojson = function
      | `String "Strict" -> `Strict
      | `String "Lax" -> `Lax
      | `String "None" -> `None
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cookiesamesite = function
      | `Strict -> `String "Strict"
      | `Lax -> `String "Lax"
      | `None -> `String "None"

    type t = _cookiesamesite
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the cookie's 'SameSite' status:\n\
       https://tools.ietf.org/html/draft-west-first-party-cookies"]
  end

  and CookiePriority : sig
    type _cookiepriority = [ `Low | `Medium | `High ]

    val _cookiepriority_of_yojson : Yojson.Basic.t -> _cookiepriority
    val yojson_of__cookiepriority : _cookiepriority -> Yojson.Basic.t

    type t = _cookiepriority
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the cookie's 'Priority' status:\n\
       https://tools.ietf.org/html/draft-west-cookie-priority-00"]
  end = struct
    type _cookiepriority = [ `Low | `Medium | `High ]

    let _cookiepriority_of_yojson = function
      | `String "Low" -> `Low
      | `String "Medium" -> `Medium
      | `String "High" -> `High
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cookiepriority = function
      | `Low -> `String "Low"
      | `Medium -> `String "Medium"
      | `High -> `String "High"

    type t = _cookiepriority
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the cookie's 'Priority' status:\n\
       https://tools.ietf.org/html/draft-west-cookie-priority-00"]
  end

  and CookieSourceScheme : sig
    type _cookiesourcescheme = [ `Unset | `NonSecure | `Secure ]

    val _cookiesourcescheme_of_yojson : Yojson.Basic.t -> _cookiesourcescheme
    val yojson_of__cookiesourcescheme : _cookiesourcescheme -> Yojson.Basic.t

    type t = _cookiesourcescheme
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the source scheme of the origin that originally set the \
       cookie.\n\
       A value of \"Unset\" allows protocol clients to emulate legacy cookie \
       scope for the scheme.\n\
       This is a temporary ability and it will be removed in the future."]
  end = struct
    type _cookiesourcescheme = [ `Unset | `NonSecure | `Secure ]

    let _cookiesourcescheme_of_yojson = function
      | `String "Unset" -> `Unset
      | `String "NonSecure" -> `NonSecure
      | `String "Secure" -> `Secure
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cookiesourcescheme = function
      | `Unset -> `String "Unset"
      | `NonSecure -> `String "NonSecure"
      | `Secure -> `String "Secure"

    type t = _cookiesourcescheme
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents the source scheme of the origin that originally set the \
       cookie.\n\
       A value of \"Unset\" allows protocol clients to emulate legacy cookie \
       scope for the scheme.\n\
       This is a temporary ability and it will be removed in the future."]
  end

  and ResourceTiming : sig
    type t = {
      requestTime : number;
          [@key "requestTime"]
          [@ocaml.doc
            "Timing's requestTime is a baseline in seconds, while the other \
             numbers are ticks in\n\
             milliseconds relatively to this requestTime."]
      proxyStart : number;
          [@key "proxyStart"] [@ocaml.doc "Started resolving proxy."]
      proxyEnd : number;
          [@key "proxyEnd"] [@ocaml.doc "Finished resolving proxy."]
      dnsStart : number;
          [@key "dnsStart"] [@ocaml.doc "Started DNS address resolve."]
      dnsEnd : number;
          [@key "dnsEnd"] [@ocaml.doc "Finished DNS address resolve."]
      connectStart : number;
          [@key "connectStart"]
          [@ocaml.doc "Started connecting to the remote host."]
      connectEnd : number;
          [@key "connectEnd"] [@ocaml.doc "Connected to the remote host."]
      sslStart : number; [@key "sslStart"] [@ocaml.doc "Started SSL handshake."]
      sslEnd : number; [@key "sslEnd"] [@ocaml.doc "Finished SSL handshake."]
      workerStart : number;
          [@key "workerStart"] [@ocaml.doc "Started running ServiceWorker."]
      workerReady : number;
          [@key "workerReady"] [@ocaml.doc "Finished Starting ServiceWorker."]
      workerFetchStart : number;
          [@key "workerFetchStart"] [@ocaml.doc "Started fetch event."]
      workerRespondWithSettled : number;
          [@key "workerRespondWithSettled"]
          [@ocaml.doc "Settled fetch event respondWith promise."]
      sendStart : number;
          [@key "sendStart"] [@ocaml.doc "Started sending request."]
      sendEnd : number;
          [@key "sendEnd"] [@ocaml.doc "Finished sending request."]
      pushStart : number;
          [@key "pushStart"]
          [@ocaml.doc "Time the server started pushing request."]
      pushEnd : number;
          [@key "pushEnd"]
          [@ocaml.doc "Time the server finished pushing request."]
      receiveHeadersStart : number;
          [@key "receiveHeadersStart"]
          [@ocaml.doc "Started receiving response headers."]
      receiveHeadersEnd : number;
          [@key "receiveHeadersEnd"]
          [@ocaml.doc "Finished receiving response headers."]
    }
    [@@deriving yojson] [@@ocaml.doc "Timing information for the request."]
  end = struct
    type t = {
      requestTime : number;
          [@key "requestTime"]
          [@ocaml.doc
            "Timing's requestTime is a baseline in seconds, while the other \
             numbers are ticks in\n\
             milliseconds relatively to this requestTime."]
      proxyStart : number;
          [@key "proxyStart"] [@ocaml.doc "Started resolving proxy."]
      proxyEnd : number;
          [@key "proxyEnd"] [@ocaml.doc "Finished resolving proxy."]
      dnsStart : number;
          [@key "dnsStart"] [@ocaml.doc "Started DNS address resolve."]
      dnsEnd : number;
          [@key "dnsEnd"] [@ocaml.doc "Finished DNS address resolve."]
      connectStart : number;
          [@key "connectStart"]
          [@ocaml.doc "Started connecting to the remote host."]
      connectEnd : number;
          [@key "connectEnd"] [@ocaml.doc "Connected to the remote host."]
      sslStart : number; [@key "sslStart"] [@ocaml.doc "Started SSL handshake."]
      sslEnd : number; [@key "sslEnd"] [@ocaml.doc "Finished SSL handshake."]
      workerStart : number;
          [@key "workerStart"] [@ocaml.doc "Started running ServiceWorker."]
      workerReady : number;
          [@key "workerReady"] [@ocaml.doc "Finished Starting ServiceWorker."]
      workerFetchStart : number;
          [@key "workerFetchStart"] [@ocaml.doc "Started fetch event."]
      workerRespondWithSettled : number;
          [@key "workerRespondWithSettled"]
          [@ocaml.doc "Settled fetch event respondWith promise."]
      sendStart : number;
          [@key "sendStart"] [@ocaml.doc "Started sending request."]
      sendEnd : number;
          [@key "sendEnd"] [@ocaml.doc "Finished sending request."]
      pushStart : number;
          [@key "pushStart"]
          [@ocaml.doc "Time the server started pushing request."]
      pushEnd : number;
          [@key "pushEnd"]
          [@ocaml.doc "Time the server finished pushing request."]
      receiveHeadersStart : number;
          [@key "receiveHeadersStart"]
          [@ocaml.doc "Started receiving response headers."]
      receiveHeadersEnd : number;
          [@key "receiveHeadersEnd"]
          [@ocaml.doc "Finished receiving response headers."]
    }
    [@@deriving yojson] [@@ocaml.doc "Timing information for the request."]
  end

  and ResourcePriority : sig
    type _resourcepriority = [ `VeryLow | `Low | `Medium | `High | `VeryHigh ]

    val _resourcepriority_of_yojson : Yojson.Basic.t -> _resourcepriority
    val yojson_of__resourcepriority : _resourcepriority -> Yojson.Basic.t

    type t = _resourcepriority
    [@@deriving yojson] [@@ocaml.doc "Loading priority of a resource request."]
  end = struct
    type _resourcepriority = [ `VeryLow | `Low | `Medium | `High | `VeryHigh ]

    let _resourcepriority_of_yojson = function
      | `String "VeryLow" -> `VeryLow
      | `String "Low" -> `Low
      | `String "Medium" -> `Medium
      | `String "High" -> `High
      | `String "VeryHigh" -> `VeryHigh
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__resourcepriority = function
      | `VeryLow -> `String "VeryLow"
      | `Low -> `String "Low"
      | `Medium -> `String "Medium"
      | `High -> `String "High"
      | `VeryHigh -> `String "VeryHigh"

    type t = _resourcepriority
    [@@deriving yojson] [@@ocaml.doc "Loading priority of a resource request."]
  end

  and PostDataEntry : sig
    type t = {
      bytes : string option;
          [@key "bytes"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Post data entry for HTTP request"]
  end = struct
    type t = {
      bytes : string option;
          [@key "bytes"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Post data entry for HTTP request"]
  end

  and Request : sig
    type _request_referrerpolicy =
      [ `unsafe_url
      | `no_referrer_when_downgrade
      | `no_referrer
      | `origin
      | `origin_when_cross_origin
      | `same_origin
      | `strict_origin
      | `strict_origin_when_cross_origin ]

    val _request_referrerpolicy_of_yojson :
      Yojson.Basic.t -> _request_referrerpolicy

    val yojson_of__request_referrerpolicy :
      _request_referrerpolicy -> Yojson.Basic.t

    type t = {
      url : string; [@key "url"] [@ocaml.doc "Request URL (without fragment)."]
      urlFragment : string option;
          [@key "urlFragment"]
          [@yojson.option]
          [@ocaml.doc
            "Fragment of the requested URL starting with hash, if present."]
      method_ : string; [@key "method"] [@ocaml.doc "HTTP request method."]
      headers : Headers.t; [@key "headers"] [@ocaml.doc "HTTP request headers."]
      postData : string option;
          [@key "postData"]
          [@yojson.option]
          [@ocaml.doc "HTTP POST request data."]
      hasPostData : bool option;
          [@key "hasPostData"]
          [@yojson.option]
          [@ocaml.doc
            "True when the request has POST data. Note that postData might \
             still be omitted when this flag is true when the data is too \
             long."]
      postDataEntries : PostDataEntry.t list option;
          [@key "postDataEntries"]
          [@yojson.option]
          [@ocaml.doc
            "Request body elements. This will be converted from base64 to \
             binary"]
      mixedContentType : Security.MixedContentType.t option;
          [@key "mixedContentType"]
          [@yojson.option]
          [@ocaml.doc "The mixed content type of the request."]
      initialPriority : ResourcePriority.t;
          [@key "initialPriority"]
          [@ocaml.doc
            "Priority of the resource request at the time request is sent."]
      referrerPolicy : _request_referrerpolicy;
          [@key "referrerPolicy"]
          [@ocaml.doc
            "The referrer policy of the request, as defined in \
             https://www.w3.org/TR/referrer-policy/"]
      isLinkPreload : bool option;
          [@key "isLinkPreload"]
          [@yojson.option]
          [@ocaml.doc "Whether is loaded via link preload."]
      trustTokenParams : TrustTokenParams.t option;
          [@key "trustTokenParams"]
          [@yojson.option]
          [@ocaml.doc
            "Set for requests when the TrustToken API is used. Contains the \
             parameters\n\
             passed by the developer (e.g. via \"fetch\") as understood by the \
             backend."]
      isSameSite : bool option;
          [@key "isSameSite"]
          [@yojson.option]
          [@ocaml.doc
            "True if this resource request is considered to be the 'same site' \
             as the\n\
             request correspondinfg to the main frame."]
    }
    [@@deriving yojson] [@@ocaml.doc "HTTP request data."]
  end = struct
    type _request_referrerpolicy =
      [ `unsafe_url
      | `no_referrer_when_downgrade
      | `no_referrer
      | `origin
      | `origin_when_cross_origin
      | `same_origin
      | `strict_origin
      | `strict_origin_when_cross_origin ]

    let _request_referrerpolicy_of_yojson = function
      | `String "unsafe-url" -> `unsafe_url
      | `String "no-referrer-when-downgrade" -> `no_referrer_when_downgrade
      | `String "no-referrer" -> `no_referrer
      | `String "origin" -> `origin
      | `String "origin-when-cross-origin" -> `origin_when_cross_origin
      | `String "same-origin" -> `same_origin
      | `String "strict-origin" -> `strict_origin
      | `String "strict-origin-when-cross-origin" ->
          `strict_origin_when_cross_origin
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__request_referrerpolicy = function
      | `unsafe_url -> `String "unsafe-url"
      | `no_referrer_when_downgrade -> `String "no-referrer-when-downgrade"
      | `no_referrer -> `String "no-referrer"
      | `origin -> `String "origin"
      | `origin_when_cross_origin -> `String "origin-when-cross-origin"
      | `same_origin -> `String "same-origin"
      | `strict_origin -> `String "strict-origin"
      | `strict_origin_when_cross_origin ->
          `String "strict-origin-when-cross-origin"

    type t = {
      url : string; [@key "url"] [@ocaml.doc "Request URL (without fragment)."]
      urlFragment : string option;
          [@key "urlFragment"]
          [@yojson.option]
          [@ocaml.doc
            "Fragment of the requested URL starting with hash, if present."]
      method_ : string; [@key "method"] [@ocaml.doc "HTTP request method."]
      headers : Headers.t; [@key "headers"] [@ocaml.doc "HTTP request headers."]
      postData : string option;
          [@key "postData"]
          [@yojson.option]
          [@ocaml.doc "HTTP POST request data."]
      hasPostData : bool option;
          [@key "hasPostData"]
          [@yojson.option]
          [@ocaml.doc
            "True when the request has POST data. Note that postData might \
             still be omitted when this flag is true when the data is too \
             long."]
      postDataEntries : PostDataEntry.t list option;
          [@key "postDataEntries"]
          [@yojson.option]
          [@ocaml.doc
            "Request body elements. This will be converted from base64 to \
             binary"]
      mixedContentType : Security.MixedContentType.t option;
          [@key "mixedContentType"]
          [@yojson.option]
          [@ocaml.doc "The mixed content type of the request."]
      initialPriority : ResourcePriority.t;
          [@key "initialPriority"]
          [@ocaml.doc
            "Priority of the resource request at the time request is sent."]
      referrerPolicy : _request_referrerpolicy;
          [@key "referrerPolicy"]
          [@ocaml.doc
            "The referrer policy of the request, as defined in \
             https://www.w3.org/TR/referrer-policy/"]
      isLinkPreload : bool option;
          [@key "isLinkPreload"]
          [@yojson.option]
          [@ocaml.doc "Whether is loaded via link preload."]
      trustTokenParams : TrustTokenParams.t option;
          [@key "trustTokenParams"]
          [@yojson.option]
          [@ocaml.doc
            "Set for requests when the TrustToken API is used. Contains the \
             parameters\n\
             passed by the developer (e.g. via \"fetch\") as understood by the \
             backend."]
      isSameSite : bool option;
          [@key "isSameSite"]
          [@yojson.option]
          [@ocaml.doc
            "True if this resource request is considered to be the 'same site' \
             as the\n\
             request correspondinfg to the main frame."]
    }
    [@@deriving yojson] [@@ocaml.doc "HTTP request data."]
  end

  and SignedCertificateTimestamp : sig
    type t = {
      status : string; [@key "status"] [@ocaml.doc "Validation status."]
      origin : string; [@key "origin"] [@ocaml.doc "Origin."]
      logDescription : string;
          [@key "logDescription"] [@ocaml.doc "Log name / description."]
      logId : string; [@key "logId"] [@ocaml.doc "Log ID."]
      timestamp : number;
          [@key "timestamp"]
          [@ocaml.doc
            "Issuance date. Unlike TimeSinceEpoch, this contains the number of\n\
             milliseconds since January 1, 1970, UTC, not the number of \
             seconds."]
      hashAlgorithm : string;
          [@key "hashAlgorithm"] [@ocaml.doc "Hash algorithm."]
      signatureAlgorithm : string;
          [@key "signatureAlgorithm"] [@ocaml.doc "Signature algorithm."]
      signatureData : string;
          [@key "signatureData"] [@ocaml.doc "Signature data."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Details of a signed certificate timestamp (SCT)."]
  end = struct
    type t = {
      status : string; [@key "status"] [@ocaml.doc "Validation status."]
      origin : string; [@key "origin"] [@ocaml.doc "Origin."]
      logDescription : string;
          [@key "logDescription"] [@ocaml.doc "Log name / description."]
      logId : string; [@key "logId"] [@ocaml.doc "Log ID."]
      timestamp : number;
          [@key "timestamp"]
          [@ocaml.doc
            "Issuance date. Unlike TimeSinceEpoch, this contains the number of\n\
             milliseconds since January 1, 1970, UTC, not the number of \
             seconds."]
      hashAlgorithm : string;
          [@key "hashAlgorithm"] [@ocaml.doc "Hash algorithm."]
      signatureAlgorithm : string;
          [@key "signatureAlgorithm"] [@ocaml.doc "Signature algorithm."]
      signatureData : string;
          [@key "signatureData"] [@ocaml.doc "Signature data."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Details of a signed certificate timestamp (SCT)."]
  end

  and SecurityDetails : sig
    type t = {
      protocol : string;
          [@key "protocol"]
          [@ocaml.doc "Protocol name (e.g. \"TLS 1.2\" or \"QUIC\")."]
      keyExchange : string;
          [@key "keyExchange"]
          [@ocaml.doc
            "Key Exchange used by the connection, or the empty string if not \
             applicable."]
      keyExchangeGroup : string option;
          [@key "keyExchangeGroup"]
          [@yojson.option]
          [@ocaml.doc "(EC)DH group used by the connection, if applicable."]
      cipher : string; [@key "cipher"] [@ocaml.doc "Cipher name."]
      mac : string option;
          [@key "mac"]
          [@yojson.option]
          [@ocaml.doc
            "TLS MAC. Note that AEAD ciphers do not have separate MACs."]
      certificateId : Security.CertificateId.t;
          [@key "certificateId"] [@ocaml.doc "Certificate ID value."]
      subjectName : string;
          [@key "subjectName"] [@ocaml.doc "Certificate subject name."]
      sanList : string list;
          [@key "sanList"]
          [@ocaml.doc
            "Subject Alternative Name (SAN) DNS names and IP addresses."]
      issuer : string; [@key "issuer"] [@ocaml.doc "Name of the issuing CA."]
      validFrom : TimeSinceEpoch.t;
          [@key "validFrom"] [@ocaml.doc "Certificate valid from date."]
      validTo : TimeSinceEpoch.t;
          [@key "validTo"] [@ocaml.doc "Certificate valid to (expiration) date"]
      signedCertificateTimestampList : SignedCertificateTimestamp.t list;
          [@key "signedCertificateTimestampList"]
          [@ocaml.doc "List of signed certificate timestamps (SCTs)."]
      certificateTransparencyCompliance : CertificateTransparencyCompliance.t;
          [@key "certificateTransparencyCompliance"]
          [@ocaml.doc
            "Whether the request complied with Certificate Transparency policy"]
      serverSignatureAlgorithm : number option;
          [@key "serverSignatureAlgorithm"]
          [@yojson.option]
          [@ocaml.doc
            "The signature algorithm used by the server in the TLS server \
             signature,\n\
             represented as a TLS SignatureScheme code point. Omitted if not\n\
             applicable or not known."]
      encryptedClientHello : bool;
          [@key "encryptedClientHello"]
          [@ocaml.doc "Whether the connection used Encrypted ClientHello"]
    }
    [@@deriving yojson] [@@ocaml.doc "Security details about a request."]
  end = struct
    type t = {
      protocol : string;
          [@key "protocol"]
          [@ocaml.doc "Protocol name (e.g. \"TLS 1.2\" or \"QUIC\")."]
      keyExchange : string;
          [@key "keyExchange"]
          [@ocaml.doc
            "Key Exchange used by the connection, or the empty string if not \
             applicable."]
      keyExchangeGroup : string option;
          [@key "keyExchangeGroup"]
          [@yojson.option]
          [@ocaml.doc "(EC)DH group used by the connection, if applicable."]
      cipher : string; [@key "cipher"] [@ocaml.doc "Cipher name."]
      mac : string option;
          [@key "mac"]
          [@yojson.option]
          [@ocaml.doc
            "TLS MAC. Note that AEAD ciphers do not have separate MACs."]
      certificateId : Security.CertificateId.t;
          [@key "certificateId"] [@ocaml.doc "Certificate ID value."]
      subjectName : string;
          [@key "subjectName"] [@ocaml.doc "Certificate subject name."]
      sanList : string list;
          [@key "sanList"]
          [@ocaml.doc
            "Subject Alternative Name (SAN) DNS names and IP addresses."]
      issuer : string; [@key "issuer"] [@ocaml.doc "Name of the issuing CA."]
      validFrom : TimeSinceEpoch.t;
          [@key "validFrom"] [@ocaml.doc "Certificate valid from date."]
      validTo : TimeSinceEpoch.t;
          [@key "validTo"] [@ocaml.doc "Certificate valid to (expiration) date"]
      signedCertificateTimestampList : SignedCertificateTimestamp.t list;
          [@key "signedCertificateTimestampList"]
          [@ocaml.doc "List of signed certificate timestamps (SCTs)."]
      certificateTransparencyCompliance : CertificateTransparencyCompliance.t;
          [@key "certificateTransparencyCompliance"]
          [@ocaml.doc
            "Whether the request complied with Certificate Transparency policy"]
      serverSignatureAlgorithm : number option;
          [@key "serverSignatureAlgorithm"]
          [@yojson.option]
          [@ocaml.doc
            "The signature algorithm used by the server in the TLS server \
             signature,\n\
             represented as a TLS SignatureScheme code point. Omitted if not\n\
             applicable or not known."]
      encryptedClientHello : bool;
          [@key "encryptedClientHello"]
          [@ocaml.doc "Whether the connection used Encrypted ClientHello"]
    }
    [@@deriving yojson] [@@ocaml.doc "Security details about a request."]
  end

  and CertificateTransparencyCompliance : sig
    type _certificatetransparencycompliance =
      [ `unknown | `not_compliant | `compliant ]

    val _certificatetransparencycompliance_of_yojson :
      Yojson.Basic.t -> _certificatetransparencycompliance

    val yojson_of__certificatetransparencycompliance :
      _certificatetransparencycompliance -> Yojson.Basic.t

    type t = _certificatetransparencycompliance
    [@@deriving yojson]
    [@@ocaml.doc
      "Whether the request complied with Certificate Transparency policy."]
  end = struct
    type _certificatetransparencycompliance =
      [ `unknown | `not_compliant | `compliant ]

    let _certificatetransparencycompliance_of_yojson = function
      | `String "unknown" -> `unknown
      | `String "not-compliant" -> `not_compliant
      | `String "compliant" -> `compliant
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__certificatetransparencycompliance = function
      | `unknown -> `String "unknown"
      | `not_compliant -> `String "not-compliant"
      | `compliant -> `String "compliant"

    type t = _certificatetransparencycompliance
    [@@deriving yojson]
    [@@ocaml.doc
      "Whether the request complied with Certificate Transparency policy."]
  end

  and BlockedReason : sig
    type _blockedreason =
      [ `other
      | `csp
      | `mixed_content
      | `origin
      | `inspector
      | `subresource_filter
      | `content_type
      | `coep_frame_resource_needs_coep_header
      | `coop_sandboxed_iframe_cannot_navigate_to_coop_page
      | `corp_not_same_origin
      | `corp_not_same_origin_after_defaulted_to_same_origin_by_coep
      | `corp_not_same_site ]

    val _blockedreason_of_yojson : Yojson.Basic.t -> _blockedreason
    val yojson_of__blockedreason : _blockedreason -> Yojson.Basic.t

    type t = _blockedreason
    [@@deriving yojson] [@@ocaml.doc "The reason why request was blocked."]
  end = struct
    type _blockedreason =
      [ `other
      | `csp
      | `mixed_content
      | `origin
      | `inspector
      | `subresource_filter
      | `content_type
      | `coep_frame_resource_needs_coep_header
      | `coop_sandboxed_iframe_cannot_navigate_to_coop_page
      | `corp_not_same_origin
      | `corp_not_same_origin_after_defaulted_to_same_origin_by_coep
      | `corp_not_same_site ]

    let _blockedreason_of_yojson = function
      | `String "other" -> `other
      | `String "csp" -> `csp
      | `String "mixed-content" -> `mixed_content
      | `String "origin" -> `origin
      | `String "inspector" -> `inspector
      | `String "subresource-filter" -> `subresource_filter
      | `String "content-type" -> `content_type
      | `String "coep-frame-resource-needs-coep-header" ->
          `coep_frame_resource_needs_coep_header
      | `String "coop-sandboxed-iframe-cannot-navigate-to-coop-page" ->
          `coop_sandboxed_iframe_cannot_navigate_to_coop_page
      | `String "corp-not-same-origin" -> `corp_not_same_origin
      | `String "corp-not-same-origin-after-defaulted-to-same-origin-by-coep" ->
          `corp_not_same_origin_after_defaulted_to_same_origin_by_coep
      | `String "corp-not-same-site" -> `corp_not_same_site
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__blockedreason = function
      | `other -> `String "other"
      | `csp -> `String "csp"
      | `mixed_content -> `String "mixed-content"
      | `origin -> `String "origin"
      | `inspector -> `String "inspector"
      | `subresource_filter -> `String "subresource-filter"
      | `content_type -> `String "content-type"
      | `coep_frame_resource_needs_coep_header ->
          `String "coep-frame-resource-needs-coep-header"
      | `coop_sandboxed_iframe_cannot_navigate_to_coop_page ->
          `String "coop-sandboxed-iframe-cannot-navigate-to-coop-page"
      | `corp_not_same_origin -> `String "corp-not-same-origin"
      | `corp_not_same_origin_after_defaulted_to_same_origin_by_coep ->
          `String "corp-not-same-origin-after-defaulted-to-same-origin-by-coep"
      | `corp_not_same_site -> `String "corp-not-same-site"

    type t = _blockedreason
    [@@deriving yojson] [@@ocaml.doc "The reason why request was blocked."]
  end

  and CorsError : sig
    type _corserror =
      [ `DisallowedByMode
      | `InvalidResponse
      | `WildcardOriginNotAllowed
      | `MissingAllowOriginHeader
      | `MultipleAllowOriginValues
      | `InvalidAllowOriginValue
      | `AllowOriginMismatch
      | `InvalidAllowCredentials
      | `CorsDisabledScheme
      | `PreflightInvalidStatus
      | `PreflightDisallowedRedirect
      | `PreflightWildcardOriginNotAllowed
      | `PreflightMissingAllowOriginHeader
      | `PreflightMultipleAllowOriginValues
      | `PreflightInvalidAllowOriginValue
      | `PreflightAllowOriginMismatch
      | `PreflightInvalidAllowCredentials
      | `PreflightMissingAllowExternal
      | `PreflightInvalidAllowExternal
      | `PreflightMissingAllowPrivateNetwork
      | `PreflightInvalidAllowPrivateNetwork
      | `InvalidAllowMethodsPreflightResponse
      | `InvalidAllowHeadersPreflightResponse
      | `MethodDisallowedByPreflightResponse
      | `HeaderDisallowedByPreflightResponse
      | `RedirectContainsCredentials
      | `InsecurePrivateNetwork
      | `InvalidPrivateNetworkAccess
      | `UnexpectedPrivateNetworkAccess
      | `NoCorsRedirectModeNotFollow
      | `PreflightMissingPrivateNetworkAccessId
      | `PreflightMissingPrivateNetworkAccessName
      | `PrivateNetworkAccessPermissionUnavailable
      | `PrivateNetworkAccessPermissionDenied ]

    val _corserror_of_yojson : Yojson.Basic.t -> _corserror
    val yojson_of__corserror : _corserror -> Yojson.Basic.t

    type t = _corserror
    [@@deriving yojson] [@@ocaml.doc "The reason why request was blocked."]
  end = struct
    type _corserror =
      [ `DisallowedByMode
      | `InvalidResponse
      | `WildcardOriginNotAllowed
      | `MissingAllowOriginHeader
      | `MultipleAllowOriginValues
      | `InvalidAllowOriginValue
      | `AllowOriginMismatch
      | `InvalidAllowCredentials
      | `CorsDisabledScheme
      | `PreflightInvalidStatus
      | `PreflightDisallowedRedirect
      | `PreflightWildcardOriginNotAllowed
      | `PreflightMissingAllowOriginHeader
      | `PreflightMultipleAllowOriginValues
      | `PreflightInvalidAllowOriginValue
      | `PreflightAllowOriginMismatch
      | `PreflightInvalidAllowCredentials
      | `PreflightMissingAllowExternal
      | `PreflightInvalidAllowExternal
      | `PreflightMissingAllowPrivateNetwork
      | `PreflightInvalidAllowPrivateNetwork
      | `InvalidAllowMethodsPreflightResponse
      | `InvalidAllowHeadersPreflightResponse
      | `MethodDisallowedByPreflightResponse
      | `HeaderDisallowedByPreflightResponse
      | `RedirectContainsCredentials
      | `InsecurePrivateNetwork
      | `InvalidPrivateNetworkAccess
      | `UnexpectedPrivateNetworkAccess
      | `NoCorsRedirectModeNotFollow
      | `PreflightMissingPrivateNetworkAccessId
      | `PreflightMissingPrivateNetworkAccessName
      | `PrivateNetworkAccessPermissionUnavailable
      | `PrivateNetworkAccessPermissionDenied ]

    let _corserror_of_yojson = function
      | `String "DisallowedByMode" -> `DisallowedByMode
      | `String "InvalidResponse" -> `InvalidResponse
      | `String "WildcardOriginNotAllowed" -> `WildcardOriginNotAllowed
      | `String "MissingAllowOriginHeader" -> `MissingAllowOriginHeader
      | `String "MultipleAllowOriginValues" -> `MultipleAllowOriginValues
      | `String "InvalidAllowOriginValue" -> `InvalidAllowOriginValue
      | `String "AllowOriginMismatch" -> `AllowOriginMismatch
      | `String "InvalidAllowCredentials" -> `InvalidAllowCredentials
      | `String "CorsDisabledScheme" -> `CorsDisabledScheme
      | `String "PreflightInvalidStatus" -> `PreflightInvalidStatus
      | `String "PreflightDisallowedRedirect" -> `PreflightDisallowedRedirect
      | `String "PreflightWildcardOriginNotAllowed" ->
          `PreflightWildcardOriginNotAllowed
      | `String "PreflightMissingAllowOriginHeader" ->
          `PreflightMissingAllowOriginHeader
      | `String "PreflightMultipleAllowOriginValues" ->
          `PreflightMultipleAllowOriginValues
      | `String "PreflightInvalidAllowOriginValue" ->
          `PreflightInvalidAllowOriginValue
      | `String "PreflightAllowOriginMismatch" -> `PreflightAllowOriginMismatch
      | `String "PreflightInvalidAllowCredentials" ->
          `PreflightInvalidAllowCredentials
      | `String "PreflightMissingAllowExternal" ->
          `PreflightMissingAllowExternal
      | `String "PreflightInvalidAllowExternal" ->
          `PreflightInvalidAllowExternal
      | `String "PreflightMissingAllowPrivateNetwork" ->
          `PreflightMissingAllowPrivateNetwork
      | `String "PreflightInvalidAllowPrivateNetwork" ->
          `PreflightInvalidAllowPrivateNetwork
      | `String "InvalidAllowMethodsPreflightResponse" ->
          `InvalidAllowMethodsPreflightResponse
      | `String "InvalidAllowHeadersPreflightResponse" ->
          `InvalidAllowHeadersPreflightResponse
      | `String "MethodDisallowedByPreflightResponse" ->
          `MethodDisallowedByPreflightResponse
      | `String "HeaderDisallowedByPreflightResponse" ->
          `HeaderDisallowedByPreflightResponse
      | `String "RedirectContainsCredentials" -> `RedirectContainsCredentials
      | `String "InsecurePrivateNetwork" -> `InsecurePrivateNetwork
      | `String "InvalidPrivateNetworkAccess" -> `InvalidPrivateNetworkAccess
      | `String "UnexpectedPrivateNetworkAccess" ->
          `UnexpectedPrivateNetworkAccess
      | `String "NoCorsRedirectModeNotFollow" -> `NoCorsRedirectModeNotFollow
      | `String "PreflightMissingPrivateNetworkAccessId" ->
          `PreflightMissingPrivateNetworkAccessId
      | `String "PreflightMissingPrivateNetworkAccessName" ->
          `PreflightMissingPrivateNetworkAccessName
      | `String "PrivateNetworkAccessPermissionUnavailable" ->
          `PrivateNetworkAccessPermissionUnavailable
      | `String "PrivateNetworkAccessPermissionDenied" ->
          `PrivateNetworkAccessPermissionDenied
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__corserror = function
      | `DisallowedByMode -> `String "DisallowedByMode"
      | `InvalidResponse -> `String "InvalidResponse"
      | `WildcardOriginNotAllowed -> `String "WildcardOriginNotAllowed"
      | `MissingAllowOriginHeader -> `String "MissingAllowOriginHeader"
      | `MultipleAllowOriginValues -> `String "MultipleAllowOriginValues"
      | `InvalidAllowOriginValue -> `String "InvalidAllowOriginValue"
      | `AllowOriginMismatch -> `String "AllowOriginMismatch"
      | `InvalidAllowCredentials -> `String "InvalidAllowCredentials"
      | `CorsDisabledScheme -> `String "CorsDisabledScheme"
      | `PreflightInvalidStatus -> `String "PreflightInvalidStatus"
      | `PreflightDisallowedRedirect -> `String "PreflightDisallowedRedirect"
      | `PreflightWildcardOriginNotAllowed ->
          `String "PreflightWildcardOriginNotAllowed"
      | `PreflightMissingAllowOriginHeader ->
          `String "PreflightMissingAllowOriginHeader"
      | `PreflightMultipleAllowOriginValues ->
          `String "PreflightMultipleAllowOriginValues"
      | `PreflightInvalidAllowOriginValue ->
          `String "PreflightInvalidAllowOriginValue"
      | `PreflightAllowOriginMismatch -> `String "PreflightAllowOriginMismatch"
      | `PreflightInvalidAllowCredentials ->
          `String "PreflightInvalidAllowCredentials"
      | `PreflightMissingAllowExternal ->
          `String "PreflightMissingAllowExternal"
      | `PreflightInvalidAllowExternal ->
          `String "PreflightInvalidAllowExternal"
      | `PreflightMissingAllowPrivateNetwork ->
          `String "PreflightMissingAllowPrivateNetwork"
      | `PreflightInvalidAllowPrivateNetwork ->
          `String "PreflightInvalidAllowPrivateNetwork"
      | `InvalidAllowMethodsPreflightResponse ->
          `String "InvalidAllowMethodsPreflightResponse"
      | `InvalidAllowHeadersPreflightResponse ->
          `String "InvalidAllowHeadersPreflightResponse"
      | `MethodDisallowedByPreflightResponse ->
          `String "MethodDisallowedByPreflightResponse"
      | `HeaderDisallowedByPreflightResponse ->
          `String "HeaderDisallowedByPreflightResponse"
      | `RedirectContainsCredentials -> `String "RedirectContainsCredentials"
      | `InsecurePrivateNetwork -> `String "InsecurePrivateNetwork"
      | `InvalidPrivateNetworkAccess -> `String "InvalidPrivateNetworkAccess"
      | `UnexpectedPrivateNetworkAccess ->
          `String "UnexpectedPrivateNetworkAccess"
      | `NoCorsRedirectModeNotFollow -> `String "NoCorsRedirectModeNotFollow"
      | `PreflightMissingPrivateNetworkAccessId ->
          `String "PreflightMissingPrivateNetworkAccessId"
      | `PreflightMissingPrivateNetworkAccessName ->
          `String "PreflightMissingPrivateNetworkAccessName"
      | `PrivateNetworkAccessPermissionUnavailable ->
          `String "PrivateNetworkAccessPermissionUnavailable"
      | `PrivateNetworkAccessPermissionDenied ->
          `String "PrivateNetworkAccessPermissionDenied"

    type t = _corserror
    [@@deriving yojson] [@@ocaml.doc "The reason why request was blocked."]
  end

  and CorsErrorStatus : sig
    type t = {
      corsError : CorsError.t;
          [@key "corsError"] [@ocaml.doc "No description provided"]
      failedParameter : string;
          [@key "failedParameter"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      corsError : CorsError.t;
          [@key "corsError"] [@ocaml.doc "No description provided"]
      failedParameter : string;
          [@key "failedParameter"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ServiceWorkerResponseSource : sig
    type _serviceworkerresponsesource =
      [ `cache_storage | `http_cache | `fallback_code | `network ]

    val _serviceworkerresponsesource_of_yojson :
      Yojson.Basic.t -> _serviceworkerresponsesource

    val yojson_of__serviceworkerresponsesource :
      _serviceworkerresponsesource -> Yojson.Basic.t

    type t = _serviceworkerresponsesource
    [@@deriving yojson] [@@ocaml.doc "Source of serviceworker response."]
  end = struct
    type _serviceworkerresponsesource =
      [ `cache_storage | `http_cache | `fallback_code | `network ]

    let _serviceworkerresponsesource_of_yojson = function
      | `String "cache-storage" -> `cache_storage
      | `String "http-cache" -> `http_cache
      | `String "fallback-code" -> `fallback_code
      | `String "network" -> `network
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__serviceworkerresponsesource = function
      | `cache_storage -> `String "cache-storage"
      | `http_cache -> `String "http-cache"
      | `fallback_code -> `String "fallback-code"
      | `network -> `String "network"

    type t = _serviceworkerresponsesource
    [@@deriving yojson] [@@ocaml.doc "Source of serviceworker response."]
  end

  and TrustTokenParams : sig
    type _trusttokenparams_refreshpolicy = [ `UseCached | `Refresh ]

    val _trusttokenparams_refreshpolicy_of_yojson :
      Yojson.Basic.t -> _trusttokenparams_refreshpolicy

    val yojson_of__trusttokenparams_refreshpolicy :
      _trusttokenparams_refreshpolicy -> Yojson.Basic.t

    type t = {
      operation : TrustTokenOperationType.t;
          [@key "operation"] [@ocaml.doc "No description provided"]
      refreshPolicy : _trusttokenparams_refreshpolicy;
          [@key "refreshPolicy"]
          [@ocaml.doc
            "Only set for \"token-redemption\" operation and determine whether\n\
             to request a fresh SRR or use a still valid cached SRR."]
      issuers : string list option;
          [@key "issuers"]
          [@yojson.option]
          [@ocaml.doc
            "Origins of issuers from whom to request tokens or redemption\n\
             records."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Determines what type of Trust Token operation is executed and\n\
       depending on the type, some additional parameters. The values\n\
       are specified in third_party/blink/renderer/core/fetch/trust_token.idl."]
  end = struct
    type _trusttokenparams_refreshpolicy = [ `UseCached | `Refresh ]

    let _trusttokenparams_refreshpolicy_of_yojson = function
      | `String "UseCached" -> `UseCached
      | `String "Refresh" -> `Refresh
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__trusttokenparams_refreshpolicy = function
      | `UseCached -> `String "UseCached"
      | `Refresh -> `String "Refresh"

    type t = {
      operation : TrustTokenOperationType.t;
          [@key "operation"] [@ocaml.doc "No description provided"]
      refreshPolicy : _trusttokenparams_refreshpolicy;
          [@key "refreshPolicy"]
          [@ocaml.doc
            "Only set for \"token-redemption\" operation and determine whether\n\
             to request a fresh SRR or use a still valid cached SRR."]
      issuers : string list option;
          [@key "issuers"]
          [@yojson.option]
          [@ocaml.doc
            "Origins of issuers from whom to request tokens or redemption\n\
             records."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Determines what type of Trust Token operation is executed and\n\
       depending on the type, some additional parameters. The values\n\
       are specified in third_party/blink/renderer/core/fetch/trust_token.idl."]
  end

  and TrustTokenOperationType : sig
    type _trusttokenoperationtype = [ `Issuance | `Redemption | `Signing ]

    val _trusttokenoperationtype_of_yojson :
      Yojson.Basic.t -> _trusttokenoperationtype

    val yojson_of__trusttokenoperationtype :
      _trusttokenoperationtype -> Yojson.Basic.t

    type t = _trusttokenoperationtype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _trusttokenoperationtype = [ `Issuance | `Redemption | `Signing ]

    let _trusttokenoperationtype_of_yojson = function
      | `String "Issuance" -> `Issuance
      | `String "Redemption" -> `Redemption
      | `String "Signing" -> `Signing
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__trusttokenoperationtype = function
      | `Issuance -> `String "Issuance"
      | `Redemption -> `String "Redemption"
      | `Signing -> `String "Signing"

    type t = _trusttokenoperationtype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AlternateProtocolUsage : sig
    type _alternateprotocolusage =
      [ `alternativeJobWonWithoutRace
      | `alternativeJobWonRace
      | `mainJobWonRace
      | `mappingMissing
      | `broken
      | `dnsAlpnH3JobWonWithoutRace
      | `dnsAlpnH3JobWonRace
      | `unspecifiedReason ]

    val _alternateprotocolusage_of_yojson :
      Yojson.Basic.t -> _alternateprotocolusage

    val yojson_of__alternateprotocolusage :
      _alternateprotocolusage -> Yojson.Basic.t

    type t = _alternateprotocolusage
    [@@deriving yojson]
    [@@ocaml.doc
      "The reason why Chrome uses a specific transport protocol for HTTP \
       semantics."]
  end = struct
    type _alternateprotocolusage =
      [ `alternativeJobWonWithoutRace
      | `alternativeJobWonRace
      | `mainJobWonRace
      | `mappingMissing
      | `broken
      | `dnsAlpnH3JobWonWithoutRace
      | `dnsAlpnH3JobWonRace
      | `unspecifiedReason ]

    let _alternateprotocolusage_of_yojson = function
      | `String "alternativeJobWonWithoutRace" -> `alternativeJobWonWithoutRace
      | `String "alternativeJobWonRace" -> `alternativeJobWonRace
      | `String "mainJobWonRace" -> `mainJobWonRace
      | `String "mappingMissing" -> `mappingMissing
      | `String "broken" -> `broken
      | `String "dnsAlpnH3JobWonWithoutRace" -> `dnsAlpnH3JobWonWithoutRace
      | `String "dnsAlpnH3JobWonRace" -> `dnsAlpnH3JobWonRace
      | `String "unspecifiedReason" -> `unspecifiedReason
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__alternateprotocolusage = function
      | `alternativeJobWonWithoutRace -> `String "alternativeJobWonWithoutRace"
      | `alternativeJobWonRace -> `String "alternativeJobWonRace"
      | `mainJobWonRace -> `String "mainJobWonRace"
      | `mappingMissing -> `String "mappingMissing"
      | `broken -> `String "broken"
      | `dnsAlpnH3JobWonWithoutRace -> `String "dnsAlpnH3JobWonWithoutRace"
      | `dnsAlpnH3JobWonRace -> `String "dnsAlpnH3JobWonRace"
      | `unspecifiedReason -> `String "unspecifiedReason"

    type t = _alternateprotocolusage
    [@@deriving yojson]
    [@@ocaml.doc
      "The reason why Chrome uses a specific transport protocol for HTTP \
       semantics."]
  end

  and Response : sig
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "Response URL. This URL can be different from CachedResource.url \
             in case of redirect."]
      status : number; [@key "status"] [@ocaml.doc "HTTP response status code."]
      statusText : string;
          [@key "statusText"] [@ocaml.doc "HTTP response status text."]
      headers : Headers.t;
          [@key "headers"] [@ocaml.doc "HTTP response headers."]
      headersText : string option;
          [@key "headersText"]
          [@yojson.option]
          [@ocaml.doc
            "HTTP response headers text. This has been replaced by the headers \
             in Network.responseReceivedExtraInfo."]
      mimeType : string;
          [@key "mimeType"]
          [@ocaml.doc "Resource mimeType as determined by the browser."]
      requestHeaders : Headers.t option;
          [@key "requestHeaders"]
          [@yojson.option]
          [@ocaml.doc
            "Refined HTTP request headers that were actually transmitted over \
             the network."]
      requestHeadersText : string option;
          [@key "requestHeadersText"]
          [@yojson.option]
          [@ocaml.doc
            "HTTP request headers text. This has been replaced by the headers \
             in Network.requestWillBeSentExtraInfo."]
      connectionReused : bool;
          [@key "connectionReused"]
          [@ocaml.doc
            "Specifies whether physical connection was actually reused for \
             this request."]
      connectionId : number;
          [@key "connectionId"]
          [@ocaml.doc
            "Physical connection id that was actually used for this request."]
      remoteIPAddress : string option;
          [@key "remoteIPAddress"]
          [@yojson.option]
          [@ocaml.doc "Remote IP address."]
      remotePort : number option;
          [@key "remotePort"] [@yojson.option] [@ocaml.doc "Remote port."]
      fromDiskCache : bool option;
          [@key "fromDiskCache"]
          [@yojson.option]
          [@ocaml.doc
            "Specifies that the request was served from the disk cache."]
      fromServiceWorker : bool option;
          [@key "fromServiceWorker"]
          [@yojson.option]
          [@ocaml.doc
            "Specifies that the request was served from the ServiceWorker."]
      fromPrefetchCache : bool option;
          [@key "fromPrefetchCache"]
          [@yojson.option]
          [@ocaml.doc
            "Specifies that the request was served from the prefetch cache."]
      encodedDataLength : number;
          [@key "encodedDataLength"]
          [@ocaml.doc "Total number of bytes received for this request so far."]
      timing : ResourceTiming.t option;
          [@key "timing"]
          [@yojson.option]
          [@ocaml.doc "Timing information for the given request."]
      serviceWorkerResponseSource : ServiceWorkerResponseSource.t option;
          [@key "serviceWorkerResponseSource"]
          [@yojson.option]
          [@ocaml.doc "Response source of response from ServiceWorker."]
      responseTime : TimeSinceEpoch.t option;
          [@key "responseTime"]
          [@yojson.option]
          [@ocaml.doc "The time at which the returned response was generated."]
      cacheStorageCacheName : string option;
          [@key "cacheStorageCacheName"]
          [@yojson.option]
          [@ocaml.doc "Cache Storage Cache Name."]
      protocol : string option;
          [@key "protocol"]
          [@yojson.option]
          [@ocaml.doc "Protocol used to fetch this request."]
      alternateProtocolUsage : AlternateProtocolUsage.t option;
          [@key "alternateProtocolUsage"]
          [@yojson.option]
          [@ocaml.doc
            "The reason why Chrome uses a specific transport protocol for HTTP \
             semantics."]
      securityState : Security.SecurityState.t;
          [@key "securityState"]
          [@ocaml.doc "Security state of the request resource."]
      securityDetails : SecurityDetails.t option;
          [@key "securityDetails"]
          [@yojson.option]
          [@ocaml.doc "Security details for the request."]
    }
    [@@deriving yojson] [@@ocaml.doc "HTTP response data."]
  end = struct
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "Response URL. This URL can be different from CachedResource.url \
             in case of redirect."]
      status : number; [@key "status"] [@ocaml.doc "HTTP response status code."]
      statusText : string;
          [@key "statusText"] [@ocaml.doc "HTTP response status text."]
      headers : Headers.t;
          [@key "headers"] [@ocaml.doc "HTTP response headers."]
      headersText : string option;
          [@key "headersText"]
          [@yojson.option]
          [@ocaml.doc
            "HTTP response headers text. This has been replaced by the headers \
             in Network.responseReceivedExtraInfo."]
      mimeType : string;
          [@key "mimeType"]
          [@ocaml.doc "Resource mimeType as determined by the browser."]
      requestHeaders : Headers.t option;
          [@key "requestHeaders"]
          [@yojson.option]
          [@ocaml.doc
            "Refined HTTP request headers that were actually transmitted over \
             the network."]
      requestHeadersText : string option;
          [@key "requestHeadersText"]
          [@yojson.option]
          [@ocaml.doc
            "HTTP request headers text. This has been replaced by the headers \
             in Network.requestWillBeSentExtraInfo."]
      connectionReused : bool;
          [@key "connectionReused"]
          [@ocaml.doc
            "Specifies whether physical connection was actually reused for \
             this request."]
      connectionId : number;
          [@key "connectionId"]
          [@ocaml.doc
            "Physical connection id that was actually used for this request."]
      remoteIPAddress : string option;
          [@key "remoteIPAddress"]
          [@yojson.option]
          [@ocaml.doc "Remote IP address."]
      remotePort : number option;
          [@key "remotePort"] [@yojson.option] [@ocaml.doc "Remote port."]
      fromDiskCache : bool option;
          [@key "fromDiskCache"]
          [@yojson.option]
          [@ocaml.doc
            "Specifies that the request was served from the disk cache."]
      fromServiceWorker : bool option;
          [@key "fromServiceWorker"]
          [@yojson.option]
          [@ocaml.doc
            "Specifies that the request was served from the ServiceWorker."]
      fromPrefetchCache : bool option;
          [@key "fromPrefetchCache"]
          [@yojson.option]
          [@ocaml.doc
            "Specifies that the request was served from the prefetch cache."]
      encodedDataLength : number;
          [@key "encodedDataLength"]
          [@ocaml.doc "Total number of bytes received for this request so far."]
      timing : ResourceTiming.t option;
          [@key "timing"]
          [@yojson.option]
          [@ocaml.doc "Timing information for the given request."]
      serviceWorkerResponseSource : ServiceWorkerResponseSource.t option;
          [@key "serviceWorkerResponseSource"]
          [@yojson.option]
          [@ocaml.doc "Response source of response from ServiceWorker."]
      responseTime : TimeSinceEpoch.t option;
          [@key "responseTime"]
          [@yojson.option]
          [@ocaml.doc "The time at which the returned response was generated."]
      cacheStorageCacheName : string option;
          [@key "cacheStorageCacheName"]
          [@yojson.option]
          [@ocaml.doc "Cache Storage Cache Name."]
      protocol : string option;
          [@key "protocol"]
          [@yojson.option]
          [@ocaml.doc "Protocol used to fetch this request."]
      alternateProtocolUsage : AlternateProtocolUsage.t option;
          [@key "alternateProtocolUsage"]
          [@yojson.option]
          [@ocaml.doc
            "The reason why Chrome uses a specific transport protocol for HTTP \
             semantics."]
      securityState : Security.SecurityState.t;
          [@key "securityState"]
          [@ocaml.doc "Security state of the request resource."]
      securityDetails : SecurityDetails.t option;
          [@key "securityDetails"]
          [@yojson.option]
          [@ocaml.doc "Security details for the request."]
    }
    [@@deriving yojson] [@@ocaml.doc "HTTP response data."]
  end

  and WebSocketRequest : sig
    type t = {
      headers : Headers.t; [@key "headers"] [@ocaml.doc "HTTP request headers."]
    }
    [@@deriving yojson] [@@ocaml.doc "WebSocket request data."]
  end = struct
    type t = {
      headers : Headers.t; [@key "headers"] [@ocaml.doc "HTTP request headers."]
    }
    [@@deriving yojson] [@@ocaml.doc "WebSocket request data."]
  end

  and WebSocketResponse : sig
    type t = {
      status : number; [@key "status"] [@ocaml.doc "HTTP response status code."]
      statusText : string;
          [@key "statusText"] [@ocaml.doc "HTTP response status text."]
      headers : Headers.t;
          [@key "headers"] [@ocaml.doc "HTTP response headers."]
      headersText : string option;
          [@key "headersText"]
          [@yojson.option]
          [@ocaml.doc "HTTP response headers text."]
      requestHeaders : Headers.t option;
          [@key "requestHeaders"]
          [@yojson.option]
          [@ocaml.doc "HTTP request headers."]
      requestHeadersText : string option;
          [@key "requestHeadersText"]
          [@yojson.option]
          [@ocaml.doc "HTTP request headers text."]
    }
    [@@deriving yojson] [@@ocaml.doc "WebSocket response data."]
  end = struct
    type t = {
      status : number; [@key "status"] [@ocaml.doc "HTTP response status code."]
      statusText : string;
          [@key "statusText"] [@ocaml.doc "HTTP response status text."]
      headers : Headers.t;
          [@key "headers"] [@ocaml.doc "HTTP response headers."]
      headersText : string option;
          [@key "headersText"]
          [@yojson.option]
          [@ocaml.doc "HTTP response headers text."]
      requestHeaders : Headers.t option;
          [@key "requestHeaders"]
          [@yojson.option]
          [@ocaml.doc "HTTP request headers."]
      requestHeadersText : string option;
          [@key "requestHeadersText"]
          [@yojson.option]
          [@ocaml.doc "HTTP request headers text."]
    }
    [@@deriving yojson] [@@ocaml.doc "WebSocket response data."]
  end

  and WebSocketFrame : sig
    type t = {
      opcode : number; [@key "opcode"] [@ocaml.doc "WebSocket message opcode."]
      mask : bool; [@key "mask"] [@ocaml.doc "WebSocket message mask."]
      payloadData : string;
          [@key "payloadData"]
          [@ocaml.doc
            "WebSocket message payload data.\n\
             If the opcode is 1, this is a text message and payloadData is a \
             UTF-8 string.\n\
             If the opcode isn't 1, then payloadData is a base64 encoded \
             string representing binary data."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "WebSocket message data. This represents an entire WebSocket message, \
       not just a fragmented frame as the name suggests."]
  end = struct
    type t = {
      opcode : number; [@key "opcode"] [@ocaml.doc "WebSocket message opcode."]
      mask : bool; [@key "mask"] [@ocaml.doc "WebSocket message mask."]
      payloadData : string;
          [@key "payloadData"]
          [@ocaml.doc
            "WebSocket message payload data.\n\
             If the opcode is 1, this is a text message and payloadData is a \
             UTF-8 string.\n\
             If the opcode isn't 1, then payloadData is a base64 encoded \
             string representing binary data."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "WebSocket message data. This represents an entire WebSocket message, \
       not just a fragmented frame as the name suggests."]
  end

  and CachedResource : sig
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "Resource URL. This is the url of the original network request."]
      type_ : ResourceType.t;
          [@key "type"] [@ocaml.doc "Type of this resource."]
      response : Response.t option;
          [@key "response"]
          [@yojson.option]
          [@ocaml.doc "Cached response data."]
      bodySize : number;
          [@key "bodySize"] [@ocaml.doc "Cached response body size."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the cached resource."]
  end = struct
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "Resource URL. This is the url of the original network request."]
      type_ : ResourceType.t;
          [@key "type"] [@ocaml.doc "Type of this resource."]
      response : Response.t option;
          [@key "response"]
          [@yojson.option]
          [@ocaml.doc "Cached response data."]
      bodySize : number;
          [@key "bodySize"] [@ocaml.doc "Cached response body size."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the cached resource."]
  end

  and Initiator : sig
    type _initiator_type =
      [ `parser | `script | `preload | `SignedExchange | `preflight | `other ]

    val _initiator_type_of_yojson : Yojson.Basic.t -> _initiator_type
    val yojson_of__initiator_type : _initiator_type -> Yojson.Basic.t

    type t = {
      type_ : _initiator_type;
          [@key "type"] [@ocaml.doc "Type of this initiator."]
      stack : Runtime.StackTrace.t option;
          [@key "stack"]
          [@yojson.option]
          [@ocaml.doc "Initiator JavaScript stack trace, set for Script only."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc
            "Initiator URL, set for Parser type or for Script type (when \
             script is importing module) or for SignedExchange type."]
      lineNumber : number option;
          [@key "lineNumber"]
          [@yojson.option]
          [@ocaml.doc
            "Initiator line number, set for Parser type or for Script type \
             (when script is importing\n\
             module) (0-based)."]
      columnNumber : number option;
          [@key "columnNumber"]
          [@yojson.option]
          [@ocaml.doc
            "Initiator column number, set for Parser type or for Script type \
             (when script is importing\n\
             module) (0-based)."]
      requestId : RequestId.t option;
          [@key "requestId"]
          [@yojson.option]
          [@ocaml.doc
            "Set if another request triggered this request (e.g. preflight)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the request initiator."]
  end = struct
    type _initiator_type =
      [ `parser | `script | `preload | `SignedExchange | `preflight | `other ]

    let _initiator_type_of_yojson = function
      | `String "parser" -> `parser
      | `String "script" -> `script
      | `String "preload" -> `preload
      | `String "SignedExchange" -> `SignedExchange
      | `String "preflight" -> `preflight
      | `String "other" -> `other
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__initiator_type = function
      | `parser -> `String "parser"
      | `script -> `String "script"
      | `preload -> `String "preload"
      | `SignedExchange -> `String "SignedExchange"
      | `preflight -> `String "preflight"
      | `other -> `String "other"

    type t = {
      type_ : _initiator_type;
          [@key "type"] [@ocaml.doc "Type of this initiator."]
      stack : Runtime.StackTrace.t option;
          [@key "stack"]
          [@yojson.option]
          [@ocaml.doc "Initiator JavaScript stack trace, set for Script only."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc
            "Initiator URL, set for Parser type or for Script type (when \
             script is importing module) or for SignedExchange type."]
      lineNumber : number option;
          [@key "lineNumber"]
          [@yojson.option]
          [@ocaml.doc
            "Initiator line number, set for Parser type or for Script type \
             (when script is importing\n\
             module) (0-based)."]
      columnNumber : number option;
          [@key "columnNumber"]
          [@yojson.option]
          [@ocaml.doc
            "Initiator column number, set for Parser type or for Script type \
             (when script is importing\n\
             module) (0-based)."]
      requestId : RequestId.t option;
          [@key "requestId"]
          [@yojson.option]
          [@ocaml.doc
            "Set if another request triggered this request (e.g. preflight)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the request initiator."]
  end

  and Cookie : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Cookie name."]
      value : string; [@key "value"] [@ocaml.doc "Cookie value."]
      domain : string; [@key "domain"] [@ocaml.doc "Cookie domain."]
      path : string; [@key "path"] [@ocaml.doc "Cookie path."]
      expires : number;
          [@key "expires"]
          [@ocaml.doc
            "Cookie expiration date as the number of seconds since the UNIX \
             epoch."]
      size : number; [@key "size"] [@ocaml.doc "Cookie size."]
      httpOnly : bool;
          [@key "httpOnly"] [@ocaml.doc "True if cookie is http-only."]
      secure : bool; [@key "secure"] [@ocaml.doc "True if cookie is secure."]
      session : bool;
          [@key "session"] [@ocaml.doc "True in case of session cookie."]
      sameSite : CookieSameSite.t option;
          [@key "sameSite"]
          [@yojson.option]
          [@ocaml.doc "Cookie SameSite type."]
      priority : CookiePriority.t;
          [@key "priority"] [@ocaml.doc "Cookie Priority"]
      sameParty : bool;
          [@key "sameParty"] [@ocaml.doc "True if cookie is SameParty."]
      sourceScheme : CookieSourceScheme.t;
          [@key "sourceScheme"] [@ocaml.doc "Cookie source scheme type."]
      sourcePort : number;
          [@key "sourcePort"]
          [@ocaml.doc
            "Cookie source port. Valid values are {-1, [1, 65535]}, -1 \
             indicates an unspecified port.\n\
             An unspecified port value allows protocol clients to emulate \
             legacy cookie scope for the port.\n\
             This is a temporary ability and it will be removed in the future."]
      partitionKey : string option;
          [@key "partitionKey"]
          [@yojson.option]
          [@ocaml.doc
            "Cookie partition key. The site of the top-level URL the browser \
             was visiting at the start\n\
             of the request to the endpoint that set the cookie."]
      partitionKeyOpaque : bool option;
          [@key "partitionKeyOpaque"]
          [@yojson.option]
          [@ocaml.doc "True if cookie partition key is opaque."]
    }
    [@@deriving yojson] [@@ocaml.doc "Cookie object"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Cookie name."]
      value : string; [@key "value"] [@ocaml.doc "Cookie value."]
      domain : string; [@key "domain"] [@ocaml.doc "Cookie domain."]
      path : string; [@key "path"] [@ocaml.doc "Cookie path."]
      expires : number;
          [@key "expires"]
          [@ocaml.doc
            "Cookie expiration date as the number of seconds since the UNIX \
             epoch."]
      size : number; [@key "size"] [@ocaml.doc "Cookie size."]
      httpOnly : bool;
          [@key "httpOnly"] [@ocaml.doc "True if cookie is http-only."]
      secure : bool; [@key "secure"] [@ocaml.doc "True if cookie is secure."]
      session : bool;
          [@key "session"] [@ocaml.doc "True in case of session cookie."]
      sameSite : CookieSameSite.t option;
          [@key "sameSite"]
          [@yojson.option]
          [@ocaml.doc "Cookie SameSite type."]
      priority : CookiePriority.t;
          [@key "priority"] [@ocaml.doc "Cookie Priority"]
      sameParty : bool;
          [@key "sameParty"] [@ocaml.doc "True if cookie is SameParty."]
      sourceScheme : CookieSourceScheme.t;
          [@key "sourceScheme"] [@ocaml.doc "Cookie source scheme type."]
      sourcePort : number;
          [@key "sourcePort"]
          [@ocaml.doc
            "Cookie source port. Valid values are {-1, [1, 65535]}, -1 \
             indicates an unspecified port.\n\
             An unspecified port value allows protocol clients to emulate \
             legacy cookie scope for the port.\n\
             This is a temporary ability and it will be removed in the future."]
      partitionKey : string option;
          [@key "partitionKey"]
          [@yojson.option]
          [@ocaml.doc
            "Cookie partition key. The site of the top-level URL the browser \
             was visiting at the start\n\
             of the request to the endpoint that set the cookie."]
      partitionKeyOpaque : bool option;
          [@key "partitionKeyOpaque"]
          [@yojson.option]
          [@ocaml.doc "True if cookie partition key is opaque."]
    }
    [@@deriving yojson] [@@ocaml.doc "Cookie object"]
  end

  and SetCookieBlockedReason : sig
    type _setcookieblockedreason =
      [ `SecureOnly
      | `SameSiteStrict
      | `SameSiteLax
      | `SameSiteUnspecifiedTreatedAsLax
      | `SameSiteNoneInsecure
      | `UserPreferences
      | `ThirdPartyBlockedInFirstPartySet
      | `SyntaxError
      | `SchemeNotSupported
      | `OverwriteSecure
      | `InvalidDomain
      | `InvalidPrefix
      | `UnknownError
      | `SchemefulSameSiteStrict
      | `SchemefulSameSiteLax
      | `SchemefulSameSiteUnspecifiedTreatedAsLax
      | `SamePartyFromCrossPartyContext
      | `SamePartyConflictsWithOtherAttributes
      | `NameValuePairExceedsMaxSize
      | `DisallowedCharacter ]

    val _setcookieblockedreason_of_yojson :
      Yojson.Basic.t -> _setcookieblockedreason

    val yojson_of__setcookieblockedreason :
      _setcookieblockedreason -> Yojson.Basic.t

    type t = _setcookieblockedreason
    [@@deriving yojson]
    [@@ocaml.doc
      "Types of reasons why a cookie may not be stored from a response."]
  end = struct
    type _setcookieblockedreason =
      [ `SecureOnly
      | `SameSiteStrict
      | `SameSiteLax
      | `SameSiteUnspecifiedTreatedAsLax
      | `SameSiteNoneInsecure
      | `UserPreferences
      | `ThirdPartyBlockedInFirstPartySet
      | `SyntaxError
      | `SchemeNotSupported
      | `OverwriteSecure
      | `InvalidDomain
      | `InvalidPrefix
      | `UnknownError
      | `SchemefulSameSiteStrict
      | `SchemefulSameSiteLax
      | `SchemefulSameSiteUnspecifiedTreatedAsLax
      | `SamePartyFromCrossPartyContext
      | `SamePartyConflictsWithOtherAttributes
      | `NameValuePairExceedsMaxSize
      | `DisallowedCharacter ]

    let _setcookieblockedreason_of_yojson = function
      | `String "SecureOnly" -> `SecureOnly
      | `String "SameSiteStrict" -> `SameSiteStrict
      | `String "SameSiteLax" -> `SameSiteLax
      | `String "SameSiteUnspecifiedTreatedAsLax" ->
          `SameSiteUnspecifiedTreatedAsLax
      | `String "SameSiteNoneInsecure" -> `SameSiteNoneInsecure
      | `String "UserPreferences" -> `UserPreferences
      | `String "ThirdPartyBlockedInFirstPartySet" ->
          `ThirdPartyBlockedInFirstPartySet
      | `String "SyntaxError" -> `SyntaxError
      | `String "SchemeNotSupported" -> `SchemeNotSupported
      | `String "OverwriteSecure" -> `OverwriteSecure
      | `String "InvalidDomain" -> `InvalidDomain
      | `String "InvalidPrefix" -> `InvalidPrefix
      | `String "UnknownError" -> `UnknownError
      | `String "SchemefulSameSiteStrict" -> `SchemefulSameSiteStrict
      | `String "SchemefulSameSiteLax" -> `SchemefulSameSiteLax
      | `String "SchemefulSameSiteUnspecifiedTreatedAsLax" ->
          `SchemefulSameSiteUnspecifiedTreatedAsLax
      | `String "SamePartyFromCrossPartyContext" ->
          `SamePartyFromCrossPartyContext
      | `String "SamePartyConflictsWithOtherAttributes" ->
          `SamePartyConflictsWithOtherAttributes
      | `String "NameValuePairExceedsMaxSize" -> `NameValuePairExceedsMaxSize
      | `String "DisallowedCharacter" -> `DisallowedCharacter
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__setcookieblockedreason = function
      | `SecureOnly -> `String "SecureOnly"
      | `SameSiteStrict -> `String "SameSiteStrict"
      | `SameSiteLax -> `String "SameSiteLax"
      | `SameSiteUnspecifiedTreatedAsLax ->
          `String "SameSiteUnspecifiedTreatedAsLax"
      | `SameSiteNoneInsecure -> `String "SameSiteNoneInsecure"
      | `UserPreferences -> `String "UserPreferences"
      | `ThirdPartyBlockedInFirstPartySet ->
          `String "ThirdPartyBlockedInFirstPartySet"
      | `SyntaxError -> `String "SyntaxError"
      | `SchemeNotSupported -> `String "SchemeNotSupported"
      | `OverwriteSecure -> `String "OverwriteSecure"
      | `InvalidDomain -> `String "InvalidDomain"
      | `InvalidPrefix -> `String "InvalidPrefix"
      | `UnknownError -> `String "UnknownError"
      | `SchemefulSameSiteStrict -> `String "SchemefulSameSiteStrict"
      | `SchemefulSameSiteLax -> `String "SchemefulSameSiteLax"
      | `SchemefulSameSiteUnspecifiedTreatedAsLax ->
          `String "SchemefulSameSiteUnspecifiedTreatedAsLax"
      | `SamePartyFromCrossPartyContext ->
          `String "SamePartyFromCrossPartyContext"
      | `SamePartyConflictsWithOtherAttributes ->
          `String "SamePartyConflictsWithOtherAttributes"
      | `NameValuePairExceedsMaxSize -> `String "NameValuePairExceedsMaxSize"
      | `DisallowedCharacter -> `String "DisallowedCharacter"

    type t = _setcookieblockedreason
    [@@deriving yojson]
    [@@ocaml.doc
      "Types of reasons why a cookie may not be stored from a response."]
  end

  and CookieBlockedReason : sig
    type _cookieblockedreason =
      [ `SecureOnly
      | `NotOnPath
      | `DomainMismatch
      | `SameSiteStrict
      | `SameSiteLax
      | `SameSiteUnspecifiedTreatedAsLax
      | `SameSiteNoneInsecure
      | `UserPreferences
      | `ThirdPartyBlockedInFirstPartySet
      | `UnknownError
      | `SchemefulSameSiteStrict
      | `SchemefulSameSiteLax
      | `SchemefulSameSiteUnspecifiedTreatedAsLax
      | `SamePartyFromCrossPartyContext
      | `NameValuePairExceedsMaxSize ]

    val _cookieblockedreason_of_yojson : Yojson.Basic.t -> _cookieblockedreason
    val yojson_of__cookieblockedreason : _cookieblockedreason -> Yojson.Basic.t

    type t = _cookieblockedreason
    [@@deriving yojson]
    [@@ocaml.doc
      "Types of reasons why a cookie may not be sent with a request."]
  end = struct
    type _cookieblockedreason =
      [ `SecureOnly
      | `NotOnPath
      | `DomainMismatch
      | `SameSiteStrict
      | `SameSiteLax
      | `SameSiteUnspecifiedTreatedAsLax
      | `SameSiteNoneInsecure
      | `UserPreferences
      | `ThirdPartyBlockedInFirstPartySet
      | `UnknownError
      | `SchemefulSameSiteStrict
      | `SchemefulSameSiteLax
      | `SchemefulSameSiteUnspecifiedTreatedAsLax
      | `SamePartyFromCrossPartyContext
      | `NameValuePairExceedsMaxSize ]

    let _cookieblockedreason_of_yojson = function
      | `String "SecureOnly" -> `SecureOnly
      | `String "NotOnPath" -> `NotOnPath
      | `String "DomainMismatch" -> `DomainMismatch
      | `String "SameSiteStrict" -> `SameSiteStrict
      | `String "SameSiteLax" -> `SameSiteLax
      | `String "SameSiteUnspecifiedTreatedAsLax" ->
          `SameSiteUnspecifiedTreatedAsLax
      | `String "SameSiteNoneInsecure" -> `SameSiteNoneInsecure
      | `String "UserPreferences" -> `UserPreferences
      | `String "ThirdPartyBlockedInFirstPartySet" ->
          `ThirdPartyBlockedInFirstPartySet
      | `String "UnknownError" -> `UnknownError
      | `String "SchemefulSameSiteStrict" -> `SchemefulSameSiteStrict
      | `String "SchemefulSameSiteLax" -> `SchemefulSameSiteLax
      | `String "SchemefulSameSiteUnspecifiedTreatedAsLax" ->
          `SchemefulSameSiteUnspecifiedTreatedAsLax
      | `String "SamePartyFromCrossPartyContext" ->
          `SamePartyFromCrossPartyContext
      | `String "NameValuePairExceedsMaxSize" -> `NameValuePairExceedsMaxSize
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__cookieblockedreason = function
      | `SecureOnly -> `String "SecureOnly"
      | `NotOnPath -> `String "NotOnPath"
      | `DomainMismatch -> `String "DomainMismatch"
      | `SameSiteStrict -> `String "SameSiteStrict"
      | `SameSiteLax -> `String "SameSiteLax"
      | `SameSiteUnspecifiedTreatedAsLax ->
          `String "SameSiteUnspecifiedTreatedAsLax"
      | `SameSiteNoneInsecure -> `String "SameSiteNoneInsecure"
      | `UserPreferences -> `String "UserPreferences"
      | `ThirdPartyBlockedInFirstPartySet ->
          `String "ThirdPartyBlockedInFirstPartySet"
      | `UnknownError -> `String "UnknownError"
      | `SchemefulSameSiteStrict -> `String "SchemefulSameSiteStrict"
      | `SchemefulSameSiteLax -> `String "SchemefulSameSiteLax"
      | `SchemefulSameSiteUnspecifiedTreatedAsLax ->
          `String "SchemefulSameSiteUnspecifiedTreatedAsLax"
      | `SamePartyFromCrossPartyContext ->
          `String "SamePartyFromCrossPartyContext"
      | `NameValuePairExceedsMaxSize -> `String "NameValuePairExceedsMaxSize"

    type t = _cookieblockedreason
    [@@deriving yojson]
    [@@ocaml.doc
      "Types of reasons why a cookie may not be sent with a request."]
  end

  and BlockedSetCookieWithReason : sig
    type t = {
      blockedReasons : SetCookieBlockedReason.t list;
          [@key "blockedReasons"]
          [@ocaml.doc "The reason(s) this cookie was blocked."]
      cookieLine : string;
          [@key "cookieLine"]
          [@ocaml.doc
            "The string representing this individual cookie as it would appear \
             in the header.\n\
             This is not the entire \"cookie\" or \"set-cookie\" header which \
             could have multiple cookies."]
      cookie : Cookie.t option;
          [@key "cookie"]
          [@yojson.option]
          [@ocaml.doc
            "The cookie object which represents the cookie which was not \
             stored. It is optional because\n\
             sometimes complete cookie information is not available, such as \
             in the case of parsing\n\
             errors."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A cookie which was not stored from a response with the corresponding \
       reason."]
  end = struct
    type t = {
      blockedReasons : SetCookieBlockedReason.t list;
          [@key "blockedReasons"]
          [@ocaml.doc "The reason(s) this cookie was blocked."]
      cookieLine : string;
          [@key "cookieLine"]
          [@ocaml.doc
            "The string representing this individual cookie as it would appear \
             in the header.\n\
             This is not the entire \"cookie\" or \"set-cookie\" header which \
             could have multiple cookies."]
      cookie : Cookie.t option;
          [@key "cookie"]
          [@yojson.option]
          [@ocaml.doc
            "The cookie object which represents the cookie which was not \
             stored. It is optional because\n\
             sometimes complete cookie information is not available, such as \
             in the case of parsing\n\
             errors."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A cookie which was not stored from a response with the corresponding \
       reason."]
  end

  and BlockedCookieWithReason : sig
    type t = {
      blockedReasons : CookieBlockedReason.t list;
          [@key "blockedReasons"]
          [@ocaml.doc "The reason(s) the cookie was blocked."]
      cookie : Cookie.t;
          [@key "cookie"]
          [@ocaml.doc
            "The cookie object representing the cookie which was not sent."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A cookie with was not sent with a request with the corresponding reason."]
  end = struct
    type t = {
      blockedReasons : CookieBlockedReason.t list;
          [@key "blockedReasons"]
          [@ocaml.doc "The reason(s) the cookie was blocked."]
      cookie : Cookie.t;
          [@key "cookie"]
          [@ocaml.doc
            "The cookie object representing the cookie which was not sent."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A cookie with was not sent with a request with the corresponding reason."]
  end

  and CookieParam : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Cookie name."]
      value : string; [@key "value"] [@ocaml.doc "Cookie value."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc
            "The request-URI to associate with the setting of the cookie. This \
             value can affect the\n\
             default domain, path, source port, and source scheme values of \
             the created cookie."]
      domain : string option;
          [@key "domain"] [@yojson.option] [@ocaml.doc "Cookie domain."]
      path : string option;
          [@key "path"] [@yojson.option] [@ocaml.doc "Cookie path."]
      secure : bool option;
          [@key "secure"]
          [@yojson.option]
          [@ocaml.doc "True if cookie is secure."]
      httpOnly : bool option;
          [@key "httpOnly"]
          [@yojson.option]
          [@ocaml.doc "True if cookie is http-only."]
      sameSite : CookieSameSite.t option;
          [@key "sameSite"]
          [@yojson.option]
          [@ocaml.doc "Cookie SameSite type."]
      expires : TimeSinceEpoch.t option;
          [@key "expires"]
          [@yojson.option]
          [@ocaml.doc "Cookie expiration date, session cookie if not set"]
      priority : CookiePriority.t option;
          [@key "priority"] [@yojson.option] [@ocaml.doc "Cookie Priority."]
      sameParty : bool option;
          [@key "sameParty"]
          [@yojson.option]
          [@ocaml.doc "True if cookie is SameParty."]
      sourceScheme : CookieSourceScheme.t option;
          [@key "sourceScheme"]
          [@yojson.option]
          [@ocaml.doc "Cookie source scheme type."]
      sourcePort : number option;
          [@key "sourcePort"]
          [@yojson.option]
          [@ocaml.doc
            "Cookie source port. Valid values are {-1, [1, 65535]}, -1 \
             indicates an unspecified port.\n\
             An unspecified port value allows protocol clients to emulate \
             legacy cookie scope for the port.\n\
             This is a temporary ability and it will be removed in the future."]
      partitionKey : string option;
          [@key "partitionKey"]
          [@yojson.option]
          [@ocaml.doc
            "Cookie partition key. The site of the top-level URL the browser \
             was visiting at the start\n\
             of the request to the endpoint that set the cookie.\n\
             If not set, the cookie will be set as not partitioned."]
    }
    [@@deriving yojson] [@@ocaml.doc "Cookie parameter object"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Cookie name."]
      value : string; [@key "value"] [@ocaml.doc "Cookie value."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc
            "The request-URI to associate with the setting of the cookie. This \
             value can affect the\n\
             default domain, path, source port, and source scheme values of \
             the created cookie."]
      domain : string option;
          [@key "domain"] [@yojson.option] [@ocaml.doc "Cookie domain."]
      path : string option;
          [@key "path"] [@yojson.option] [@ocaml.doc "Cookie path."]
      secure : bool option;
          [@key "secure"]
          [@yojson.option]
          [@ocaml.doc "True if cookie is secure."]
      httpOnly : bool option;
          [@key "httpOnly"]
          [@yojson.option]
          [@ocaml.doc "True if cookie is http-only."]
      sameSite : CookieSameSite.t option;
          [@key "sameSite"]
          [@yojson.option]
          [@ocaml.doc "Cookie SameSite type."]
      expires : TimeSinceEpoch.t option;
          [@key "expires"]
          [@yojson.option]
          [@ocaml.doc "Cookie expiration date, session cookie if not set"]
      priority : CookiePriority.t option;
          [@key "priority"] [@yojson.option] [@ocaml.doc "Cookie Priority."]
      sameParty : bool option;
          [@key "sameParty"]
          [@yojson.option]
          [@ocaml.doc "True if cookie is SameParty."]
      sourceScheme : CookieSourceScheme.t option;
          [@key "sourceScheme"]
          [@yojson.option]
          [@ocaml.doc "Cookie source scheme type."]
      sourcePort : number option;
          [@key "sourcePort"]
          [@yojson.option]
          [@ocaml.doc
            "Cookie source port. Valid values are {-1, [1, 65535]}, -1 \
             indicates an unspecified port.\n\
             An unspecified port value allows protocol clients to emulate \
             legacy cookie scope for the port.\n\
             This is a temporary ability and it will be removed in the future."]
      partitionKey : string option;
          [@key "partitionKey"]
          [@yojson.option]
          [@ocaml.doc
            "Cookie partition key. The site of the top-level URL the browser \
             was visiting at the start\n\
             of the request to the endpoint that set the cookie.\n\
             If not set, the cookie will be set as not partitioned."]
    }
    [@@deriving yojson] [@@ocaml.doc "Cookie parameter object"]
  end

  and AuthChallenge : sig
    type _authchallenge_source = [ `Server | `Proxy ]

    val _authchallenge_source_of_yojson :
      Yojson.Basic.t -> _authchallenge_source

    val yojson_of__authchallenge_source :
      _authchallenge_source -> Yojson.Basic.t

    type t = {
      source : _authchallenge_source option;
          [@key "source"]
          [@yojson.option]
          [@ocaml.doc "Source of the authentication challenge."]
      origin : string; [@key "origin"] [@ocaml.doc "Origin of the challenger."]
      scheme : string;
          [@key "scheme"]
          [@ocaml.doc "The authentication scheme used, such as basic or digest"]
      realm : string;
          [@key "realm"]
          [@ocaml.doc "The realm of the challenge. May be empty."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Authorization challenge for HTTP status code 401 or 407."]
  end = struct
    type _authchallenge_source = [ `Server | `Proxy ]

    let _authchallenge_source_of_yojson = function
      | `String "Server" -> `Server
      | `String "Proxy" -> `Proxy
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__authchallenge_source = function
      | `Server -> `String "Server"
      | `Proxy -> `String "Proxy"

    type t = {
      source : _authchallenge_source option;
          [@key "source"]
          [@yojson.option]
          [@ocaml.doc "Source of the authentication challenge."]
      origin : string; [@key "origin"] [@ocaml.doc "Origin of the challenger."]
      scheme : string;
          [@key "scheme"]
          [@ocaml.doc "The authentication scheme used, such as basic or digest"]
      realm : string;
          [@key "realm"]
          [@ocaml.doc "The realm of the challenge. May be empty."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Authorization challenge for HTTP status code 401 or 407."]
  end

  and AuthChallengeResponse : sig
    type _authchallengeresponse_response =
      [ `Default | `CancelAuth | `ProvideCredentials ]

    val _authchallengeresponse_response_of_yojson :
      Yojson.Basic.t -> _authchallengeresponse_response

    val yojson_of__authchallengeresponse_response :
      _authchallengeresponse_response -> Yojson.Basic.t

    type t = {
      response : _authchallengeresponse_response;
          [@key "response"]
          [@ocaml.doc
            "The decision on what to do in response to the authorization \
             challenge.  Default means\n\
             deferring to the default behavior of the net stack, which will \
             likely either the Cancel\n\
             authentication or display a popup dialog box."]
      username : string option;
          [@key "username"]
          [@yojson.option]
          [@ocaml.doc
            "The username to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
      password : string option;
          [@key "password"]
          [@yojson.option]
          [@ocaml.doc
            "The password to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
    }
    [@@deriving yojson] [@@ocaml.doc "Response to an AuthChallenge."]
  end = struct
    type _authchallengeresponse_response =
      [ `Default | `CancelAuth | `ProvideCredentials ]

    let _authchallengeresponse_response_of_yojson = function
      | `String "Default" -> `Default
      | `String "CancelAuth" -> `CancelAuth
      | `String "ProvideCredentials" -> `ProvideCredentials
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__authchallengeresponse_response = function
      | `Default -> `String "Default"
      | `CancelAuth -> `String "CancelAuth"
      | `ProvideCredentials -> `String "ProvideCredentials"

    type t = {
      response : _authchallengeresponse_response;
          [@key "response"]
          [@ocaml.doc
            "The decision on what to do in response to the authorization \
             challenge.  Default means\n\
             deferring to the default behavior of the net stack, which will \
             likely either the Cancel\n\
             authentication or display a popup dialog box."]
      username : string option;
          [@key "username"]
          [@yojson.option]
          [@ocaml.doc
            "The username to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
      password : string option;
          [@key "password"]
          [@yojson.option]
          [@ocaml.doc
            "The password to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
    }
    [@@deriving yojson] [@@ocaml.doc "Response to an AuthChallenge."]
  end

  and InterceptionStage : sig
    type _interceptionstage = [ `Request | `HeadersReceived ]

    val _interceptionstage_of_yojson : Yojson.Basic.t -> _interceptionstage
    val yojson_of__interceptionstage : _interceptionstage -> Yojson.Basic.t

    type t = _interceptionstage
    [@@deriving yojson]
    [@@ocaml.doc
      "Stages of the interception to begin intercepting. Request will \
       intercept before the request is\n\
       sent. Response will intercept after the response is received."]
  end = struct
    type _interceptionstage = [ `Request | `HeadersReceived ]

    let _interceptionstage_of_yojson = function
      | `String "Request" -> `Request
      | `String "HeadersReceived" -> `HeadersReceived
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__interceptionstage = function
      | `Request -> `String "Request"
      | `HeadersReceived -> `String "HeadersReceived"

    type t = _interceptionstage
    [@@deriving yojson]
    [@@ocaml.doc
      "Stages of the interception to begin intercepting. Request will \
       intercept before the request is\n\
       sent. Response will intercept after the response is received."]
  end

  and RequestPattern : sig
    type t = {
      urlPattern : string option;
          [@key "urlPattern"]
          [@yojson.option]
          [@ocaml.doc
            "Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are \
             allowed. Escape character is\n\
             backslash. Omitting is equivalent to `\"*\"`."]
      resourceType : ResourceType.t option;
          [@key "resourceType"]
          [@yojson.option]
          [@ocaml.doc
            "If set, only requests for matching resource types will be \
             intercepted."]
      interceptionStage : InterceptionStage.t option;
          [@key "interceptionStage"]
          [@yojson.option]
          [@ocaml.doc
            "Stage at which to begin intercepting requests. Default is Request."]
    }
    [@@deriving yojson] [@@ocaml.doc "Request pattern for interception."]
  end = struct
    type t = {
      urlPattern : string option;
          [@key "urlPattern"]
          [@yojson.option]
          [@ocaml.doc
            "Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are \
             allowed. Escape character is\n\
             backslash. Omitting is equivalent to `\"*\"`."]
      resourceType : ResourceType.t option;
          [@key "resourceType"]
          [@yojson.option]
          [@ocaml.doc
            "If set, only requests for matching resource types will be \
             intercepted."]
      interceptionStage : InterceptionStage.t option;
          [@key "interceptionStage"]
          [@yojson.option]
          [@ocaml.doc
            "Stage at which to begin intercepting requests. Default is Request."]
    }
    [@@deriving yojson] [@@ocaml.doc "Request pattern for interception."]
  end

  and SignedExchangeSignature : sig
    type t = {
      label : string;
          [@key "label"] [@ocaml.doc "Signed exchange signature label."]
      signature : string;
          [@key "signature"]
          [@ocaml.doc "The hex string of signed exchange signature."]
      integrity : string;
          [@key "integrity"] [@ocaml.doc "Signed exchange signature integrity."]
      certUrl : string option;
          [@key "certUrl"]
          [@yojson.option]
          [@ocaml.doc "Signed exchange signature cert Url."]
      certSha256 : string option;
          [@key "certSha256"]
          [@yojson.option]
          [@ocaml.doc
            "The hex string of signed exchange signature cert sha256."]
      validityUrl : string;
          [@key "validityUrl"]
          [@ocaml.doc "Signed exchange signature validity Url."]
      date : number;
          [@key "date"] [@ocaml.doc "Signed exchange signature date."]
      expires : number;
          [@key "expires"] [@ocaml.doc "Signed exchange signature expires."]
      certificates : string list option;
          [@key "certificates"]
          [@yojson.option]
          [@ocaml.doc "The encoded certificates."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a signed exchange signature.\n\
       https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#rfc.section.3.1"]
  end = struct
    type t = {
      label : string;
          [@key "label"] [@ocaml.doc "Signed exchange signature label."]
      signature : string;
          [@key "signature"]
          [@ocaml.doc "The hex string of signed exchange signature."]
      integrity : string;
          [@key "integrity"] [@ocaml.doc "Signed exchange signature integrity."]
      certUrl : string option;
          [@key "certUrl"]
          [@yojson.option]
          [@ocaml.doc "Signed exchange signature cert Url."]
      certSha256 : string option;
          [@key "certSha256"]
          [@yojson.option]
          [@ocaml.doc
            "The hex string of signed exchange signature cert sha256."]
      validityUrl : string;
          [@key "validityUrl"]
          [@ocaml.doc "Signed exchange signature validity Url."]
      date : number;
          [@key "date"] [@ocaml.doc "Signed exchange signature date."]
      expires : number;
          [@key "expires"] [@ocaml.doc "Signed exchange signature expires."]
      certificates : string list option;
          [@key "certificates"]
          [@yojson.option]
          [@ocaml.doc "The encoded certificates."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a signed exchange signature.\n\
       https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#rfc.section.3.1"]
  end

  and SignedExchangeHeader : sig
    type t = {
      requestUrl : string;
          [@key "requestUrl"] [@ocaml.doc "Signed exchange request URL."]
      responseCode : number;
          [@key "responseCode"] [@ocaml.doc "Signed exchange response code."]
      responseHeaders : Headers.t;
          [@key "responseHeaders"]
          [@ocaml.doc "Signed exchange response headers."]
      signatures : SignedExchangeSignature.t list;
          [@key "signatures"] [@ocaml.doc "Signed exchange response signature."]
      headerIntegrity : string;
          [@key "headerIntegrity"]
          [@ocaml.doc
            "Signed exchange header integrity hash in the form of \
             `sha256-<base64-hash-value>`."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a signed exchange header.\n\
       https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation"]
  end = struct
    type t = {
      requestUrl : string;
          [@key "requestUrl"] [@ocaml.doc "Signed exchange request URL."]
      responseCode : number;
          [@key "responseCode"] [@ocaml.doc "Signed exchange response code."]
      responseHeaders : Headers.t;
          [@key "responseHeaders"]
          [@ocaml.doc "Signed exchange response headers."]
      signatures : SignedExchangeSignature.t list;
          [@key "signatures"] [@ocaml.doc "Signed exchange response signature."]
      headerIntegrity : string;
          [@key "headerIntegrity"]
          [@ocaml.doc
            "Signed exchange header integrity hash in the form of \
             `sha256-<base64-hash-value>`."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about a signed exchange header.\n\
       https://wicg.github.io/webpackage/draft-yasskin-httpbis-origin-signed-exchanges-impl.html#cbor-representation"]
  end

  and SignedExchangeErrorField : sig
    type _signedexchangeerrorfield =
      [ `signatureSig
      | `signatureIntegrity
      | `signatureCertUrl
      | `signatureCertSha256
      | `signatureValidityUrl
      | `signatureTimestamps ]

    val _signedexchangeerrorfield_of_yojson :
      Yojson.Basic.t -> _signedexchangeerrorfield

    val yojson_of__signedexchangeerrorfield :
      _signedexchangeerrorfield -> Yojson.Basic.t

    type t = _signedexchangeerrorfield
    [@@deriving yojson]
    [@@ocaml.doc "Field type for a signed exchange related error."]
  end = struct
    type _signedexchangeerrorfield =
      [ `signatureSig
      | `signatureIntegrity
      | `signatureCertUrl
      | `signatureCertSha256
      | `signatureValidityUrl
      | `signatureTimestamps ]

    let _signedexchangeerrorfield_of_yojson = function
      | `String "signatureSig" -> `signatureSig
      | `String "signatureIntegrity" -> `signatureIntegrity
      | `String "signatureCertUrl" -> `signatureCertUrl
      | `String "signatureCertSha256" -> `signatureCertSha256
      | `String "signatureValidityUrl" -> `signatureValidityUrl
      | `String "signatureTimestamps" -> `signatureTimestamps
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__signedexchangeerrorfield = function
      | `signatureSig -> `String "signatureSig"
      | `signatureIntegrity -> `String "signatureIntegrity"
      | `signatureCertUrl -> `String "signatureCertUrl"
      | `signatureCertSha256 -> `String "signatureCertSha256"
      | `signatureValidityUrl -> `String "signatureValidityUrl"
      | `signatureTimestamps -> `String "signatureTimestamps"

    type t = _signedexchangeerrorfield
    [@@deriving yojson]
    [@@ocaml.doc "Field type for a signed exchange related error."]
  end

  and SignedExchangeError : sig
    type t = {
      message : string; [@key "message"] [@ocaml.doc "Error message."]
      signatureIndex : number option;
          [@key "signatureIndex"]
          [@yojson.option]
          [@ocaml.doc "The index of the signature which caused the error."]
      errorField : SignedExchangeErrorField.t option;
          [@key "errorField"]
          [@yojson.option]
          [@ocaml.doc "The field which caused the error."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about a signed exchange response."]
  end = struct
    type t = {
      message : string; [@key "message"] [@ocaml.doc "Error message."]
      signatureIndex : number option;
          [@key "signatureIndex"]
          [@yojson.option]
          [@ocaml.doc "The index of the signature which caused the error."]
      errorField : SignedExchangeErrorField.t option;
          [@key "errorField"]
          [@yojson.option]
          [@ocaml.doc "The field which caused the error."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about a signed exchange response."]
  end

  and SignedExchangeInfo : sig
    type t = {
      outerResponse : Response.t;
          [@key "outerResponse"]
          [@ocaml.doc
            "The outer response of signed HTTP exchange which was received \
             from network."]
      header : SignedExchangeHeader.t option;
          [@key "header"]
          [@yojson.option]
          [@ocaml.doc "Information about the signed exchange header."]
      securityDetails : SecurityDetails.t option;
          [@key "securityDetails"]
          [@yojson.option]
          [@ocaml.doc "Security details for the signed exchange header."]
      errors : SignedExchangeError.t list option;
          [@key "errors"]
          [@yojson.option]
          [@ocaml.doc "Errors occurred while handling the signed exchagne."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about a signed exchange response."]
  end = struct
    type t = {
      outerResponse : Response.t;
          [@key "outerResponse"]
          [@ocaml.doc
            "The outer response of signed HTTP exchange which was received \
             from network."]
      header : SignedExchangeHeader.t option;
          [@key "header"]
          [@yojson.option]
          [@ocaml.doc "Information about the signed exchange header."]
      securityDetails : SecurityDetails.t option;
          [@key "securityDetails"]
          [@yojson.option]
          [@ocaml.doc "Security details for the signed exchange header."]
      errors : SignedExchangeError.t list option;
          [@key "errors"]
          [@yojson.option]
          [@ocaml.doc "Errors occurred while handling the signed exchagne."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about a signed exchange response."]
  end

  and ContentEncoding : sig
    type _contentencoding = [ `deflate | `gzip | `br | `zstd ]

    val _contentencoding_of_yojson : Yojson.Basic.t -> _contentencoding
    val yojson_of__contentencoding : _contentencoding -> Yojson.Basic.t

    type t = _contentencoding
    [@@deriving yojson]
    [@@ocaml.doc "List of content encodings supported by the backend."]
  end = struct
    type _contentencoding = [ `deflate | `gzip | `br | `zstd ]

    let _contentencoding_of_yojson = function
      | `String "deflate" -> `deflate
      | `String "gzip" -> `gzip
      | `String "br" -> `br
      | `String "zstd" -> `zstd
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__contentencoding = function
      | `deflate -> `String "deflate"
      | `gzip -> `String "gzip"
      | `br -> `String "br"
      | `zstd -> `String "zstd"

    type t = _contentencoding
    [@@deriving yojson]
    [@@ocaml.doc "List of content encodings supported by the backend."]
  end

  and PrivateNetworkRequestPolicy : sig
    type _privatenetworkrequestpolicy =
      [ `Allow
      | `BlockFromInsecureToMorePrivate
      | `WarnFromInsecureToMorePrivate
      | `PreflightBlock
      | `PreflightWarn ]

    val _privatenetworkrequestpolicy_of_yojson :
      Yojson.Basic.t -> _privatenetworkrequestpolicy

    val yojson_of__privatenetworkrequestpolicy :
      _privatenetworkrequestpolicy -> Yojson.Basic.t

    type t = _privatenetworkrequestpolicy
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _privatenetworkrequestpolicy =
      [ `Allow
      | `BlockFromInsecureToMorePrivate
      | `WarnFromInsecureToMorePrivate
      | `PreflightBlock
      | `PreflightWarn ]

    let _privatenetworkrequestpolicy_of_yojson = function
      | `String "Allow" -> `Allow
      | `String "BlockFromInsecureToMorePrivate" ->
          `BlockFromInsecureToMorePrivate
      | `String "WarnFromInsecureToMorePrivate" ->
          `WarnFromInsecureToMorePrivate
      | `String "PreflightBlock" -> `PreflightBlock
      | `String "PreflightWarn" -> `PreflightWarn
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__privatenetworkrequestpolicy = function
      | `Allow -> `String "Allow"
      | `BlockFromInsecureToMorePrivate ->
          `String "BlockFromInsecureToMorePrivate"
      | `WarnFromInsecureToMorePrivate ->
          `String "WarnFromInsecureToMorePrivate"
      | `PreflightBlock -> `String "PreflightBlock"
      | `PreflightWarn -> `String "PreflightWarn"

    type t = _privatenetworkrequestpolicy
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and IPAddressSpace : sig
    type _ipaddressspace = [ `Local | `Private | `Public | `Unknown ]

    val _ipaddressspace_of_yojson : Yojson.Basic.t -> _ipaddressspace
    val yojson_of__ipaddressspace : _ipaddressspace -> Yojson.Basic.t

    type t = _ipaddressspace
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _ipaddressspace = [ `Local | `Private | `Public | `Unknown ]

    let _ipaddressspace_of_yojson = function
      | `String "Local" -> `Local
      | `String "Private" -> `Private
      | `String "Public" -> `Public
      | `String "Unknown" -> `Unknown
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__ipaddressspace = function
      | `Local -> `String "Local"
      | `Private -> `String "Private"
      | `Public -> `String "Public"
      | `Unknown -> `String "Unknown"

    type t = _ipaddressspace
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ConnectTiming : sig
    type t = {
      requestTime : number;
          [@key "requestTime"]
          [@ocaml.doc
            "Timing's requestTime is a baseline in seconds, while the other \
             numbers are ticks in\n\
             milliseconds relatively to this requestTime. Matches \
             ResourceTiming's requestTime for\n\
             the same request (but not for redirected requests)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      requestTime : number;
          [@key "requestTime"]
          [@ocaml.doc
            "Timing's requestTime is a baseline in seconds, while the other \
             numbers are ticks in\n\
             milliseconds relatively to this requestTime. Matches \
             ResourceTiming's requestTime for\n\
             the same request (but not for redirected requests)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ClientSecurityState : sig
    type t = {
      initiatorIsSecureContext : bool;
          [@key "initiatorIsSecureContext"]
          [@ocaml.doc "No description provided"]
      initiatorIPAddressSpace : IPAddressSpace.t;
          [@key "initiatorIPAddressSpace"]
          [@ocaml.doc "No description provided"]
      privateNetworkRequestPolicy : PrivateNetworkRequestPolicy.t;
          [@key "privateNetworkRequestPolicy"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      initiatorIsSecureContext : bool;
          [@key "initiatorIsSecureContext"]
          [@ocaml.doc "No description provided"]
      initiatorIPAddressSpace : IPAddressSpace.t;
          [@key "initiatorIPAddressSpace"]
          [@ocaml.doc "No description provided"]
      privateNetworkRequestPolicy : PrivateNetworkRequestPolicy.t;
          [@key "privateNetworkRequestPolicy"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CrossOriginOpenerPolicyValue : sig
    type _crossoriginopenerpolicyvalue =
      [ `SameOrigin
      | `SameOriginAllowPopups
      | `RestrictProperties
      | `UnsafeNone
      | `SameOriginPlusCoep
      | `RestrictPropertiesPlusCoep ]

    val _crossoriginopenerpolicyvalue_of_yojson :
      Yojson.Basic.t -> _crossoriginopenerpolicyvalue

    val yojson_of__crossoriginopenerpolicyvalue :
      _crossoriginopenerpolicyvalue -> Yojson.Basic.t

    type t = _crossoriginopenerpolicyvalue
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _crossoriginopenerpolicyvalue =
      [ `SameOrigin
      | `SameOriginAllowPopups
      | `RestrictProperties
      | `UnsafeNone
      | `SameOriginPlusCoep
      | `RestrictPropertiesPlusCoep ]

    let _crossoriginopenerpolicyvalue_of_yojson = function
      | `String "SameOrigin" -> `SameOrigin
      | `String "SameOriginAllowPopups" -> `SameOriginAllowPopups
      | `String "RestrictProperties" -> `RestrictProperties
      | `String "UnsafeNone" -> `UnsafeNone
      | `String "SameOriginPlusCoep" -> `SameOriginPlusCoep
      | `String "RestrictPropertiesPlusCoep" -> `RestrictPropertiesPlusCoep
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__crossoriginopenerpolicyvalue = function
      | `SameOrigin -> `String "SameOrigin"
      | `SameOriginAllowPopups -> `String "SameOriginAllowPopups"
      | `RestrictProperties -> `String "RestrictProperties"
      | `UnsafeNone -> `String "UnsafeNone"
      | `SameOriginPlusCoep -> `String "SameOriginPlusCoep"
      | `RestrictPropertiesPlusCoep -> `String "RestrictPropertiesPlusCoep"

    type t = _crossoriginopenerpolicyvalue
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CrossOriginOpenerPolicyStatus : sig
    type t = {
      value : CrossOriginOpenerPolicyValue.t;
          [@key "value"] [@ocaml.doc "No description provided"]
      reportOnlyValue : CrossOriginOpenerPolicyValue.t;
          [@key "reportOnlyValue"] [@ocaml.doc "No description provided"]
      reportingEndpoint : string option;
          [@key "reportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      reportOnlyReportingEndpoint : string option;
          [@key "reportOnlyReportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      value : CrossOriginOpenerPolicyValue.t;
          [@key "value"] [@ocaml.doc "No description provided"]
      reportOnlyValue : CrossOriginOpenerPolicyValue.t;
          [@key "reportOnlyValue"] [@ocaml.doc "No description provided"]
      reportingEndpoint : string option;
          [@key "reportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      reportOnlyReportingEndpoint : string option;
          [@key "reportOnlyReportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CrossOriginEmbedderPolicyValue : sig
    type _crossoriginembedderpolicyvalue =
      [ `None | `Credentialless | `RequireCorp ]

    val _crossoriginembedderpolicyvalue_of_yojson :
      Yojson.Basic.t -> _crossoriginembedderpolicyvalue

    val yojson_of__crossoriginembedderpolicyvalue :
      _crossoriginembedderpolicyvalue -> Yojson.Basic.t

    type t = _crossoriginembedderpolicyvalue
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _crossoriginembedderpolicyvalue =
      [ `None | `Credentialless | `RequireCorp ]

    let _crossoriginembedderpolicyvalue_of_yojson = function
      | `String "None" -> `None
      | `String "Credentialless" -> `Credentialless
      | `String "RequireCorp" -> `RequireCorp
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__crossoriginembedderpolicyvalue = function
      | `None -> `String "None"
      | `Credentialless -> `String "Credentialless"
      | `RequireCorp -> `String "RequireCorp"

    type t = _crossoriginembedderpolicyvalue
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and CrossOriginEmbedderPolicyStatus : sig
    type t = {
      value : CrossOriginEmbedderPolicyValue.t;
          [@key "value"] [@ocaml.doc "No description provided"]
      reportOnlyValue : CrossOriginEmbedderPolicyValue.t;
          [@key "reportOnlyValue"] [@ocaml.doc "No description provided"]
      reportingEndpoint : string option;
          [@key "reportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      reportOnlyReportingEndpoint : string option;
          [@key "reportOnlyReportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      value : CrossOriginEmbedderPolicyValue.t;
          [@key "value"] [@ocaml.doc "No description provided"]
      reportOnlyValue : CrossOriginEmbedderPolicyValue.t;
          [@key "reportOnlyValue"] [@ocaml.doc "No description provided"]
      reportingEndpoint : string option;
          [@key "reportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      reportOnlyReportingEndpoint : string option;
          [@key "reportOnlyReportingEndpoint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContentSecurityPolicySource : sig
    type _contentsecuritypolicysource = [ `HTTP | `Meta ]

    val _contentsecuritypolicysource_of_yojson :
      Yojson.Basic.t -> _contentsecuritypolicysource

    val yojson_of__contentsecuritypolicysource :
      _contentsecuritypolicysource -> Yojson.Basic.t

    type t = _contentsecuritypolicysource
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _contentsecuritypolicysource = [ `HTTP | `Meta ]

    let _contentsecuritypolicysource_of_yojson = function
      | `String "HTTP" -> `HTTP
      | `String "Meta" -> `Meta
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__contentsecuritypolicysource = function
      | `HTTP -> `String "HTTP"
      | `Meta -> `String "Meta"

    type t = _contentsecuritypolicysource
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContentSecurityPolicyStatus : sig
    type t = {
      effectiveDirectives : string;
          [@key "effectiveDirectives"] [@ocaml.doc "No description provided"]
      isEnforced : bool;
          [@key "isEnforced"] [@ocaml.doc "No description provided"]
      source : ContentSecurityPolicySource.t;
          [@key "source"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      effectiveDirectives : string;
          [@key "effectiveDirectives"] [@ocaml.doc "No description provided"]
      isEnforced : bool;
          [@key "isEnforced"] [@ocaml.doc "No description provided"]
      source : ContentSecurityPolicySource.t;
          [@key "source"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SecurityIsolationStatus : sig
    type t = {
      coop : CrossOriginOpenerPolicyStatus.t option;
          [@key "coop"] [@yojson.option] [@ocaml.doc "No description provided"]
      coep : CrossOriginEmbedderPolicyStatus.t option;
          [@key "coep"] [@yojson.option] [@ocaml.doc "No description provided"]
      csp : ContentSecurityPolicyStatus.t list option;
          [@key "csp"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      coop : CrossOriginOpenerPolicyStatus.t option;
          [@key "coop"] [@yojson.option] [@ocaml.doc "No description provided"]
      coep : CrossOriginEmbedderPolicyStatus.t option;
          [@key "coep"] [@yojson.option] [@ocaml.doc "No description provided"]
      csp : ContentSecurityPolicyStatus.t list option;
          [@key "csp"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ReportStatus : sig
    type _reportstatus = [ `Queued | `Pending | `MarkedForRemoval | `Success ]

    val _reportstatus_of_yojson : Yojson.Basic.t -> _reportstatus
    val yojson_of__reportstatus : _reportstatus -> Yojson.Basic.t

    type t = _reportstatus
    [@@deriving yojson] [@@ocaml.doc "The status of a Reporting API report."]
  end = struct
    type _reportstatus = [ `Queued | `Pending | `MarkedForRemoval | `Success ]

    let _reportstatus_of_yojson = function
      | `String "Queued" -> `Queued
      | `String "Pending" -> `Pending
      | `String "MarkedForRemoval" -> `MarkedForRemoval
      | `String "Success" -> `Success
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__reportstatus = function
      | `Queued -> `String "Queued"
      | `Pending -> `String "Pending"
      | `MarkedForRemoval -> `String "MarkedForRemoval"
      | `Success -> `String "Success"

    type t = _reportstatus
    [@@deriving yojson] [@@ocaml.doc "The status of a Reporting API report."]
  end

  and ReportId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ReportingApiReport : sig
    type t = {
      id : ReportId.t; [@key "id"] [@ocaml.doc "No description provided"]
      initiatorUrl : string;
          [@key "initiatorUrl"]
          [@ocaml.doc "The URL of the document that triggered the report."]
      destination : string;
          [@key "destination"]
          [@ocaml.doc
            "The name of the endpoint group that should be used to deliver the \
             report."]
      type_ : string;
          [@key "type"]
          [@ocaml.doc
            "The type of the report (specifies the set of data that is \
             contained in the report body)."]
      timestamp : Network.TimeSinceEpoch.t;
          [@key "timestamp"] [@ocaml.doc "When the report was generated."]
      depth : number;
          [@key "depth"]
          [@ocaml.doc "How many uploads deep the related request was."]
      completedAttempts : number;
          [@key "completedAttempts"]
          [@ocaml.doc
            "The number of delivery attempts made so far, not including an \
             active attempt."]
      body : assoc; [@key "body"] [@ocaml.doc "No description provided"]
      status : ReportStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "An object representing a report generated by the Reporting API."]
  end = struct
    type t = {
      id : ReportId.t; [@key "id"] [@ocaml.doc "No description provided"]
      initiatorUrl : string;
          [@key "initiatorUrl"]
          [@ocaml.doc "The URL of the document that triggered the report."]
      destination : string;
          [@key "destination"]
          [@ocaml.doc
            "The name of the endpoint group that should be used to deliver the \
             report."]
      type_ : string;
          [@key "type"]
          [@ocaml.doc
            "The type of the report (specifies the set of data that is \
             contained in the report body)."]
      timestamp : Network.TimeSinceEpoch.t;
          [@key "timestamp"] [@ocaml.doc "When the report was generated."]
      depth : number;
          [@key "depth"]
          [@ocaml.doc "How many uploads deep the related request was."]
      completedAttempts : number;
          [@key "completedAttempts"]
          [@ocaml.doc
            "The number of delivery attempts made so far, not including an \
             active attempt."]
      body : assoc; [@key "body"] [@ocaml.doc "No description provided"]
      status : ReportStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "An object representing a report generated by the Reporting API."]
  end

  and ReportingApiEndpoint : sig
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "The URL of the endpoint to which reports may be delivered."]
      groupName : string;
          [@key "groupName"] [@ocaml.doc "Name of the endpoint group."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "The URL of the endpoint to which reports may be delivered."]
      groupName : string;
          [@key "groupName"] [@ocaml.doc "Name of the endpoint group."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and LoadNetworkResourcePageResult : sig
    type t = {
      success : bool; [@key "success"] [@ocaml.doc "No description provided"]
      netError : number option;
          [@key "netError"]
          [@yojson.option]
          [@ocaml.doc "Optional values used for error reporting."]
      netErrorName : string option;
          [@key "netErrorName"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      httpStatusCode : number option;
          [@key "httpStatusCode"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      stream : IO.StreamHandle.t option;
          [@key "stream"]
          [@yojson.option]
          [@ocaml.doc
            "If successful, one of the following two fields holds the result."]
      headers : Network.Headers.t option;
          [@key "headers"] [@yojson.option] [@ocaml.doc "Response headers."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "An object providing the result of a network resource load."]
  end = struct
    type t = {
      success : bool; [@key "success"] [@ocaml.doc "No description provided"]
      netError : number option;
          [@key "netError"]
          [@yojson.option]
          [@ocaml.doc "Optional values used for error reporting."]
      netErrorName : string option;
          [@key "netErrorName"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      httpStatusCode : number option;
          [@key "httpStatusCode"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      stream : IO.StreamHandle.t option;
          [@key "stream"]
          [@yojson.option]
          [@ocaml.doc
            "If successful, one of the following two fields holds the result."]
      headers : Network.Headers.t option;
          [@key "headers"] [@yojson.option] [@ocaml.doc "Response headers."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "An object providing the result of a network resource load."]
  end

  and LoadNetworkResourceOptions : sig
    type t = {
      disableCache : bool;
          [@key "disableCache"] [@ocaml.doc "No description provided"]
      includeCredentials : bool;
          [@key "includeCredentials"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "An options object that may be extended later to better support CORS,\n\
       CORB and streaming."]
  end = struct
    type t = {
      disableCache : bool;
          [@key "disableCache"] [@ocaml.doc "No description provided"]
      includeCredentials : bool;
          [@key "includeCredentials"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "An options object that may be extended later to better support CORS,\n\
       CORB and streaming."]
  end
end

and Overlay : sig
  module rec SourceOrderConfig : sig
    type t = {
      parentOutlineColor : DOM.RGBA.t;
          [@key "parentOutlineColor"]
          [@ocaml.doc "the color to outline the givent element in."]
      childOutlineColor : DOM.RGBA.t;
          [@key "childOutlineColor"]
          [@ocaml.doc "the color to outline the child elements in."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration data for drawing the source order of an elements children."]
  end

  and GridHighlightConfig : sig
    type t = {
      showGridExtensionLines : bool option;
          [@key "showGridExtensionLines"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the extension lines from grid cells to the rulers should \
             be shown (default: false)."]
      showPositiveLineNumbers : bool option;
          [@key "showPositiveLineNumbers"]
          [@yojson.option]
          [@ocaml.doc "Show Positive line number labels (default: false)."]
      showNegativeLineNumbers : bool option;
          [@key "showNegativeLineNumbers"]
          [@yojson.option]
          [@ocaml.doc "Show Negative line number labels (default: false)."]
      showAreaNames : bool option;
          [@key "showAreaNames"]
          [@yojson.option]
          [@ocaml.doc "Show area name labels (default: false)."]
      showLineNames : bool option;
          [@key "showLineNames"]
          [@yojson.option]
          [@ocaml.doc "Show line name labels (default: false)."]
      showTrackSizes : bool option;
          [@key "showTrackSizes"]
          [@yojson.option]
          [@ocaml.doc "Show track size labels (default: false)."]
      gridBorderColor : DOM.RGBA.t option;
          [@key "gridBorderColor"]
          [@yojson.option]
          [@ocaml.doc
            "The grid container border highlight color (default: transparent)."]
      cellBorderColor : DOM.RGBA.t option;
          [@key "cellBorderColor"]
          [@yojson.option]
          [@ocaml.doc
            "The cell border color (default: transparent). Deprecated, please \
             use rowLineColor and columnLineColor instead."]
      rowLineColor : DOM.RGBA.t option;
          [@key "rowLineColor"]
          [@yojson.option]
          [@ocaml.doc "The row line color (default: transparent)."]
      columnLineColor : DOM.RGBA.t option;
          [@key "columnLineColor"]
          [@yojson.option]
          [@ocaml.doc "The column line color (default: transparent)."]
      gridBorderDash : bool option;
          [@key "gridBorderDash"]
          [@yojson.option]
          [@ocaml.doc "Whether the grid border is dashed (default: false)."]
      cellBorderDash : bool option;
          [@key "cellBorderDash"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the cell border is dashed (default: false). Deprecated, \
             please us rowLineDash and columnLineDash instead."]
      rowLineDash : bool option;
          [@key "rowLineDash"]
          [@yojson.option]
          [@ocaml.doc "Whether row lines are dashed (default: false)."]
      columnLineDash : bool option;
          [@key "columnLineDash"]
          [@yojson.option]
          [@ocaml.doc "Whether column lines are dashed (default: false)."]
      rowGapColor : DOM.RGBA.t option;
          [@key "rowGapColor"]
          [@yojson.option]
          [@ocaml.doc
            "The row gap highlight fill color (default: transparent)."]
      rowHatchColor : DOM.RGBA.t option;
          [@key "rowHatchColor"]
          [@yojson.option]
          [@ocaml.doc "The row gap hatching fill color (default: transparent)."]
      columnGapColor : DOM.RGBA.t option;
          [@key "columnGapColor"]
          [@yojson.option]
          [@ocaml.doc
            "The column gap highlight fill color (default: transparent)."]
      columnHatchColor : DOM.RGBA.t option;
          [@key "columnHatchColor"]
          [@yojson.option]
          [@ocaml.doc
            "The column gap hatching fill color (default: transparent)."]
      areaBorderColor : DOM.RGBA.t option;
          [@key "areaBorderColor"]
          [@yojson.option]
          [@ocaml.doc
            "The named grid areas border color (Default: transparent)."]
      gridBackgroundColor : DOM.RGBA.t option;
          [@key "gridBackgroundColor"]
          [@yojson.option]
          [@ocaml.doc
            "The grid container background color (Default: transparent)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Configuration data for the highlighting of Grid elements."]
  end

  and FlexContainerHighlightConfig : sig
    type t = {
      containerBorder : LineStyle.t option;
          [@key "containerBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the container border"]
      lineSeparator : LineStyle.t option;
          [@key "lineSeparator"]
          [@yojson.option]
          [@ocaml.doc "The style of the separator between lines"]
      itemSeparator : LineStyle.t option;
          [@key "itemSeparator"]
          [@yojson.option]
          [@ocaml.doc "The style of the separator between items"]
      mainDistributedSpace : BoxStyle.t option;
          [@key "mainDistributedSpace"]
          [@yojson.option]
          [@ocaml.doc
            "Style of content-distribution space on the main axis \
             (justify-content)."]
      crossDistributedSpace : BoxStyle.t option;
          [@key "crossDistributedSpace"]
          [@yojson.option]
          [@ocaml.doc
            "Style of content-distribution space on the cross axis \
             (align-content)."]
      rowGapSpace : BoxStyle.t option;
          [@key "rowGapSpace"]
          [@yojson.option]
          [@ocaml.doc "Style of empty space caused by row gaps (gap/row-gap)."]
      columnGapSpace : BoxStyle.t option;
          [@key "columnGapSpace"]
          [@yojson.option]
          [@ocaml.doc
            "Style of empty space caused by columns gaps (gap/column-gap)."]
      crossAlignment : LineStyle.t option;
          [@key "crossAlignment"]
          [@yojson.option]
          [@ocaml.doc "Style of the self-alignment line (align-items)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration data for the highlighting of Flex container elements."]
  end

  and FlexItemHighlightConfig : sig
    type t = {
      baseSizeBox : BoxStyle.t option;
          [@key "baseSizeBox"]
          [@yojson.option]
          [@ocaml.doc "Style of the box representing the item's base size"]
      baseSizeBorder : LineStyle.t option;
          [@key "baseSizeBorder"]
          [@yojson.option]
          [@ocaml.doc
            "Style of the border around the box representing the item's base \
             size"]
      flexibilityArrow : LineStyle.t option;
          [@key "flexibilityArrow"]
          [@yojson.option]
          [@ocaml.doc
            "Style of the arrow representing if the item grew or shrank"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration data for the highlighting of Flex item elements."]
  end

  and LineStyle : sig
    type _linestyle_pattern = [ `dashed | `dotted ]

    val _linestyle_pattern_of_yojson : Yojson.Basic.t -> _linestyle_pattern
    val yojson_of__linestyle_pattern : _linestyle_pattern -> Yojson.Basic.t

    type t = {
      color : DOM.RGBA.t option;
          [@key "color"]
          [@yojson.option]
          [@ocaml.doc "The color of the line (default: transparent)"]
      pattern : _linestyle_pattern option;
          [@key "pattern"]
          [@yojson.option]
          [@ocaml.doc "The line pattern (default: solid)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Style information for drawing a line."]
  end

  and BoxStyle : sig
    type t = {
      fillColor : DOM.RGBA.t option;
          [@key "fillColor"]
          [@yojson.option]
          [@ocaml.doc "The background color for the box (default: transparent)"]
      hatchColor : DOM.RGBA.t option;
          [@key "hatchColor"]
          [@yojson.option]
          [@ocaml.doc "The hatching color for the box (default: transparent)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Style information for drawing a box."]
  end

  and ContrastAlgorithm : sig
    type _contrastalgorithm = [ `aa | `aaa | `apca ]

    val _contrastalgorithm_of_yojson : Yojson.Basic.t -> _contrastalgorithm
    val yojson_of__contrastalgorithm : _contrastalgorithm -> Yojson.Basic.t

    type t = _contrastalgorithm
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HighlightConfig : sig
    type t = {
      showInfo : bool option;
          [@key "showInfo"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the node info tooltip should be shown (default: false)."]
      showStyles : bool option;
          [@key "showStyles"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the node styles in the tooltip (default: false)."]
      showRulers : bool option;
          [@key "showRulers"]
          [@yojson.option]
          [@ocaml.doc "Whether the rulers should be shown (default: false)."]
      showAccessibilityInfo : bool option;
          [@key "showAccessibilityInfo"]
          [@yojson.option]
          [@ocaml.doc "Whether the a11y info should be shown (default: true)."]
      showExtensionLines : bool option;
          [@key "showExtensionLines"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the extension lines from node to the rulers should be \
             shown (default: false)."]
      contentColor : DOM.RGBA.t option;
          [@key "contentColor"]
          [@yojson.option]
          [@ocaml.doc
            "The content box highlight fill color (default: transparent)."]
      paddingColor : DOM.RGBA.t option;
          [@key "paddingColor"]
          [@yojson.option]
          [@ocaml.doc
            "The padding highlight fill color (default: transparent)."]
      borderColor : DOM.RGBA.t option;
          [@key "borderColor"]
          [@yojson.option]
          [@ocaml.doc "The border highlight fill color (default: transparent)."]
      marginColor : DOM.RGBA.t option;
          [@key "marginColor"]
          [@yojson.option]
          [@ocaml.doc "The margin highlight fill color (default: transparent)."]
      eventTargetColor : DOM.RGBA.t option;
          [@key "eventTargetColor"]
          [@yojson.option]
          [@ocaml.doc
            "The event target element highlight fill color (default: \
             transparent)."]
      shapeColor : DOM.RGBA.t option;
          [@key "shapeColor"]
          [@yojson.option]
          [@ocaml.doc "The shape outside fill color (default: transparent)."]
      shapeMarginColor : DOM.RGBA.t option;
          [@key "shapeMarginColor"]
          [@yojson.option]
          [@ocaml.doc "The shape margin fill color (default: transparent)."]
      cssGridColor : DOM.RGBA.t option;
          [@key "cssGridColor"]
          [@yojson.option]
          [@ocaml.doc "The grid layout color (default: transparent)."]
      colorFormat : ColorFormat.t option;
          [@key "colorFormat"]
          [@yojson.option]
          [@ocaml.doc
            "The color format used to format color styles (default: hex)."]
      gridHighlightConfig : GridHighlightConfig.t option;
          [@key "gridHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The grid layout highlight configuration (default: all \
             transparent)."]
      flexContainerHighlightConfig : FlexContainerHighlightConfig.t option;
          [@key "flexContainerHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The flex container highlight configuration (default: all \
             transparent)."]
      flexItemHighlightConfig : FlexItemHighlightConfig.t option;
          [@key "flexItemHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The flex item highlight configuration (default: all transparent)."]
      contrastAlgorithm : ContrastAlgorithm.t option;
          [@key "contrastAlgorithm"]
          [@yojson.option]
          [@ocaml.doc
            "The contrast algorithm to use for the contrast ratio (default: \
             aa)."]
      containerQueryContainerHighlightConfig :
        ContainerQueryContainerHighlightConfig.t option;
          [@key "containerQueryContainerHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The container query container highlight configuration (default: \
             all transparent)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Configuration data for the highlighting of page elements."]
  end

  and ColorFormat : sig
    type _colorformat = [ `rgb | `hsl | `hwb | `hex ]

    val _colorformat_of_yojson : Yojson.Basic.t -> _colorformat
    val yojson_of__colorformat : _colorformat -> Yojson.Basic.t

    type t = _colorformat
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and GridNodeHighlightConfig : sig
    type t = {
      gridHighlightConfig : GridHighlightConfig.t;
          [@key "gridHighlightConfig"]
          [@ocaml.doc "A descriptor for the highlight appearance."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"] [@ocaml.doc "Identifier of the node to highlight."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Configurations for Persistent Grid Highlight"]
  end

  and FlexNodeHighlightConfig : sig
    type t = {
      flexContainerHighlightConfig : FlexContainerHighlightConfig.t;
          [@key "flexContainerHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of flex containers."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"] [@ocaml.doc "Identifier of the node to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ScrollSnapContainerHighlightConfig : sig
    type t = {
      snapportBorder : LineStyle.t option;
          [@key "snapportBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the snapport border (default: transparent)"]
      snapAreaBorder : LineStyle.t option;
          [@key "snapAreaBorder"]
          [@yojson.option]
          [@ocaml.doc
            "The style of the snap area border (default: transparent)"]
      scrollMarginColor : DOM.RGBA.t option;
          [@key "scrollMarginColor"]
          [@yojson.option]
          [@ocaml.doc "The margin highlight fill color (default: transparent)."]
      scrollPaddingColor : DOM.RGBA.t option;
          [@key "scrollPaddingColor"]
          [@yojson.option]
          [@ocaml.doc
            "The padding highlight fill color (default: transparent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ScrollSnapHighlightConfig : sig
    type t = {
      scrollSnapContainerHighlightConfig : ScrollSnapContainerHighlightConfig.t;
          [@key "scrollSnapContainerHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of scroll snap \
             containers."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"] [@ocaml.doc "Identifier of the node to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HingeConfig : sig
    type t = {
      rect : DOM.Rect.t;
          [@key "rect"] [@ocaml.doc "A rectangle represent hinge"]
      contentColor : DOM.RGBA.t option;
          [@key "contentColor"]
          [@yojson.option]
          [@ocaml.doc
            "The content box highlight fill color (default: a dark color)."]
      outlineColor : DOM.RGBA.t option;
          [@key "outlineColor"]
          [@yojson.option]
          [@ocaml.doc
            "The content box highlight outline color (default: transparent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Configuration for dual screen hinge"]
  end

  and ContainerQueryHighlightConfig : sig
    type t = {
      containerQueryContainerHighlightConfig :
        ContainerQueryContainerHighlightConfig.t;
          [@key "containerQueryContainerHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of container query \
             containers."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"]
          [@ocaml.doc "Identifier of the container node to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContainerQueryContainerHighlightConfig : sig
    type t = {
      containerBorder : LineStyle.t option;
          [@key "containerBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the container border."]
      descendantBorder : LineStyle.t option;
          [@key "descendantBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the descendants' borders."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and IsolatedElementHighlightConfig : sig
    type t = {
      isolationModeHighlightConfig : IsolationModeHighlightConfig.t;
          [@key "isolationModeHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of an element in \
             isolation mode."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"]
          [@ocaml.doc "Identifier of the isolated element to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and IsolationModeHighlightConfig : sig
    type t = {
      resizerColor : DOM.RGBA.t option;
          [@key "resizerColor"]
          [@yojson.option]
          [@ocaml.doc "The fill color of the resizers (default: transparent)."]
      resizerHandleColor : DOM.RGBA.t option;
          [@key "resizerHandleColor"]
          [@yojson.option]
          [@ocaml.doc
            "The fill color for resizer handles (default: transparent)."]
      maskColor : DOM.RGBA.t option;
          [@key "maskColor"]
          [@yojson.option]
          [@ocaml.doc
            "The fill color for the mask covering non-isolated elements \
             (default: transparent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and InspectMode : sig
    type _inspectmode =
      [ `searchForNode
      | `searchForUAShadowDOM
      | `captureAreaScreenshot
      | `showDistances
      | `none ]

    val _inspectmode_of_yojson : Yojson.Basic.t -> _inspectmode
    val yojson_of__inspectmode : _inspectmode -> Yojson.Basic.t

    type t = _inspectmode
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec SourceOrderConfig : sig
    type t = {
      parentOutlineColor : DOM.RGBA.t;
          [@key "parentOutlineColor"]
          [@ocaml.doc "the color to outline the givent element in."]
      childOutlineColor : DOM.RGBA.t;
          [@key "childOutlineColor"]
          [@ocaml.doc "the color to outline the child elements in."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration data for drawing the source order of an elements children."]
  end = struct
    type t = {
      parentOutlineColor : DOM.RGBA.t;
          [@key "parentOutlineColor"]
          [@ocaml.doc "the color to outline the givent element in."]
      childOutlineColor : DOM.RGBA.t;
          [@key "childOutlineColor"]
          [@ocaml.doc "the color to outline the child elements in."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration data for drawing the source order of an elements children."]
  end

  and GridHighlightConfig : sig
    type t = {
      showGridExtensionLines : bool option;
          [@key "showGridExtensionLines"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the extension lines from grid cells to the rulers should \
             be shown (default: false)."]
      showPositiveLineNumbers : bool option;
          [@key "showPositiveLineNumbers"]
          [@yojson.option]
          [@ocaml.doc "Show Positive line number labels (default: false)."]
      showNegativeLineNumbers : bool option;
          [@key "showNegativeLineNumbers"]
          [@yojson.option]
          [@ocaml.doc "Show Negative line number labels (default: false)."]
      showAreaNames : bool option;
          [@key "showAreaNames"]
          [@yojson.option]
          [@ocaml.doc "Show area name labels (default: false)."]
      showLineNames : bool option;
          [@key "showLineNames"]
          [@yojson.option]
          [@ocaml.doc "Show line name labels (default: false)."]
      showTrackSizes : bool option;
          [@key "showTrackSizes"]
          [@yojson.option]
          [@ocaml.doc "Show track size labels (default: false)."]
      gridBorderColor : DOM.RGBA.t option;
          [@key "gridBorderColor"]
          [@yojson.option]
          [@ocaml.doc
            "The grid container border highlight color (default: transparent)."]
      cellBorderColor : DOM.RGBA.t option;
          [@key "cellBorderColor"]
          [@yojson.option]
          [@ocaml.doc
            "The cell border color (default: transparent). Deprecated, please \
             use rowLineColor and columnLineColor instead."]
      rowLineColor : DOM.RGBA.t option;
          [@key "rowLineColor"]
          [@yojson.option]
          [@ocaml.doc "The row line color (default: transparent)."]
      columnLineColor : DOM.RGBA.t option;
          [@key "columnLineColor"]
          [@yojson.option]
          [@ocaml.doc "The column line color (default: transparent)."]
      gridBorderDash : bool option;
          [@key "gridBorderDash"]
          [@yojson.option]
          [@ocaml.doc "Whether the grid border is dashed (default: false)."]
      cellBorderDash : bool option;
          [@key "cellBorderDash"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the cell border is dashed (default: false). Deprecated, \
             please us rowLineDash and columnLineDash instead."]
      rowLineDash : bool option;
          [@key "rowLineDash"]
          [@yojson.option]
          [@ocaml.doc "Whether row lines are dashed (default: false)."]
      columnLineDash : bool option;
          [@key "columnLineDash"]
          [@yojson.option]
          [@ocaml.doc "Whether column lines are dashed (default: false)."]
      rowGapColor : DOM.RGBA.t option;
          [@key "rowGapColor"]
          [@yojson.option]
          [@ocaml.doc
            "The row gap highlight fill color (default: transparent)."]
      rowHatchColor : DOM.RGBA.t option;
          [@key "rowHatchColor"]
          [@yojson.option]
          [@ocaml.doc "The row gap hatching fill color (default: transparent)."]
      columnGapColor : DOM.RGBA.t option;
          [@key "columnGapColor"]
          [@yojson.option]
          [@ocaml.doc
            "The column gap highlight fill color (default: transparent)."]
      columnHatchColor : DOM.RGBA.t option;
          [@key "columnHatchColor"]
          [@yojson.option]
          [@ocaml.doc
            "The column gap hatching fill color (default: transparent)."]
      areaBorderColor : DOM.RGBA.t option;
          [@key "areaBorderColor"]
          [@yojson.option]
          [@ocaml.doc
            "The named grid areas border color (Default: transparent)."]
      gridBackgroundColor : DOM.RGBA.t option;
          [@key "gridBackgroundColor"]
          [@yojson.option]
          [@ocaml.doc
            "The grid container background color (Default: transparent)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Configuration data for the highlighting of Grid elements."]
  end = struct
    type t = {
      showGridExtensionLines : bool option;
          [@key "showGridExtensionLines"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the extension lines from grid cells to the rulers should \
             be shown (default: false)."]
      showPositiveLineNumbers : bool option;
          [@key "showPositiveLineNumbers"]
          [@yojson.option]
          [@ocaml.doc "Show Positive line number labels (default: false)."]
      showNegativeLineNumbers : bool option;
          [@key "showNegativeLineNumbers"]
          [@yojson.option]
          [@ocaml.doc "Show Negative line number labels (default: false)."]
      showAreaNames : bool option;
          [@key "showAreaNames"]
          [@yojson.option]
          [@ocaml.doc "Show area name labels (default: false)."]
      showLineNames : bool option;
          [@key "showLineNames"]
          [@yojson.option]
          [@ocaml.doc "Show line name labels (default: false)."]
      showTrackSizes : bool option;
          [@key "showTrackSizes"]
          [@yojson.option]
          [@ocaml.doc "Show track size labels (default: false)."]
      gridBorderColor : DOM.RGBA.t option;
          [@key "gridBorderColor"]
          [@yojson.option]
          [@ocaml.doc
            "The grid container border highlight color (default: transparent)."]
      cellBorderColor : DOM.RGBA.t option;
          [@key "cellBorderColor"]
          [@yojson.option]
          [@ocaml.doc
            "The cell border color (default: transparent). Deprecated, please \
             use rowLineColor and columnLineColor instead."]
      rowLineColor : DOM.RGBA.t option;
          [@key "rowLineColor"]
          [@yojson.option]
          [@ocaml.doc "The row line color (default: transparent)."]
      columnLineColor : DOM.RGBA.t option;
          [@key "columnLineColor"]
          [@yojson.option]
          [@ocaml.doc "The column line color (default: transparent)."]
      gridBorderDash : bool option;
          [@key "gridBorderDash"]
          [@yojson.option]
          [@ocaml.doc "Whether the grid border is dashed (default: false)."]
      cellBorderDash : bool option;
          [@key "cellBorderDash"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the cell border is dashed (default: false). Deprecated, \
             please us rowLineDash and columnLineDash instead."]
      rowLineDash : bool option;
          [@key "rowLineDash"]
          [@yojson.option]
          [@ocaml.doc "Whether row lines are dashed (default: false)."]
      columnLineDash : bool option;
          [@key "columnLineDash"]
          [@yojson.option]
          [@ocaml.doc "Whether column lines are dashed (default: false)."]
      rowGapColor : DOM.RGBA.t option;
          [@key "rowGapColor"]
          [@yojson.option]
          [@ocaml.doc
            "The row gap highlight fill color (default: transparent)."]
      rowHatchColor : DOM.RGBA.t option;
          [@key "rowHatchColor"]
          [@yojson.option]
          [@ocaml.doc "The row gap hatching fill color (default: transparent)."]
      columnGapColor : DOM.RGBA.t option;
          [@key "columnGapColor"]
          [@yojson.option]
          [@ocaml.doc
            "The column gap highlight fill color (default: transparent)."]
      columnHatchColor : DOM.RGBA.t option;
          [@key "columnHatchColor"]
          [@yojson.option]
          [@ocaml.doc
            "The column gap hatching fill color (default: transparent)."]
      areaBorderColor : DOM.RGBA.t option;
          [@key "areaBorderColor"]
          [@yojson.option]
          [@ocaml.doc
            "The named grid areas border color (Default: transparent)."]
      gridBackgroundColor : DOM.RGBA.t option;
          [@key "gridBackgroundColor"]
          [@yojson.option]
          [@ocaml.doc
            "The grid container background color (Default: transparent)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Configuration data for the highlighting of Grid elements."]
  end

  and FlexContainerHighlightConfig : sig
    type t = {
      containerBorder : LineStyle.t option;
          [@key "containerBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the container border"]
      lineSeparator : LineStyle.t option;
          [@key "lineSeparator"]
          [@yojson.option]
          [@ocaml.doc "The style of the separator between lines"]
      itemSeparator : LineStyle.t option;
          [@key "itemSeparator"]
          [@yojson.option]
          [@ocaml.doc "The style of the separator between items"]
      mainDistributedSpace : BoxStyle.t option;
          [@key "mainDistributedSpace"]
          [@yojson.option]
          [@ocaml.doc
            "Style of content-distribution space on the main axis \
             (justify-content)."]
      crossDistributedSpace : BoxStyle.t option;
          [@key "crossDistributedSpace"]
          [@yojson.option]
          [@ocaml.doc
            "Style of content-distribution space on the cross axis \
             (align-content)."]
      rowGapSpace : BoxStyle.t option;
          [@key "rowGapSpace"]
          [@yojson.option]
          [@ocaml.doc "Style of empty space caused by row gaps (gap/row-gap)."]
      columnGapSpace : BoxStyle.t option;
          [@key "columnGapSpace"]
          [@yojson.option]
          [@ocaml.doc
            "Style of empty space caused by columns gaps (gap/column-gap)."]
      crossAlignment : LineStyle.t option;
          [@key "crossAlignment"]
          [@yojson.option]
          [@ocaml.doc "Style of the self-alignment line (align-items)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration data for the highlighting of Flex container elements."]
  end = struct
    type t = {
      containerBorder : LineStyle.t option;
          [@key "containerBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the container border"]
      lineSeparator : LineStyle.t option;
          [@key "lineSeparator"]
          [@yojson.option]
          [@ocaml.doc "The style of the separator between lines"]
      itemSeparator : LineStyle.t option;
          [@key "itemSeparator"]
          [@yojson.option]
          [@ocaml.doc "The style of the separator between items"]
      mainDistributedSpace : BoxStyle.t option;
          [@key "mainDistributedSpace"]
          [@yojson.option]
          [@ocaml.doc
            "Style of content-distribution space on the main axis \
             (justify-content)."]
      crossDistributedSpace : BoxStyle.t option;
          [@key "crossDistributedSpace"]
          [@yojson.option]
          [@ocaml.doc
            "Style of content-distribution space on the cross axis \
             (align-content)."]
      rowGapSpace : BoxStyle.t option;
          [@key "rowGapSpace"]
          [@yojson.option]
          [@ocaml.doc "Style of empty space caused by row gaps (gap/row-gap)."]
      columnGapSpace : BoxStyle.t option;
          [@key "columnGapSpace"]
          [@yojson.option]
          [@ocaml.doc
            "Style of empty space caused by columns gaps (gap/column-gap)."]
      crossAlignment : LineStyle.t option;
          [@key "crossAlignment"]
          [@yojson.option]
          [@ocaml.doc "Style of the self-alignment line (align-items)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration data for the highlighting of Flex container elements."]
  end

  and FlexItemHighlightConfig : sig
    type t = {
      baseSizeBox : BoxStyle.t option;
          [@key "baseSizeBox"]
          [@yojson.option]
          [@ocaml.doc "Style of the box representing the item's base size"]
      baseSizeBorder : LineStyle.t option;
          [@key "baseSizeBorder"]
          [@yojson.option]
          [@ocaml.doc
            "Style of the border around the box representing the item's base \
             size"]
      flexibilityArrow : LineStyle.t option;
          [@key "flexibilityArrow"]
          [@yojson.option]
          [@ocaml.doc
            "Style of the arrow representing if the item grew or shrank"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration data for the highlighting of Flex item elements."]
  end = struct
    type t = {
      baseSizeBox : BoxStyle.t option;
          [@key "baseSizeBox"]
          [@yojson.option]
          [@ocaml.doc "Style of the box representing the item's base size"]
      baseSizeBorder : LineStyle.t option;
          [@key "baseSizeBorder"]
          [@yojson.option]
          [@ocaml.doc
            "Style of the border around the box representing the item's base \
             size"]
      flexibilityArrow : LineStyle.t option;
          [@key "flexibilityArrow"]
          [@yojson.option]
          [@ocaml.doc
            "Style of the arrow representing if the item grew or shrank"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration data for the highlighting of Flex item elements."]
  end

  and LineStyle : sig
    type _linestyle_pattern = [ `dashed | `dotted ]

    val _linestyle_pattern_of_yojson : Yojson.Basic.t -> _linestyle_pattern
    val yojson_of__linestyle_pattern : _linestyle_pattern -> Yojson.Basic.t

    type t = {
      color : DOM.RGBA.t option;
          [@key "color"]
          [@yojson.option]
          [@ocaml.doc "The color of the line (default: transparent)"]
      pattern : _linestyle_pattern option;
          [@key "pattern"]
          [@yojson.option]
          [@ocaml.doc "The line pattern (default: solid)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Style information for drawing a line."]
  end = struct
    type _linestyle_pattern = [ `dashed | `dotted ]

    let _linestyle_pattern_of_yojson = function
      | `String "dashed" -> `dashed
      | `String "dotted" -> `dotted
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__linestyle_pattern = function
      | `dashed -> `String "dashed"
      | `dotted -> `String "dotted"

    type t = {
      color : DOM.RGBA.t option;
          [@key "color"]
          [@yojson.option]
          [@ocaml.doc "The color of the line (default: transparent)"]
      pattern : _linestyle_pattern option;
          [@key "pattern"]
          [@yojson.option]
          [@ocaml.doc "The line pattern (default: solid)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Style information for drawing a line."]
  end

  and BoxStyle : sig
    type t = {
      fillColor : DOM.RGBA.t option;
          [@key "fillColor"]
          [@yojson.option]
          [@ocaml.doc "The background color for the box (default: transparent)"]
      hatchColor : DOM.RGBA.t option;
          [@key "hatchColor"]
          [@yojson.option]
          [@ocaml.doc "The hatching color for the box (default: transparent)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Style information for drawing a box."]
  end = struct
    type t = {
      fillColor : DOM.RGBA.t option;
          [@key "fillColor"]
          [@yojson.option]
          [@ocaml.doc "The background color for the box (default: transparent)"]
      hatchColor : DOM.RGBA.t option;
          [@key "hatchColor"]
          [@yojson.option]
          [@ocaml.doc "The hatching color for the box (default: transparent)"]
    }
    [@@deriving yojson] [@@ocaml.doc "Style information for drawing a box."]
  end

  and ContrastAlgorithm : sig
    type _contrastalgorithm = [ `aa | `aaa | `apca ]

    val _contrastalgorithm_of_yojson : Yojson.Basic.t -> _contrastalgorithm
    val yojson_of__contrastalgorithm : _contrastalgorithm -> Yojson.Basic.t

    type t = _contrastalgorithm
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _contrastalgorithm = [ `aa | `aaa | `apca ]

    let _contrastalgorithm_of_yojson = function
      | `String "aa" -> `aa
      | `String "aaa" -> `aaa
      | `String "apca" -> `apca
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__contrastalgorithm = function
      | `aa -> `String "aa"
      | `aaa -> `String "aaa"
      | `apca -> `String "apca"

    type t = _contrastalgorithm
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HighlightConfig : sig
    type t = {
      showInfo : bool option;
          [@key "showInfo"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the node info tooltip should be shown (default: false)."]
      showStyles : bool option;
          [@key "showStyles"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the node styles in the tooltip (default: false)."]
      showRulers : bool option;
          [@key "showRulers"]
          [@yojson.option]
          [@ocaml.doc "Whether the rulers should be shown (default: false)."]
      showAccessibilityInfo : bool option;
          [@key "showAccessibilityInfo"]
          [@yojson.option]
          [@ocaml.doc "Whether the a11y info should be shown (default: true)."]
      showExtensionLines : bool option;
          [@key "showExtensionLines"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the extension lines from node to the rulers should be \
             shown (default: false)."]
      contentColor : DOM.RGBA.t option;
          [@key "contentColor"]
          [@yojson.option]
          [@ocaml.doc
            "The content box highlight fill color (default: transparent)."]
      paddingColor : DOM.RGBA.t option;
          [@key "paddingColor"]
          [@yojson.option]
          [@ocaml.doc
            "The padding highlight fill color (default: transparent)."]
      borderColor : DOM.RGBA.t option;
          [@key "borderColor"]
          [@yojson.option]
          [@ocaml.doc "The border highlight fill color (default: transparent)."]
      marginColor : DOM.RGBA.t option;
          [@key "marginColor"]
          [@yojson.option]
          [@ocaml.doc "The margin highlight fill color (default: transparent)."]
      eventTargetColor : DOM.RGBA.t option;
          [@key "eventTargetColor"]
          [@yojson.option]
          [@ocaml.doc
            "The event target element highlight fill color (default: \
             transparent)."]
      shapeColor : DOM.RGBA.t option;
          [@key "shapeColor"]
          [@yojson.option]
          [@ocaml.doc "The shape outside fill color (default: transparent)."]
      shapeMarginColor : DOM.RGBA.t option;
          [@key "shapeMarginColor"]
          [@yojson.option]
          [@ocaml.doc "The shape margin fill color (default: transparent)."]
      cssGridColor : DOM.RGBA.t option;
          [@key "cssGridColor"]
          [@yojson.option]
          [@ocaml.doc "The grid layout color (default: transparent)."]
      colorFormat : ColorFormat.t option;
          [@key "colorFormat"]
          [@yojson.option]
          [@ocaml.doc
            "The color format used to format color styles (default: hex)."]
      gridHighlightConfig : GridHighlightConfig.t option;
          [@key "gridHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The grid layout highlight configuration (default: all \
             transparent)."]
      flexContainerHighlightConfig : FlexContainerHighlightConfig.t option;
          [@key "flexContainerHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The flex container highlight configuration (default: all \
             transparent)."]
      flexItemHighlightConfig : FlexItemHighlightConfig.t option;
          [@key "flexItemHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The flex item highlight configuration (default: all transparent)."]
      contrastAlgorithm : ContrastAlgorithm.t option;
          [@key "contrastAlgorithm"]
          [@yojson.option]
          [@ocaml.doc
            "The contrast algorithm to use for the contrast ratio (default: \
             aa)."]
      containerQueryContainerHighlightConfig :
        ContainerQueryContainerHighlightConfig.t option;
          [@key "containerQueryContainerHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The container query container highlight configuration (default: \
             all transparent)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Configuration data for the highlighting of page elements."]
  end = struct
    type t = {
      showInfo : bool option;
          [@key "showInfo"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the node info tooltip should be shown (default: false)."]
      showStyles : bool option;
          [@key "showStyles"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the node styles in the tooltip (default: false)."]
      showRulers : bool option;
          [@key "showRulers"]
          [@yojson.option]
          [@ocaml.doc "Whether the rulers should be shown (default: false)."]
      showAccessibilityInfo : bool option;
          [@key "showAccessibilityInfo"]
          [@yojson.option]
          [@ocaml.doc "Whether the a11y info should be shown (default: true)."]
      showExtensionLines : bool option;
          [@key "showExtensionLines"]
          [@yojson.option]
          [@ocaml.doc
            "Whether the extension lines from node to the rulers should be \
             shown (default: false)."]
      contentColor : DOM.RGBA.t option;
          [@key "contentColor"]
          [@yojson.option]
          [@ocaml.doc
            "The content box highlight fill color (default: transparent)."]
      paddingColor : DOM.RGBA.t option;
          [@key "paddingColor"]
          [@yojson.option]
          [@ocaml.doc
            "The padding highlight fill color (default: transparent)."]
      borderColor : DOM.RGBA.t option;
          [@key "borderColor"]
          [@yojson.option]
          [@ocaml.doc "The border highlight fill color (default: transparent)."]
      marginColor : DOM.RGBA.t option;
          [@key "marginColor"]
          [@yojson.option]
          [@ocaml.doc "The margin highlight fill color (default: transparent)."]
      eventTargetColor : DOM.RGBA.t option;
          [@key "eventTargetColor"]
          [@yojson.option]
          [@ocaml.doc
            "The event target element highlight fill color (default: \
             transparent)."]
      shapeColor : DOM.RGBA.t option;
          [@key "shapeColor"]
          [@yojson.option]
          [@ocaml.doc "The shape outside fill color (default: transparent)."]
      shapeMarginColor : DOM.RGBA.t option;
          [@key "shapeMarginColor"]
          [@yojson.option]
          [@ocaml.doc "The shape margin fill color (default: transparent)."]
      cssGridColor : DOM.RGBA.t option;
          [@key "cssGridColor"]
          [@yojson.option]
          [@ocaml.doc "The grid layout color (default: transparent)."]
      colorFormat : ColorFormat.t option;
          [@key "colorFormat"]
          [@yojson.option]
          [@ocaml.doc
            "The color format used to format color styles (default: hex)."]
      gridHighlightConfig : GridHighlightConfig.t option;
          [@key "gridHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The grid layout highlight configuration (default: all \
             transparent)."]
      flexContainerHighlightConfig : FlexContainerHighlightConfig.t option;
          [@key "flexContainerHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The flex container highlight configuration (default: all \
             transparent)."]
      flexItemHighlightConfig : FlexItemHighlightConfig.t option;
          [@key "flexItemHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The flex item highlight configuration (default: all transparent)."]
      contrastAlgorithm : ContrastAlgorithm.t option;
          [@key "contrastAlgorithm"]
          [@yojson.option]
          [@ocaml.doc
            "The contrast algorithm to use for the contrast ratio (default: \
             aa)."]
      containerQueryContainerHighlightConfig :
        ContainerQueryContainerHighlightConfig.t option;
          [@key "containerQueryContainerHighlightConfig"]
          [@yojson.option]
          [@ocaml.doc
            "The container query container highlight configuration (default: \
             all transparent)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Configuration data for the highlighting of page elements."]
  end

  and ColorFormat : sig
    type _colorformat = [ `rgb | `hsl | `hwb | `hex ]

    val _colorformat_of_yojson : Yojson.Basic.t -> _colorformat
    val yojson_of__colorformat : _colorformat -> Yojson.Basic.t

    type t = _colorformat
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _colorformat = [ `rgb | `hsl | `hwb | `hex ]

    let _colorformat_of_yojson = function
      | `String "rgb" -> `rgb
      | `String "hsl" -> `hsl
      | `String "hwb" -> `hwb
      | `String "hex" -> `hex
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__colorformat = function
      | `rgb -> `String "rgb"
      | `hsl -> `String "hsl"
      | `hwb -> `String "hwb"
      | `hex -> `String "hex"

    type t = _colorformat
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and GridNodeHighlightConfig : sig
    type t = {
      gridHighlightConfig : GridHighlightConfig.t;
          [@key "gridHighlightConfig"]
          [@ocaml.doc "A descriptor for the highlight appearance."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"] [@ocaml.doc "Identifier of the node to highlight."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Configurations for Persistent Grid Highlight"]
  end = struct
    type t = {
      gridHighlightConfig : GridHighlightConfig.t;
          [@key "gridHighlightConfig"]
          [@ocaml.doc "A descriptor for the highlight appearance."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"] [@ocaml.doc "Identifier of the node to highlight."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Configurations for Persistent Grid Highlight"]
  end

  and FlexNodeHighlightConfig : sig
    type t = {
      flexContainerHighlightConfig : FlexContainerHighlightConfig.t;
          [@key "flexContainerHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of flex containers."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"] [@ocaml.doc "Identifier of the node to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      flexContainerHighlightConfig : FlexContainerHighlightConfig.t;
          [@key "flexContainerHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of flex containers."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"] [@ocaml.doc "Identifier of the node to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ScrollSnapContainerHighlightConfig : sig
    type t = {
      snapportBorder : LineStyle.t option;
          [@key "snapportBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the snapport border (default: transparent)"]
      snapAreaBorder : LineStyle.t option;
          [@key "snapAreaBorder"]
          [@yojson.option]
          [@ocaml.doc
            "The style of the snap area border (default: transparent)"]
      scrollMarginColor : DOM.RGBA.t option;
          [@key "scrollMarginColor"]
          [@yojson.option]
          [@ocaml.doc "The margin highlight fill color (default: transparent)."]
      scrollPaddingColor : DOM.RGBA.t option;
          [@key "scrollPaddingColor"]
          [@yojson.option]
          [@ocaml.doc
            "The padding highlight fill color (default: transparent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      snapportBorder : LineStyle.t option;
          [@key "snapportBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the snapport border (default: transparent)"]
      snapAreaBorder : LineStyle.t option;
          [@key "snapAreaBorder"]
          [@yojson.option]
          [@ocaml.doc
            "The style of the snap area border (default: transparent)"]
      scrollMarginColor : DOM.RGBA.t option;
          [@key "scrollMarginColor"]
          [@yojson.option]
          [@ocaml.doc "The margin highlight fill color (default: transparent)."]
      scrollPaddingColor : DOM.RGBA.t option;
          [@key "scrollPaddingColor"]
          [@yojson.option]
          [@ocaml.doc
            "The padding highlight fill color (default: transparent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ScrollSnapHighlightConfig : sig
    type t = {
      scrollSnapContainerHighlightConfig : ScrollSnapContainerHighlightConfig.t;
          [@key "scrollSnapContainerHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of scroll snap \
             containers."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"] [@ocaml.doc "Identifier of the node to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      scrollSnapContainerHighlightConfig : ScrollSnapContainerHighlightConfig.t;
          [@key "scrollSnapContainerHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of scroll snap \
             containers."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"] [@ocaml.doc "Identifier of the node to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HingeConfig : sig
    type t = {
      rect : DOM.Rect.t;
          [@key "rect"] [@ocaml.doc "A rectangle represent hinge"]
      contentColor : DOM.RGBA.t option;
          [@key "contentColor"]
          [@yojson.option]
          [@ocaml.doc
            "The content box highlight fill color (default: a dark color)."]
      outlineColor : DOM.RGBA.t option;
          [@key "outlineColor"]
          [@yojson.option]
          [@ocaml.doc
            "The content box highlight outline color (default: transparent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Configuration for dual screen hinge"]
  end = struct
    type t = {
      rect : DOM.Rect.t;
          [@key "rect"] [@ocaml.doc "A rectangle represent hinge"]
      contentColor : DOM.RGBA.t option;
          [@key "contentColor"]
          [@yojson.option]
          [@ocaml.doc
            "The content box highlight fill color (default: a dark color)."]
      outlineColor : DOM.RGBA.t option;
          [@key "outlineColor"]
          [@yojson.option]
          [@ocaml.doc
            "The content box highlight outline color (default: transparent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Configuration for dual screen hinge"]
  end

  and ContainerQueryHighlightConfig : sig
    type t = {
      containerQueryContainerHighlightConfig :
        ContainerQueryContainerHighlightConfig.t;
          [@key "containerQueryContainerHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of container query \
             containers."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"]
          [@ocaml.doc "Identifier of the container node to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      containerQueryContainerHighlightConfig :
        ContainerQueryContainerHighlightConfig.t;
          [@key "containerQueryContainerHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of container query \
             containers."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"]
          [@ocaml.doc "Identifier of the container node to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ContainerQueryContainerHighlightConfig : sig
    type t = {
      containerBorder : LineStyle.t option;
          [@key "containerBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the container border."]
      descendantBorder : LineStyle.t option;
          [@key "descendantBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the descendants' borders."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      containerBorder : LineStyle.t option;
          [@key "containerBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the container border."]
      descendantBorder : LineStyle.t option;
          [@key "descendantBorder"]
          [@yojson.option]
          [@ocaml.doc "The style of the descendants' borders."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and IsolatedElementHighlightConfig : sig
    type t = {
      isolationModeHighlightConfig : IsolationModeHighlightConfig.t;
          [@key "isolationModeHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of an element in \
             isolation mode."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"]
          [@ocaml.doc "Identifier of the isolated element to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      isolationModeHighlightConfig : IsolationModeHighlightConfig.t;
          [@key "isolationModeHighlightConfig"]
          [@ocaml.doc
            "A descriptor for the highlight appearance of an element in \
             isolation mode."]
      nodeId : DOM.NodeId.t;
          [@key "nodeId"]
          [@ocaml.doc "Identifier of the isolated element to highlight."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and IsolationModeHighlightConfig : sig
    type t = {
      resizerColor : DOM.RGBA.t option;
          [@key "resizerColor"]
          [@yojson.option]
          [@ocaml.doc "The fill color of the resizers (default: transparent)."]
      resizerHandleColor : DOM.RGBA.t option;
          [@key "resizerHandleColor"]
          [@yojson.option]
          [@ocaml.doc
            "The fill color for resizer handles (default: transparent)."]
      maskColor : DOM.RGBA.t option;
          [@key "maskColor"]
          [@yojson.option]
          [@ocaml.doc
            "The fill color for the mask covering non-isolated elements \
             (default: transparent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      resizerColor : DOM.RGBA.t option;
          [@key "resizerColor"]
          [@yojson.option]
          [@ocaml.doc "The fill color of the resizers (default: transparent)."]
      resizerHandleColor : DOM.RGBA.t option;
          [@key "resizerHandleColor"]
          [@yojson.option]
          [@ocaml.doc
            "The fill color for resizer handles (default: transparent)."]
      maskColor : DOM.RGBA.t option;
          [@key "maskColor"]
          [@yojson.option]
          [@ocaml.doc
            "The fill color for the mask covering non-isolated elements \
             (default: transparent)."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and InspectMode : sig
    type _inspectmode =
      [ `searchForNode
      | `searchForUAShadowDOM
      | `captureAreaScreenshot
      | `showDistances
      | `none ]

    val _inspectmode_of_yojson : Yojson.Basic.t -> _inspectmode
    val yojson_of__inspectmode : _inspectmode -> Yojson.Basic.t

    type t = _inspectmode
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _inspectmode =
      [ `searchForNode
      | `searchForUAShadowDOM
      | `captureAreaScreenshot
      | `showDistances
      | `none ]

    let _inspectmode_of_yojson = function
      | `String "searchForNode" -> `searchForNode
      | `String "searchForUAShadowDOM" -> `searchForUAShadowDOM
      | `String "captureAreaScreenshot" -> `captureAreaScreenshot
      | `String "showDistances" -> `showDistances
      | `String "none" -> `none
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__inspectmode = function
      | `searchForNode -> `String "searchForNode"
      | `searchForUAShadowDOM -> `String "searchForUAShadowDOM"
      | `captureAreaScreenshot -> `String "captureAreaScreenshot"
      | `showDistances -> `String "showDistances"
      | `none -> `String "none"

    type t = _inspectmode
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and Page : sig
  module rec FrameId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Unique frame identifier."]
  end

  and AdFrameType : sig
    type _adframetype = [ `none | `child | `root ]

    val _adframetype_of_yojson : Yojson.Basic.t -> _adframetype
    val yojson_of__adframetype : _adframetype -> Yojson.Basic.t

    type t = _adframetype
    [@@deriving yojson]
    [@@ocaml.doc "Indicates whether a frame has been identified as an ad."]
  end

  and AdFrameExplanation : sig
    type _adframeexplanation =
      [ `ParentIsAd | `CreatedByAdScript | `MatchedBlockingRule ]

    val _adframeexplanation_of_yojson : Yojson.Basic.t -> _adframeexplanation
    val yojson_of__adframeexplanation : _adframeexplanation -> Yojson.Basic.t

    type t = _adframeexplanation
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AdFrameStatus : sig
    type t = {
      adFrameType : AdFrameType.t;
          [@key "adFrameType"] [@ocaml.doc "No description provided"]
      explanations : AdFrameExplanation.t list option;
          [@key "explanations"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Indicates whether a frame has been identified as an ad and why."]
  end

  and AdScriptId : sig
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"]
          [@ocaml.doc
            "Script Id of the bottom-most script which caused the frame to be \
             labelled\n\
             as an ad."]
      debuggerId : Runtime.UniqueDebuggerId.t;
          [@key "debuggerId"] [@ocaml.doc "Id of adScriptId's debugger."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Identifies the bottom-most script which caused the frame to be labelled\n\
       as an ad."]
  end

  and SecureContextType : sig
    type _securecontexttype =
      [ `Secure | `SecureLocalhost | `InsecureScheme | `InsecureAncestor ]

    val _securecontexttype_of_yojson : Yojson.Basic.t -> _securecontexttype
    val yojson_of__securecontexttype : _securecontexttype -> Yojson.Basic.t

    type t = _securecontexttype
    [@@deriving yojson]
    [@@ocaml.doc
      "Indicates whether the frame is a secure context and why it is the case."]
  end

  and CrossOriginIsolatedContextType : sig
    type _crossoriginisolatedcontexttype =
      [ `Isolated | `NotIsolated | `NotIsolatedFeatureDisabled ]

    val _crossoriginisolatedcontexttype_of_yojson :
      Yojson.Basic.t -> _crossoriginisolatedcontexttype

    val yojson_of__crossoriginisolatedcontexttype :
      _crossoriginisolatedcontexttype -> Yojson.Basic.t

    type t = _crossoriginisolatedcontexttype
    [@@deriving yojson]
    [@@ocaml.doc
      "Indicates whether the frame is cross-origin isolated and why it is the \
       case."]
  end

  and GatedAPIFeatures : sig
    type _gatedapifeatures =
      [ `SharedArrayBuffers
      | `SharedArrayBuffersTransferAllowed
      | `PerformanceMeasureMemory
      | `PerformanceProfile ]

    val _gatedapifeatures_of_yojson : Yojson.Basic.t -> _gatedapifeatures
    val yojson_of__gatedapifeatures : _gatedapifeatures -> Yojson.Basic.t

    type t = _gatedapifeatures
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PermissionsPolicyFeature : sig
    type _permissionspolicyfeature =
      [ `accelerometer
      | `ambient_light_sensor
      | `attribution_reporting
      | `autoplay
      | `bluetooth
      | `browsing_topics
      | `camera
      | `ch_dpr
      | `ch_device_memory
      | `ch_downlink
      | `ch_ect
      | `ch_prefers_color_scheme
      | `ch_prefers_reduced_motion
      | `ch_rtt
      | `ch_save_data
      | `ch_ua
      | `ch_ua_arch
      | `ch_ua_bitness
      | `ch_ua_platform
      | `ch_ua_model
      | `ch_ua_mobile
      | `ch_ua_form_factor
      | `ch_ua_full_version
      | `ch_ua_full_version_list
      | `ch_ua_platform_version
      | `ch_ua_wow64
      | `ch_viewport_height
      | `ch_viewport_width
      | `ch_width
      | `clipboard_read
      | `clipboard_write
      | `compute_pressure
      | `cross_origin_isolated
      | `direct_sockets
      | `display_capture
      | `document_domain
      | `encrypted_media
      | `execution_while_out_of_viewport
      | `execution_while_not_rendered
      | `focus_without_user_activation
      | `fullscreen
      | `frobulate
      | `gamepad
      | `geolocation
      | `gyroscope
      | `hid
      | `identity_credentials_get
      | `idle_detection
      | `interest_cohort
      | `join_ad_interest_group
      | `keyboard_map
      | `local_fonts
      | `magnetometer
      | `microphone
      | `midi
      | `otp_credentials
      | `payment
      | `picture_in_picture
      | `private_aggregation
      | `private_state_token_issuance
      | `private_state_token_redemption
      | `publickey_credentials_get
      | `run_ad_auction
      | `screen_wake_lock
      | `serial
      | `shared_autofill
      | `shared_storage
      | `shared_storage_select_url
      | `smart_card
      | `storage_access
      | `sync_xhr
      | `unload
      | `usb
      | `vertical_scroll
      | `web_share
      | `window_management
      | `window_placement
      | `xr_spatial_tracking ]

    val _permissionspolicyfeature_of_yojson :
      Yojson.Basic.t -> _permissionspolicyfeature

    val yojson_of__permissionspolicyfeature :
      _permissionspolicyfeature -> Yojson.Basic.t

    type t = _permissionspolicyfeature
    [@@deriving yojson]
    [@@ocaml.doc
      "All Permissions Policy features. This enum should match the one defined\n\
       in \
       third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5."]
  end

  and PermissionsPolicyBlockReason : sig
    type _permissionspolicyblockreason =
      [ `Header | `IframeAttribute | `InFencedFrameTree | `InIsolatedApp ]

    val _permissionspolicyblockreason_of_yojson :
      Yojson.Basic.t -> _permissionspolicyblockreason

    val yojson_of__permissionspolicyblockreason :
      _permissionspolicyblockreason -> Yojson.Basic.t

    type t = _permissionspolicyblockreason
    [@@deriving yojson]
    [@@ocaml.doc "Reason for a permissions policy feature to be disabled."]
  end

  and PermissionsPolicyBlockLocator : sig
    type t = {
      frameId : FrameId.t;
          [@key "frameId"] [@ocaml.doc "No description provided"]
      blockReason : PermissionsPolicyBlockReason.t;
          [@key "blockReason"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PermissionsPolicyFeatureState : sig
    type t = {
      feature : PermissionsPolicyFeature.t;
          [@key "feature"] [@ocaml.doc "No description provided"]
      allowed : bool; [@key "allowed"] [@ocaml.doc "No description provided"]
      locator : PermissionsPolicyBlockLocator.t option;
          [@key "locator"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and OriginTrialTokenStatus : sig
    type _origintrialtokenstatus =
      [ `Success
      | `NotSupported
      | `Insecure
      | `Expired
      | `WrongOrigin
      | `InvalidSignature
      | `Malformed
      | `WrongVersion
      | `FeatureDisabled
      | `TokenDisabled
      | `FeatureDisabledForUser
      | `UnknownTrial ]

    val _origintrialtokenstatus_of_yojson :
      Yojson.Basic.t -> _origintrialtokenstatus

    val yojson_of__origintrialtokenstatus :
      _origintrialtokenstatus -> Yojson.Basic.t

    type t = _origintrialtokenstatus
    [@@deriving yojson]
    [@@ocaml.doc
      "Origin Trial(https://www.chromium.org/blink/origin-trials) support.\n\
       Status for an Origin Trial token."]
  end

  and OriginTrialStatus : sig
    type _origintrialstatus =
      [ `Enabled | `ValidTokenNotProvided | `OSNotSupported | `TrialNotAllowed ]

    val _origintrialstatus_of_yojson : Yojson.Basic.t -> _origintrialstatus
    val yojson_of__origintrialstatus : _origintrialstatus -> Yojson.Basic.t

    type t = _origintrialstatus
    [@@deriving yojson] [@@ocaml.doc "Status for an Origin Trial."]
  end

  and OriginTrialUsageRestriction : sig
    type _origintrialusagerestriction = [ `None | `Subset ]

    val _origintrialusagerestriction_of_yojson :
      Yojson.Basic.t -> _origintrialusagerestriction

    val yojson_of__origintrialusagerestriction :
      _origintrialusagerestriction -> Yojson.Basic.t

    type t = _origintrialusagerestriction
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and OriginTrialToken : sig
    type t = {
      origin : string; [@key "origin"] [@ocaml.doc "No description provided"]
      matchSubDomains : bool;
          [@key "matchSubDomains"] [@ocaml.doc "No description provided"]
      trialName : string;
          [@key "trialName"] [@ocaml.doc "No description provided"]
      expiryTime : Network.TimeSinceEpoch.t;
          [@key "expiryTime"] [@ocaml.doc "No description provided"]
      isThirdParty : bool;
          [@key "isThirdParty"] [@ocaml.doc "No description provided"]
      usageRestriction : OriginTrialUsageRestriction.t;
          [@key "usageRestriction"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and OriginTrialTokenWithStatus : sig
    type t = {
      rawTokenText : string;
          [@key "rawTokenText"] [@ocaml.doc "No description provided"]
      parsedToken : OriginTrialToken.t option;
          [@key "parsedToken"]
          [@yojson.option]
          [@ocaml.doc
            "`parsedToken` is present only when the token is extractable and\n\
             parsable."]
      status : OriginTrialTokenStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and OriginTrial : sig
    type t = {
      trialName : string;
          [@key "trialName"] [@ocaml.doc "No description provided"]
      status : OriginTrialStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
      tokensWithStatus : OriginTrialTokenWithStatus.t list;
          [@key "tokensWithStatus"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Frame : sig
    type t = {
      id : FrameId.t; [@key "id"] [@ocaml.doc "Frame unique identifier."]
      parentId : FrameId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc "Parent frame identifier."]
      loaderId : Network.LoaderId.t;
          [@key "loaderId"]
          [@ocaml.doc "Identifier of the loader associated with this frame."]
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "Frame's name as specified in the tag."]
      url : string;
          [@key "url"] [@ocaml.doc "Frame document's URL without fragment."]
      urlFragment : string option;
          [@key "urlFragment"]
          [@yojson.option]
          [@ocaml.doc "Frame document's URL fragment including the '#'."]
      domainAndRegistry : string;
          [@key "domainAndRegistry"]
          [@ocaml.doc
            "Frame document's registered domain, taking the public suffixes \
             list into account.\n\
             Extracted from the Frame's url.\n\
             Example URLs: http://www.google.com/file.html -> \"google.com\"\n\
            \              http://a.b.co.uk/file.html      -> \"b.co.uk\""]
      securityOrigin : string;
          [@key "securityOrigin"]
          [@ocaml.doc "Frame document's security origin."]
      mimeType : string;
          [@key "mimeType"]
          [@ocaml.doc "Frame document's mimeType as determined by the browser."]
      unreachableUrl : string option;
          [@key "unreachableUrl"]
          [@yojson.option]
          [@ocaml.doc
            "If the frame failed to load, this contains the URL that could not \
             be loaded. Note that unlike url above, this URL may contain a \
             fragment."]
      adFrameStatus : AdFrameStatus.t option;
          [@key "adFrameStatus"]
          [@yojson.option]
          [@ocaml.doc
            "Indicates whether this frame was tagged as an ad and why."]
      secureContextType : SecureContextType.t;
          [@key "secureContextType"]
          [@ocaml.doc
            "Indicates whether the main document is a secure context and \
             explains why that is the case."]
      crossOriginIsolatedContextType : CrossOriginIsolatedContextType.t;
          [@key "crossOriginIsolatedContextType"]
          [@ocaml.doc
            "Indicates whether this is a cross origin isolated context."]
      gatedAPIFeatures : GatedAPIFeatures.t list;
          [@key "gatedAPIFeatures"]
          [@ocaml.doc "Indicated which gated APIs / features are available."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the Frame on the page."]
  end

  and FrameResource : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "Resource URL."]
      type_ : Network.ResourceType.t;
          [@key "type"] [@ocaml.doc "Type of this resource."]
      mimeType : string;
          [@key "mimeType"]
          [@ocaml.doc "Resource mimeType as determined by the browser."]
      lastModified : Network.TimeSinceEpoch.t option;
          [@key "lastModified"]
          [@yojson.option]
          [@ocaml.doc "last-modified timestamp as reported by server."]
      contentSize : number option;
          [@key "contentSize"]
          [@yojson.option]
          [@ocaml.doc "Resource content size."]
      failed : bool option;
          [@key "failed"]
          [@yojson.option]
          [@ocaml.doc "True if the resource failed to load."]
      canceled : bool option;
          [@key "canceled"]
          [@yojson.option]
          [@ocaml.doc "True if the resource was canceled during loading."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about the Resource on the page."]
  end

  and FrameResourceTree : sig
    type t = {
      frame : Frame.t;
          [@key "frame"] [@ocaml.doc "Frame information for this tree item."]
      childFrames : FrameResourceTree.t list option;
          [@key "childFrames"] [@yojson.option] [@ocaml.doc "Child frames."]
      resources : FrameResource.t list;
          [@key "resources"] [@ocaml.doc "Information about frame resources."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about the Frame hierarchy along with their cached resources."]
  end

  and FrameTree : sig
    type t = {
      frame : Frame.t;
          [@key "frame"] [@ocaml.doc "Frame information for this tree item."]
      childFrames : FrameTree.t list option;
          [@key "childFrames"] [@yojson.option] [@ocaml.doc "Child frames."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the Frame hierarchy."]
  end

  and ScriptIdentifier : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique script identifier."]
  end

  and TransitionType : sig
    type _transitiontype =
      [ `link
      | `typed
      | `address_bar
      | `auto_bookmark
      | `auto_subframe
      | `manual_subframe
      | `generated
      | `auto_toplevel
      | `form_submit
      | `reload
      | `keyword
      | `keyword_generated
      | `other ]

    val _transitiontype_of_yojson : Yojson.Basic.t -> _transitiontype
    val yojson_of__transitiontype : _transitiontype -> Yojson.Basic.t

    type t = _transitiontype
    [@@deriving yojson] [@@ocaml.doc "Transition type."]
  end

  and NavigationEntry : sig
    type t = {
      id : number;
          [@key "id"] [@ocaml.doc "Unique id of the navigation history entry."]
      url : string;
          [@key "url"] [@ocaml.doc "URL of the navigation history entry."]
      userTypedURL : string;
          [@key "userTypedURL"]
          [@ocaml.doc "URL that the user typed in the url bar."]
      title : string;
          [@key "title"] [@ocaml.doc "Title of the navigation history entry."]
      transitionType : TransitionType.t;
          [@key "transitionType"] [@ocaml.doc "Transition type."]
    }
    [@@deriving yojson] [@@ocaml.doc "Navigation history entry."]
  end

  and ScreencastFrameMetadata : sig
    type t = {
      offsetTop : number; [@key "offsetTop"] [@ocaml.doc "Top offset in DIP."]
      pageScaleFactor : number;
          [@key "pageScaleFactor"] [@ocaml.doc "Page scale factor."]
      deviceWidth : number;
          [@key "deviceWidth"] [@ocaml.doc "Device screen width in DIP."]
      deviceHeight : number;
          [@key "deviceHeight"] [@ocaml.doc "Device screen height in DIP."]
      scrollOffsetX : number;
          [@key "scrollOffsetX"]
          [@ocaml.doc "Position of horizontal scroll in CSS pixels."]
      scrollOffsetY : number;
          [@key "scrollOffsetY"]
          [@ocaml.doc "Position of vertical scroll in CSS pixels."]
      timestamp : Network.TimeSinceEpoch.t option;
          [@key "timestamp"]
          [@yojson.option]
          [@ocaml.doc "Frame swap timestamp."]
    }
    [@@deriving yojson] [@@ocaml.doc "Screencast frame metadata."]
  end

  and DialogType : sig
    type _dialogtype = [ `alert | `confirm | `prompt | `beforeunload ]

    val _dialogtype_of_yojson : Yojson.Basic.t -> _dialogtype
    val yojson_of__dialogtype : _dialogtype -> Yojson.Basic.t

    type t = _dialogtype
    [@@deriving yojson] [@@ocaml.doc "Javascript dialog type."]
  end

  and AppManifestError : sig
    type t = {
      message : string; [@key "message"] [@ocaml.doc "Error message."]
      critical : number;
          [@key "critical"]
          [@ocaml.doc "If criticial, this is a non-recoverable parse error."]
      line : number; [@key "line"] [@ocaml.doc "Error line."]
      column : number; [@key "column"] [@ocaml.doc "Error column."]
    }
    [@@deriving yojson] [@@ocaml.doc "Error while paring app manifest."]
  end

  and AppManifestParsedProperties : sig
    type t = {
      scope : string; [@key "scope"] [@ocaml.doc "Computed scope value"]
    }
    [@@deriving yojson] [@@ocaml.doc "Parsed app manifest properties."]
  end

  and LayoutViewport : sig
    type t = {
      pageX : number;
          [@key "pageX"]
          [@ocaml.doc
            "Horizontal offset relative to the document (CSS pixels)."]
      pageY : number;
          [@key "pageY"]
          [@ocaml.doc "Vertical offset relative to the document (CSS pixels)."]
      clientWidth : number;
          [@key "clientWidth"]
          [@ocaml.doc "Width (CSS pixels), excludes scrollbar if present."]
      clientHeight : number;
          [@key "clientHeight"]
          [@ocaml.doc "Height (CSS pixels), excludes scrollbar if present."]
    }
    [@@deriving yojson] [@@ocaml.doc "Layout viewport position and dimensions."]
  end

  and VisualViewport : sig
    type t = {
      offsetX : number;
          [@key "offsetX"]
          [@ocaml.doc
            "Horizontal offset relative to the layout viewport (CSS pixels)."]
      offsetY : number;
          [@key "offsetY"]
          [@ocaml.doc
            "Vertical offset relative to the layout viewport (CSS pixels)."]
      pageX : number;
          [@key "pageX"]
          [@ocaml.doc
            "Horizontal offset relative to the document (CSS pixels)."]
      pageY : number;
          [@key "pageY"]
          [@ocaml.doc "Vertical offset relative to the document (CSS pixels)."]
      clientWidth : number;
          [@key "clientWidth"]
          [@ocaml.doc "Width (CSS pixels), excludes scrollbar if present."]
      clientHeight : number;
          [@key "clientHeight"]
          [@ocaml.doc "Height (CSS pixels), excludes scrollbar if present."]
      scale : number;
          [@key "scale"]
          [@ocaml.doc
            "Scale relative to the ideal viewport (size at width=device-width)."]
      zoom : number option;
          [@key "zoom"]
          [@yojson.option]
          [@ocaml.doc
            "Page zoom factor (CSS to device independent pixels ratio)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Visual viewport position, dimensions, and scale."]
  end

  and Viewport : sig
    type t = {
      x : number;
          [@key "x"] [@ocaml.doc "X offset in device independent pixels (dip)."]
      y : number;
          [@key "y"] [@ocaml.doc "Y offset in device independent pixels (dip)."]
      width : number;
          [@key "width"]
          [@ocaml.doc "Rectangle width in device independent pixels (dip)."]
      height : number;
          [@key "height"]
          [@ocaml.doc "Rectangle height in device independent pixels (dip)."]
      scale : number; [@key "scale"] [@ocaml.doc "Page scale factor."]
    }
    [@@deriving yojson] [@@ocaml.doc "Viewport for capturing screenshot."]
  end

  and FontFamilies : sig
    type t = {
      standard : string option;
          [@key "standard"]
          [@yojson.option]
          [@ocaml.doc "The standard font-family."]
      fixed : string option;
          [@key "fixed"] [@yojson.option] [@ocaml.doc "The fixed font-family."]
      serif : string option;
          [@key "serif"] [@yojson.option] [@ocaml.doc "The serif font-family."]
      sansSerif : string option;
          [@key "sansSerif"]
          [@yojson.option]
          [@ocaml.doc "The sansSerif font-family."]
      cursive : string option;
          [@key "cursive"]
          [@yojson.option]
          [@ocaml.doc "The cursive font-family."]
      fantasy : string option;
          [@key "fantasy"]
          [@yojson.option]
          [@ocaml.doc "The fantasy font-family."]
      math : string option;
          [@key "math"] [@yojson.option] [@ocaml.doc "The math font-family."]
    }
    [@@deriving yojson] [@@ocaml.doc "Generic font families collection."]
  end

  and ScriptFontFamilies : sig
    type t = {
      script : string;
          [@key "script"]
          [@ocaml.doc
            "Name of the script which these font families are defined for."]
      fontFamilies : FontFamilies.t;
          [@key "fontFamilies"]
          [@ocaml.doc "Generic font families collection for the script."]
    }
    [@@deriving yojson] [@@ocaml.doc "Font families collection for a script."]
  end

  and FontSizes : sig
    type t = {
      standard : number option;
          [@key "standard"]
          [@yojson.option]
          [@ocaml.doc "Default standard font size."]
      fixed : number option;
          [@key "fixed"]
          [@yojson.option]
          [@ocaml.doc "Default fixed font size."]
    }
    [@@deriving yojson] [@@ocaml.doc "Default font sizes."]
  end

  and ClientNavigationReason : sig
    type _clientnavigationreason =
      [ `formSubmissionGet
      | `formSubmissionPost
      | `httpHeaderRefresh
      | `scriptInitiated
      | `metaTagRefresh
      | `pageBlockInterstitial
      | `reload
      | `anchorClick ]

    val _clientnavigationreason_of_yojson :
      Yojson.Basic.t -> _clientnavigationreason

    val yojson_of__clientnavigationreason :
      _clientnavigationreason -> Yojson.Basic.t

    type t = _clientnavigationreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ClientNavigationDisposition : sig
    type _clientnavigationdisposition =
      [ `currentTab | `newTab | `newWindow | `download ]

    val _clientnavigationdisposition_of_yojson :
      Yojson.Basic.t -> _clientnavigationdisposition

    val yojson_of__clientnavigationdisposition :
      _clientnavigationdisposition -> Yojson.Basic.t

    type t = _clientnavigationdisposition
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and InstallabilityErrorArgument : sig
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Argument name (e.g. name:'minimum-icon-size-in-pixels')."]
      value : string;
          [@key "value"] [@ocaml.doc "Argument value (e.g. value:'64')."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and InstallabilityError : sig
    type t = {
      errorId : string;
          [@key "errorId"]
          [@ocaml.doc "The error id (e.g. 'manifest-missing-suitable-icon')."]
      errorArguments : InstallabilityErrorArgument.t list;
          [@key "errorArguments"]
          [@ocaml.doc
            "The list of error arguments (e.g. \
             {name:'minimum-icon-size-in-pixels', value:'64'})."]
    }
    [@@deriving yojson] [@@ocaml.doc "The installability error"]
  end

  and ReferrerPolicy : sig
    type _referrerpolicy =
      [ `noReferrer
      | `noReferrerWhenDowngrade
      | `origin
      | `originWhenCrossOrigin
      | `sameOrigin
      | `strictOrigin
      | `strictOriginWhenCrossOrigin
      | `unsafeUrl ]

    val _referrerpolicy_of_yojson : Yojson.Basic.t -> _referrerpolicy
    val yojson_of__referrerpolicy : _referrerpolicy -> Yojson.Basic.t

    type t = _referrerpolicy
    [@@deriving yojson]
    [@@ocaml.doc "The referring-policy used for the navigation."]
  end

  and CompilationCacheParams : sig
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "The URL of the script to produce a compilation cache entry for."]
      eager : bool option;
          [@key "eager"]
          [@yojson.option]
          [@ocaml.doc
            "A hint to the backend whether eager compilation is recommended.\n\
             (the actual compilation mode used is upon backend discretion)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Per-script compilation cache parameters for \
       `Page.produceCompilationCache`"]
  end

  and AutoResponseMode : sig
    type _autoresponsemode = [ `none | `autoAccept | `autoReject | `autoOptOut ]

    val _autoresponsemode_of_yojson : Yojson.Basic.t -> _autoresponsemode
    val yojson_of__autoresponsemode : _autoresponsemode -> Yojson.Basic.t

    type t = _autoresponsemode
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum of possible auto-reponse for permisison / prompt dialogs."]
  end

  and NavigationType : sig
    type _navigationtype = [ `Navigation | `BackForwardCacheRestore ]

    val _navigationtype_of_yojson : Yojson.Basic.t -> _navigationtype
    val yojson_of__navigationtype : _navigationtype -> Yojson.Basic.t

    type t = _navigationtype
    [@@deriving yojson] [@@ocaml.doc "The type of a frameNavigated event."]
  end

  and BackForwardCacheNotRestoredReason : sig
    type _backforwardcachenotrestoredreason =
      [ `NotPrimaryMainFrame
      | `BackForwardCacheDisabled
      | `RelatedActiveContentsExist
      | `HTTPStatusNotOK
      | `SchemeNotHTTPOrHTTPS
      | `Loading
      | `WasGrantedMediaAccess
      | `DisableForRenderFrameHostCalled
      | `DomainNotAllowed
      | `HTTPMethodNotGET
      | `SubframeIsNavigating
      | `Timeout
      | `CacheLimit
      | `JavaScriptExecution
      | `RendererProcessKilled
      | `RendererProcessCrashed
      | `SchedulerTrackedFeatureUsed
      | `ConflictingBrowsingInstance
      | `CacheFlushed
      | `ServiceWorkerVersionActivation
      | `SessionRestored
      | `ServiceWorkerPostMessage
      | `EnteredBackForwardCacheBeforeServiceWorkerHostAdded
      | `RenderFrameHostReused_SameSite
      | `RenderFrameHostReused_CrossSite
      | `ServiceWorkerClaim
      | `IgnoreEventAndEvict
      | `HaveInnerContents
      | `TimeoutPuttingInCache
      | `BackForwardCacheDisabledByLowMemory
      | `BackForwardCacheDisabledByCommandLine
      | `NetworkRequestDatapipeDrainedAsBytesConsumer
      | `NetworkRequestRedirected
      | `NetworkRequestTimeout
      | `NetworkExceedsBufferLimit
      | `NavigationCancelledWhileRestoring
      | `NotMostRecentNavigationEntry
      | `BackForwardCacheDisabledForPrerender
      | `UserAgentOverrideDiffers
      | `ForegroundCacheLimit
      | `BrowsingInstanceNotSwapped
      | `BackForwardCacheDisabledForDelegate
      | `UnloadHandlerExistsInMainFrame
      | `UnloadHandlerExistsInSubFrame
      | `ServiceWorkerUnregistration
      | `CacheControlNoStore
      | `CacheControlNoStoreCookieModified
      | `CacheControlNoStoreHTTPOnlyCookieModified
      | `NoResponseHead
      | `Unknown
      | `ActivationNavigationsDisallowedForBug1234857
      | `ErrorDocument
      | `FencedFramesEmbedder
      | `CookieDisabled
      | `HTTPAuthRequired
      | `CookieFlushed
      | `WebSocket
      | `WebTransport
      | `WebRTC
      | `MainResourceHasCacheControlNoStore
      | `MainResourceHasCacheControlNoCache
      | `SubresourceHasCacheControlNoStore
      | `SubresourceHasCacheControlNoCache
      | `ContainsPlugins
      | `DocumentLoaded
      | `DedicatedWorkerOrWorklet
      | `OutstandingNetworkRequestOthers
      | `RequestedMIDIPermission
      | `RequestedAudioCapturePermission
      | `RequestedVideoCapturePermission
      | `RequestedBackForwardCacheBlockedSensors
      | `RequestedBackgroundWorkPermission
      | `BroadcastChannel
      | `WebXR
      | `SharedWorker
      | `WebLocks
      | `WebHID
      | `WebShare
      | `RequestedStorageAccessGrant
      | `WebNfc
      | `OutstandingNetworkRequestFetch
      | `OutstandingNetworkRequestXHR
      | `AppBanner
      | `Printing
      | `WebDatabase
      | `PictureInPicture
      | `Portal
      | `SpeechRecognizer
      | `IdleManager
      | `PaymentManager
      | `SpeechSynthesis
      | `KeyboardLock
      | `WebOTPService
      | `OutstandingNetworkRequestDirectSocket
      | `InjectedJavascript
      | `InjectedStyleSheet
      | `KeepaliveRequest
      | `IndexedDBEvent
      | `Dummy
      | `JsNetworkRequestReceivedCacheControlNoStoreResource
      | `WebRTCSticky
      | `WebTransportSticky
      | `WebSocketSticky
      | `ContentSecurityHandler
      | `ContentWebAuthenticationAPI
      | `ContentFileChooser
      | `ContentSerial
      | `ContentFileSystemAccess
      | `ContentMediaDevicesDispatcherHost
      | `ContentWebBluetooth
      | `ContentWebUSB
      | `ContentMediaSessionService
      | `ContentScreenReader
      | `EmbedderPopupBlockerTabHelper
      | `EmbedderSafeBrowsingTriggeredPopupBlocker
      | `EmbedderSafeBrowsingThreatDetails
      | `EmbedderAppBannerManager
      | `EmbedderDomDistillerViewerSource
      | `EmbedderDomDistillerSelfDeletingRequestDelegate
      | `EmbedderOomInterventionTabHelper
      | `EmbedderOfflinePage
      | `EmbedderChromePasswordManagerClientBindCredentialManager
      | `EmbedderPermissionRequestManager
      | `EmbedderModalDialog
      | `EmbedderExtensions
      | `EmbedderExtensionMessaging
      | `EmbedderExtensionMessagingForOpenPort
      | `EmbedderExtensionSentMessageToCachedFrame ]

    val _backforwardcachenotrestoredreason_of_yojson :
      Yojson.Basic.t -> _backforwardcachenotrestoredreason

    val yojson_of__backforwardcachenotrestoredreason :
      _backforwardcachenotrestoredreason -> Yojson.Basic.t

    type t = _backforwardcachenotrestoredreason
    [@@deriving yojson]
    [@@ocaml.doc "List of not restored reasons for back-forward cache."]
  end

  and BackForwardCacheNotRestoredReasonType : sig
    type _backforwardcachenotrestoredreasontype =
      [ `SupportPending | `PageSupportNeeded | `Circumstantial ]

    val _backforwardcachenotrestoredreasontype_of_yojson :
      Yojson.Basic.t -> _backforwardcachenotrestoredreasontype

    val yojson_of__backforwardcachenotrestoredreasontype :
      _backforwardcachenotrestoredreasontype -> Yojson.Basic.t

    type t = _backforwardcachenotrestoredreasontype
    [@@deriving yojson]
    [@@ocaml.doc "Types of not restored reasons for back-forward cache."]
  end

  and BackForwardCacheNotRestoredExplanation : sig
    type t = {
      type_ : BackForwardCacheNotRestoredReasonType.t;
          [@key "type"] [@ocaml.doc "Type of the reason"]
      reason : BackForwardCacheNotRestoredReason.t;
          [@key "reason"] [@ocaml.doc "Not restored reason"]
      context : string option;
          [@key "context"]
          [@yojson.option]
          [@ocaml.doc
            "Context associated with the reason. The meaning of this context is\n\
             dependent on the reason:\n\
             - EmbedderExtensionSentMessageToCachedFrame: the extension ID."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and BackForwardCacheNotRestoredExplanationTree : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "URL of each frame"]
      explanations : BackForwardCacheNotRestoredExplanation.t list;
          [@key "explanations"]
          [@ocaml.doc "Not restored reasons of each frame"]
      children : BackForwardCacheNotRestoredExplanationTree.t list;
          [@key "children"] [@ocaml.doc "Array of children frame"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec FrameId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Unique frame identifier."]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "Unique frame identifier."]
  end

  and AdFrameType : sig
    type _adframetype = [ `none | `child | `root ]

    val _adframetype_of_yojson : Yojson.Basic.t -> _adframetype
    val yojson_of__adframetype : _adframetype -> Yojson.Basic.t

    type t = _adframetype
    [@@deriving yojson]
    [@@ocaml.doc "Indicates whether a frame has been identified as an ad."]
  end = struct
    type _adframetype = [ `none | `child | `root ]

    let _adframetype_of_yojson = function
      | `String "none" -> `none
      | `String "child" -> `child
      | `String "root" -> `root
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__adframetype = function
      | `none -> `String "none"
      | `child -> `String "child"
      | `root -> `String "root"

    type t = _adframetype
    [@@deriving yojson]
    [@@ocaml.doc "Indicates whether a frame has been identified as an ad."]
  end

  and AdFrameExplanation : sig
    type _adframeexplanation =
      [ `ParentIsAd | `CreatedByAdScript | `MatchedBlockingRule ]

    val _adframeexplanation_of_yojson : Yojson.Basic.t -> _adframeexplanation
    val yojson_of__adframeexplanation : _adframeexplanation -> Yojson.Basic.t

    type t = _adframeexplanation
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _adframeexplanation =
      [ `ParentIsAd | `CreatedByAdScript | `MatchedBlockingRule ]

    let _adframeexplanation_of_yojson = function
      | `String "ParentIsAd" -> `ParentIsAd
      | `String "CreatedByAdScript" -> `CreatedByAdScript
      | `String "MatchedBlockingRule" -> `MatchedBlockingRule
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__adframeexplanation = function
      | `ParentIsAd -> `String "ParentIsAd"
      | `CreatedByAdScript -> `String "CreatedByAdScript"
      | `MatchedBlockingRule -> `String "MatchedBlockingRule"

    type t = _adframeexplanation
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AdFrameStatus : sig
    type t = {
      adFrameType : AdFrameType.t;
          [@key "adFrameType"] [@ocaml.doc "No description provided"]
      explanations : AdFrameExplanation.t list option;
          [@key "explanations"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Indicates whether a frame has been identified as an ad and why."]
  end = struct
    type t = {
      adFrameType : AdFrameType.t;
          [@key "adFrameType"] [@ocaml.doc "No description provided"]
      explanations : AdFrameExplanation.t list option;
          [@key "explanations"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Indicates whether a frame has been identified as an ad and why."]
  end

  and AdScriptId : sig
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"]
          [@ocaml.doc
            "Script Id of the bottom-most script which caused the frame to be \
             labelled\n\
             as an ad."]
      debuggerId : Runtime.UniqueDebuggerId.t;
          [@key "debuggerId"] [@ocaml.doc "Id of adScriptId's debugger."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Identifies the bottom-most script which caused the frame to be labelled\n\
       as an ad."]
  end = struct
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"]
          [@ocaml.doc
            "Script Id of the bottom-most script which caused the frame to be \
             labelled\n\
             as an ad."]
      debuggerId : Runtime.UniqueDebuggerId.t;
          [@key "debuggerId"] [@ocaml.doc "Id of adScriptId's debugger."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Identifies the bottom-most script which caused the frame to be labelled\n\
       as an ad."]
  end

  and SecureContextType : sig
    type _securecontexttype =
      [ `Secure | `SecureLocalhost | `InsecureScheme | `InsecureAncestor ]

    val _securecontexttype_of_yojson : Yojson.Basic.t -> _securecontexttype
    val yojson_of__securecontexttype : _securecontexttype -> Yojson.Basic.t

    type t = _securecontexttype
    [@@deriving yojson]
    [@@ocaml.doc
      "Indicates whether the frame is a secure context and why it is the case."]
  end = struct
    type _securecontexttype =
      [ `Secure | `SecureLocalhost | `InsecureScheme | `InsecureAncestor ]

    let _securecontexttype_of_yojson = function
      | `String "Secure" -> `Secure
      | `String "SecureLocalhost" -> `SecureLocalhost
      | `String "InsecureScheme" -> `InsecureScheme
      | `String "InsecureAncestor" -> `InsecureAncestor
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__securecontexttype = function
      | `Secure -> `String "Secure"
      | `SecureLocalhost -> `String "SecureLocalhost"
      | `InsecureScheme -> `String "InsecureScheme"
      | `InsecureAncestor -> `String "InsecureAncestor"

    type t = _securecontexttype
    [@@deriving yojson]
    [@@ocaml.doc
      "Indicates whether the frame is a secure context and why it is the case."]
  end

  and CrossOriginIsolatedContextType : sig
    type _crossoriginisolatedcontexttype =
      [ `Isolated | `NotIsolated | `NotIsolatedFeatureDisabled ]

    val _crossoriginisolatedcontexttype_of_yojson :
      Yojson.Basic.t -> _crossoriginisolatedcontexttype

    val yojson_of__crossoriginisolatedcontexttype :
      _crossoriginisolatedcontexttype -> Yojson.Basic.t

    type t = _crossoriginisolatedcontexttype
    [@@deriving yojson]
    [@@ocaml.doc
      "Indicates whether the frame is cross-origin isolated and why it is the \
       case."]
  end = struct
    type _crossoriginisolatedcontexttype =
      [ `Isolated | `NotIsolated | `NotIsolatedFeatureDisabled ]

    let _crossoriginisolatedcontexttype_of_yojson = function
      | `String "Isolated" -> `Isolated
      | `String "NotIsolated" -> `NotIsolated
      | `String "NotIsolatedFeatureDisabled" -> `NotIsolatedFeatureDisabled
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__crossoriginisolatedcontexttype = function
      | `Isolated -> `String "Isolated"
      | `NotIsolated -> `String "NotIsolated"
      | `NotIsolatedFeatureDisabled -> `String "NotIsolatedFeatureDisabled"

    type t = _crossoriginisolatedcontexttype
    [@@deriving yojson]
    [@@ocaml.doc
      "Indicates whether the frame is cross-origin isolated and why it is the \
       case."]
  end

  and GatedAPIFeatures : sig
    type _gatedapifeatures =
      [ `SharedArrayBuffers
      | `SharedArrayBuffersTransferAllowed
      | `PerformanceMeasureMemory
      | `PerformanceProfile ]

    val _gatedapifeatures_of_yojson : Yojson.Basic.t -> _gatedapifeatures
    val yojson_of__gatedapifeatures : _gatedapifeatures -> Yojson.Basic.t

    type t = _gatedapifeatures
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _gatedapifeatures =
      [ `SharedArrayBuffers
      | `SharedArrayBuffersTransferAllowed
      | `PerformanceMeasureMemory
      | `PerformanceProfile ]

    let _gatedapifeatures_of_yojson = function
      | `String "SharedArrayBuffers" -> `SharedArrayBuffers
      | `String "SharedArrayBuffersTransferAllowed" ->
          `SharedArrayBuffersTransferAllowed
      | `String "PerformanceMeasureMemory" -> `PerformanceMeasureMemory
      | `String "PerformanceProfile" -> `PerformanceProfile
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__gatedapifeatures = function
      | `SharedArrayBuffers -> `String "SharedArrayBuffers"
      | `SharedArrayBuffersTransferAllowed ->
          `String "SharedArrayBuffersTransferAllowed"
      | `PerformanceMeasureMemory -> `String "PerformanceMeasureMemory"
      | `PerformanceProfile -> `String "PerformanceProfile"

    type t = _gatedapifeatures
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PermissionsPolicyFeature : sig
    type _permissionspolicyfeature =
      [ `accelerometer
      | `ambient_light_sensor
      | `attribution_reporting
      | `autoplay
      | `bluetooth
      | `browsing_topics
      | `camera
      | `ch_dpr
      | `ch_device_memory
      | `ch_downlink
      | `ch_ect
      | `ch_prefers_color_scheme
      | `ch_prefers_reduced_motion
      | `ch_rtt
      | `ch_save_data
      | `ch_ua
      | `ch_ua_arch
      | `ch_ua_bitness
      | `ch_ua_platform
      | `ch_ua_model
      | `ch_ua_mobile
      | `ch_ua_form_factor
      | `ch_ua_full_version
      | `ch_ua_full_version_list
      | `ch_ua_platform_version
      | `ch_ua_wow64
      | `ch_viewport_height
      | `ch_viewport_width
      | `ch_width
      | `clipboard_read
      | `clipboard_write
      | `compute_pressure
      | `cross_origin_isolated
      | `direct_sockets
      | `display_capture
      | `document_domain
      | `encrypted_media
      | `execution_while_out_of_viewport
      | `execution_while_not_rendered
      | `focus_without_user_activation
      | `fullscreen
      | `frobulate
      | `gamepad
      | `geolocation
      | `gyroscope
      | `hid
      | `identity_credentials_get
      | `idle_detection
      | `interest_cohort
      | `join_ad_interest_group
      | `keyboard_map
      | `local_fonts
      | `magnetometer
      | `microphone
      | `midi
      | `otp_credentials
      | `payment
      | `picture_in_picture
      | `private_aggregation
      | `private_state_token_issuance
      | `private_state_token_redemption
      | `publickey_credentials_get
      | `run_ad_auction
      | `screen_wake_lock
      | `serial
      | `shared_autofill
      | `shared_storage
      | `shared_storage_select_url
      | `smart_card
      | `storage_access
      | `sync_xhr
      | `unload
      | `usb
      | `vertical_scroll
      | `web_share
      | `window_management
      | `window_placement
      | `xr_spatial_tracking ]

    val _permissionspolicyfeature_of_yojson :
      Yojson.Basic.t -> _permissionspolicyfeature

    val yojson_of__permissionspolicyfeature :
      _permissionspolicyfeature -> Yojson.Basic.t

    type t = _permissionspolicyfeature
    [@@deriving yojson]
    [@@ocaml.doc
      "All Permissions Policy features. This enum should match the one defined\n\
       in \
       third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5."]
  end = struct
    type _permissionspolicyfeature =
      [ `accelerometer
      | `ambient_light_sensor
      | `attribution_reporting
      | `autoplay
      | `bluetooth
      | `browsing_topics
      | `camera
      | `ch_dpr
      | `ch_device_memory
      | `ch_downlink
      | `ch_ect
      | `ch_prefers_color_scheme
      | `ch_prefers_reduced_motion
      | `ch_rtt
      | `ch_save_data
      | `ch_ua
      | `ch_ua_arch
      | `ch_ua_bitness
      | `ch_ua_platform
      | `ch_ua_model
      | `ch_ua_mobile
      | `ch_ua_form_factor
      | `ch_ua_full_version
      | `ch_ua_full_version_list
      | `ch_ua_platform_version
      | `ch_ua_wow64
      | `ch_viewport_height
      | `ch_viewport_width
      | `ch_width
      | `clipboard_read
      | `clipboard_write
      | `compute_pressure
      | `cross_origin_isolated
      | `direct_sockets
      | `display_capture
      | `document_domain
      | `encrypted_media
      | `execution_while_out_of_viewport
      | `execution_while_not_rendered
      | `focus_without_user_activation
      | `fullscreen
      | `frobulate
      | `gamepad
      | `geolocation
      | `gyroscope
      | `hid
      | `identity_credentials_get
      | `idle_detection
      | `interest_cohort
      | `join_ad_interest_group
      | `keyboard_map
      | `local_fonts
      | `magnetometer
      | `microphone
      | `midi
      | `otp_credentials
      | `payment
      | `picture_in_picture
      | `private_aggregation
      | `private_state_token_issuance
      | `private_state_token_redemption
      | `publickey_credentials_get
      | `run_ad_auction
      | `screen_wake_lock
      | `serial
      | `shared_autofill
      | `shared_storage
      | `shared_storage_select_url
      | `smart_card
      | `storage_access
      | `sync_xhr
      | `unload
      | `usb
      | `vertical_scroll
      | `web_share
      | `window_management
      | `window_placement
      | `xr_spatial_tracking ]

    let _permissionspolicyfeature_of_yojson = function
      | `String "accelerometer" -> `accelerometer
      | `String "ambient-light-sensor" -> `ambient_light_sensor
      | `String "attribution-reporting" -> `attribution_reporting
      | `String "autoplay" -> `autoplay
      | `String "bluetooth" -> `bluetooth
      | `String "browsing-topics" -> `browsing_topics
      | `String "camera" -> `camera
      | `String "ch-dpr" -> `ch_dpr
      | `String "ch-device-memory" -> `ch_device_memory
      | `String "ch-downlink" -> `ch_downlink
      | `String "ch-ect" -> `ch_ect
      | `String "ch-prefers-color-scheme" -> `ch_prefers_color_scheme
      | `String "ch-prefers-reduced-motion" -> `ch_prefers_reduced_motion
      | `String "ch-rtt" -> `ch_rtt
      | `String "ch-save-data" -> `ch_save_data
      | `String "ch-ua" -> `ch_ua
      | `String "ch-ua-arch" -> `ch_ua_arch
      | `String "ch-ua-bitness" -> `ch_ua_bitness
      | `String "ch-ua-platform" -> `ch_ua_platform
      | `String "ch-ua-model" -> `ch_ua_model
      | `String "ch-ua-mobile" -> `ch_ua_mobile
      | `String "ch-ua-form-factor" -> `ch_ua_form_factor
      | `String "ch-ua-full-version" -> `ch_ua_full_version
      | `String "ch-ua-full-version-list" -> `ch_ua_full_version_list
      | `String "ch-ua-platform-version" -> `ch_ua_platform_version
      | `String "ch-ua-wow64" -> `ch_ua_wow64
      | `String "ch-viewport-height" -> `ch_viewport_height
      | `String "ch-viewport-width" -> `ch_viewport_width
      | `String "ch-width" -> `ch_width
      | `String "clipboard-read" -> `clipboard_read
      | `String "clipboard-write" -> `clipboard_write
      | `String "compute-pressure" -> `compute_pressure
      | `String "cross-origin-isolated" -> `cross_origin_isolated
      | `String "direct-sockets" -> `direct_sockets
      | `String "display-capture" -> `display_capture
      | `String "document-domain" -> `document_domain
      | `String "encrypted-media" -> `encrypted_media
      | `String "execution-while-out-of-viewport" ->
          `execution_while_out_of_viewport
      | `String "execution-while-not-rendered" -> `execution_while_not_rendered
      | `String "focus-without-user-activation" ->
          `focus_without_user_activation
      | `String "fullscreen" -> `fullscreen
      | `String "frobulate" -> `frobulate
      | `String "gamepad" -> `gamepad
      | `String "geolocation" -> `geolocation
      | `String "gyroscope" -> `gyroscope
      | `String "hid" -> `hid
      | `String "identity-credentials-get" -> `identity_credentials_get
      | `String "idle-detection" -> `idle_detection
      | `String "interest-cohort" -> `interest_cohort
      | `String "join-ad-interest-group" -> `join_ad_interest_group
      | `String "keyboard-map" -> `keyboard_map
      | `String "local-fonts" -> `local_fonts
      | `String "magnetometer" -> `magnetometer
      | `String "microphone" -> `microphone
      | `String "midi" -> `midi
      | `String "otp-credentials" -> `otp_credentials
      | `String "payment" -> `payment
      | `String "picture-in-picture" -> `picture_in_picture
      | `String "private-aggregation" -> `private_aggregation
      | `String "private-state-token-issuance" -> `private_state_token_issuance
      | `String "private-state-token-redemption" ->
          `private_state_token_redemption
      | `String "publickey-credentials-get" -> `publickey_credentials_get
      | `String "run-ad-auction" -> `run_ad_auction
      | `String "screen-wake-lock" -> `screen_wake_lock
      | `String "serial" -> `serial
      | `String "shared-autofill" -> `shared_autofill
      | `String "shared-storage" -> `shared_storage
      | `String "shared-storage-select-url" -> `shared_storage_select_url
      | `String "smart-card" -> `smart_card
      | `String "storage-access" -> `storage_access
      | `String "sync-xhr" -> `sync_xhr
      | `String "unload" -> `unload
      | `String "usb" -> `usb
      | `String "vertical-scroll" -> `vertical_scroll
      | `String "web-share" -> `web_share
      | `String "window-management" -> `window_management
      | `String "window-placement" -> `window_placement
      | `String "xr-spatial-tracking" -> `xr_spatial_tracking
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__permissionspolicyfeature = function
      | `accelerometer -> `String "accelerometer"
      | `ambient_light_sensor -> `String "ambient-light-sensor"
      | `attribution_reporting -> `String "attribution-reporting"
      | `autoplay -> `String "autoplay"
      | `bluetooth -> `String "bluetooth"
      | `browsing_topics -> `String "browsing-topics"
      | `camera -> `String "camera"
      | `ch_dpr -> `String "ch-dpr"
      | `ch_device_memory -> `String "ch-device-memory"
      | `ch_downlink -> `String "ch-downlink"
      | `ch_ect -> `String "ch-ect"
      | `ch_prefers_color_scheme -> `String "ch-prefers-color-scheme"
      | `ch_prefers_reduced_motion -> `String "ch-prefers-reduced-motion"
      | `ch_rtt -> `String "ch-rtt"
      | `ch_save_data -> `String "ch-save-data"
      | `ch_ua -> `String "ch-ua"
      | `ch_ua_arch -> `String "ch-ua-arch"
      | `ch_ua_bitness -> `String "ch-ua-bitness"
      | `ch_ua_platform -> `String "ch-ua-platform"
      | `ch_ua_model -> `String "ch-ua-model"
      | `ch_ua_mobile -> `String "ch-ua-mobile"
      | `ch_ua_form_factor -> `String "ch-ua-form-factor"
      | `ch_ua_full_version -> `String "ch-ua-full-version"
      | `ch_ua_full_version_list -> `String "ch-ua-full-version-list"
      | `ch_ua_platform_version -> `String "ch-ua-platform-version"
      | `ch_ua_wow64 -> `String "ch-ua-wow64"
      | `ch_viewport_height -> `String "ch-viewport-height"
      | `ch_viewport_width -> `String "ch-viewport-width"
      | `ch_width -> `String "ch-width"
      | `clipboard_read -> `String "clipboard-read"
      | `clipboard_write -> `String "clipboard-write"
      | `compute_pressure -> `String "compute-pressure"
      | `cross_origin_isolated -> `String "cross-origin-isolated"
      | `direct_sockets -> `String "direct-sockets"
      | `display_capture -> `String "display-capture"
      | `document_domain -> `String "document-domain"
      | `encrypted_media -> `String "encrypted-media"
      | `execution_while_out_of_viewport ->
          `String "execution-while-out-of-viewport"
      | `execution_while_not_rendered -> `String "execution-while-not-rendered"
      | `focus_without_user_activation ->
          `String "focus-without-user-activation"
      | `fullscreen -> `String "fullscreen"
      | `frobulate -> `String "frobulate"
      | `gamepad -> `String "gamepad"
      | `geolocation -> `String "geolocation"
      | `gyroscope -> `String "gyroscope"
      | `hid -> `String "hid"
      | `identity_credentials_get -> `String "identity-credentials-get"
      | `idle_detection -> `String "idle-detection"
      | `interest_cohort -> `String "interest-cohort"
      | `join_ad_interest_group -> `String "join-ad-interest-group"
      | `keyboard_map -> `String "keyboard-map"
      | `local_fonts -> `String "local-fonts"
      | `magnetometer -> `String "magnetometer"
      | `microphone -> `String "microphone"
      | `midi -> `String "midi"
      | `otp_credentials -> `String "otp-credentials"
      | `payment -> `String "payment"
      | `picture_in_picture -> `String "picture-in-picture"
      | `private_aggregation -> `String "private-aggregation"
      | `private_state_token_issuance -> `String "private-state-token-issuance"
      | `private_state_token_redemption ->
          `String "private-state-token-redemption"
      | `publickey_credentials_get -> `String "publickey-credentials-get"
      | `run_ad_auction -> `String "run-ad-auction"
      | `screen_wake_lock -> `String "screen-wake-lock"
      | `serial -> `String "serial"
      | `shared_autofill -> `String "shared-autofill"
      | `shared_storage -> `String "shared-storage"
      | `shared_storage_select_url -> `String "shared-storage-select-url"
      | `smart_card -> `String "smart-card"
      | `storage_access -> `String "storage-access"
      | `sync_xhr -> `String "sync-xhr"
      | `unload -> `String "unload"
      | `usb -> `String "usb"
      | `vertical_scroll -> `String "vertical-scroll"
      | `web_share -> `String "web-share"
      | `window_management -> `String "window-management"
      | `window_placement -> `String "window-placement"
      | `xr_spatial_tracking -> `String "xr-spatial-tracking"

    type t = _permissionspolicyfeature
    [@@deriving yojson]
    [@@ocaml.doc
      "All Permissions Policy features. This enum should match the one defined\n\
       in \
       third_party/blink/renderer/core/permissions_policy/permissions_policy_features.json5."]
  end

  and PermissionsPolicyBlockReason : sig
    type _permissionspolicyblockreason =
      [ `Header | `IframeAttribute | `InFencedFrameTree | `InIsolatedApp ]

    val _permissionspolicyblockreason_of_yojson :
      Yojson.Basic.t -> _permissionspolicyblockreason

    val yojson_of__permissionspolicyblockreason :
      _permissionspolicyblockreason -> Yojson.Basic.t

    type t = _permissionspolicyblockreason
    [@@deriving yojson]
    [@@ocaml.doc "Reason for a permissions policy feature to be disabled."]
  end = struct
    type _permissionspolicyblockreason =
      [ `Header | `IframeAttribute | `InFencedFrameTree | `InIsolatedApp ]

    let _permissionspolicyblockreason_of_yojson = function
      | `String "Header" -> `Header
      | `String "IframeAttribute" -> `IframeAttribute
      | `String "InFencedFrameTree" -> `InFencedFrameTree
      | `String "InIsolatedApp" -> `InIsolatedApp
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__permissionspolicyblockreason = function
      | `Header -> `String "Header"
      | `IframeAttribute -> `String "IframeAttribute"
      | `InFencedFrameTree -> `String "InFencedFrameTree"
      | `InIsolatedApp -> `String "InIsolatedApp"

    type t = _permissionspolicyblockreason
    [@@deriving yojson]
    [@@ocaml.doc "Reason for a permissions policy feature to be disabled."]
  end

  and PermissionsPolicyBlockLocator : sig
    type t = {
      frameId : FrameId.t;
          [@key "frameId"] [@ocaml.doc "No description provided"]
      blockReason : PermissionsPolicyBlockReason.t;
          [@key "blockReason"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      frameId : FrameId.t;
          [@key "frameId"] [@ocaml.doc "No description provided"]
      blockReason : PermissionsPolicyBlockReason.t;
          [@key "blockReason"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PermissionsPolicyFeatureState : sig
    type t = {
      feature : PermissionsPolicyFeature.t;
          [@key "feature"] [@ocaml.doc "No description provided"]
      allowed : bool; [@key "allowed"] [@ocaml.doc "No description provided"]
      locator : PermissionsPolicyBlockLocator.t option;
          [@key "locator"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      feature : PermissionsPolicyFeature.t;
          [@key "feature"] [@ocaml.doc "No description provided"]
      allowed : bool; [@key "allowed"] [@ocaml.doc "No description provided"]
      locator : PermissionsPolicyBlockLocator.t option;
          [@key "locator"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and OriginTrialTokenStatus : sig
    type _origintrialtokenstatus =
      [ `Success
      | `NotSupported
      | `Insecure
      | `Expired
      | `WrongOrigin
      | `InvalidSignature
      | `Malformed
      | `WrongVersion
      | `FeatureDisabled
      | `TokenDisabled
      | `FeatureDisabledForUser
      | `UnknownTrial ]

    val _origintrialtokenstatus_of_yojson :
      Yojson.Basic.t -> _origintrialtokenstatus

    val yojson_of__origintrialtokenstatus :
      _origintrialtokenstatus -> Yojson.Basic.t

    type t = _origintrialtokenstatus
    [@@deriving yojson]
    [@@ocaml.doc
      "Origin Trial(https://www.chromium.org/blink/origin-trials) support.\n\
       Status for an Origin Trial token."]
  end = struct
    type _origintrialtokenstatus =
      [ `Success
      | `NotSupported
      | `Insecure
      | `Expired
      | `WrongOrigin
      | `InvalidSignature
      | `Malformed
      | `WrongVersion
      | `FeatureDisabled
      | `TokenDisabled
      | `FeatureDisabledForUser
      | `UnknownTrial ]

    let _origintrialtokenstatus_of_yojson = function
      | `String "Success" -> `Success
      | `String "NotSupported" -> `NotSupported
      | `String "Insecure" -> `Insecure
      | `String "Expired" -> `Expired
      | `String "WrongOrigin" -> `WrongOrigin
      | `String "InvalidSignature" -> `InvalidSignature
      | `String "Malformed" -> `Malformed
      | `String "WrongVersion" -> `WrongVersion
      | `String "FeatureDisabled" -> `FeatureDisabled
      | `String "TokenDisabled" -> `TokenDisabled
      | `String "FeatureDisabledForUser" -> `FeatureDisabledForUser
      | `String "UnknownTrial" -> `UnknownTrial
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__origintrialtokenstatus = function
      | `Success -> `String "Success"
      | `NotSupported -> `String "NotSupported"
      | `Insecure -> `String "Insecure"
      | `Expired -> `String "Expired"
      | `WrongOrigin -> `String "WrongOrigin"
      | `InvalidSignature -> `String "InvalidSignature"
      | `Malformed -> `String "Malformed"
      | `WrongVersion -> `String "WrongVersion"
      | `FeatureDisabled -> `String "FeatureDisabled"
      | `TokenDisabled -> `String "TokenDisabled"
      | `FeatureDisabledForUser -> `String "FeatureDisabledForUser"
      | `UnknownTrial -> `String "UnknownTrial"

    type t = _origintrialtokenstatus
    [@@deriving yojson]
    [@@ocaml.doc
      "Origin Trial(https://www.chromium.org/blink/origin-trials) support.\n\
       Status for an Origin Trial token."]
  end

  and OriginTrialStatus : sig
    type _origintrialstatus =
      [ `Enabled | `ValidTokenNotProvided | `OSNotSupported | `TrialNotAllowed ]

    val _origintrialstatus_of_yojson : Yojson.Basic.t -> _origintrialstatus
    val yojson_of__origintrialstatus : _origintrialstatus -> Yojson.Basic.t

    type t = _origintrialstatus
    [@@deriving yojson] [@@ocaml.doc "Status for an Origin Trial."]
  end = struct
    type _origintrialstatus =
      [ `Enabled | `ValidTokenNotProvided | `OSNotSupported | `TrialNotAllowed ]

    let _origintrialstatus_of_yojson = function
      | `String "Enabled" -> `Enabled
      | `String "ValidTokenNotProvided" -> `ValidTokenNotProvided
      | `String "OSNotSupported" -> `OSNotSupported
      | `String "TrialNotAllowed" -> `TrialNotAllowed
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__origintrialstatus = function
      | `Enabled -> `String "Enabled"
      | `ValidTokenNotProvided -> `String "ValidTokenNotProvided"
      | `OSNotSupported -> `String "OSNotSupported"
      | `TrialNotAllowed -> `String "TrialNotAllowed"

    type t = _origintrialstatus
    [@@deriving yojson] [@@ocaml.doc "Status for an Origin Trial."]
  end

  and OriginTrialUsageRestriction : sig
    type _origintrialusagerestriction = [ `None | `Subset ]

    val _origintrialusagerestriction_of_yojson :
      Yojson.Basic.t -> _origintrialusagerestriction

    val yojson_of__origintrialusagerestriction :
      _origintrialusagerestriction -> Yojson.Basic.t

    type t = _origintrialusagerestriction
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _origintrialusagerestriction = [ `None | `Subset ]

    let _origintrialusagerestriction_of_yojson = function
      | `String "None" -> `None
      | `String "Subset" -> `Subset
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__origintrialusagerestriction = function
      | `None -> `String "None"
      | `Subset -> `String "Subset"

    type t = _origintrialusagerestriction
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and OriginTrialToken : sig
    type t = {
      origin : string; [@key "origin"] [@ocaml.doc "No description provided"]
      matchSubDomains : bool;
          [@key "matchSubDomains"] [@ocaml.doc "No description provided"]
      trialName : string;
          [@key "trialName"] [@ocaml.doc "No description provided"]
      expiryTime : Network.TimeSinceEpoch.t;
          [@key "expiryTime"] [@ocaml.doc "No description provided"]
      isThirdParty : bool;
          [@key "isThirdParty"] [@ocaml.doc "No description provided"]
      usageRestriction : OriginTrialUsageRestriction.t;
          [@key "usageRestriction"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      origin : string; [@key "origin"] [@ocaml.doc "No description provided"]
      matchSubDomains : bool;
          [@key "matchSubDomains"] [@ocaml.doc "No description provided"]
      trialName : string;
          [@key "trialName"] [@ocaml.doc "No description provided"]
      expiryTime : Network.TimeSinceEpoch.t;
          [@key "expiryTime"] [@ocaml.doc "No description provided"]
      isThirdParty : bool;
          [@key "isThirdParty"] [@ocaml.doc "No description provided"]
      usageRestriction : OriginTrialUsageRestriction.t;
          [@key "usageRestriction"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and OriginTrialTokenWithStatus : sig
    type t = {
      rawTokenText : string;
          [@key "rawTokenText"] [@ocaml.doc "No description provided"]
      parsedToken : OriginTrialToken.t option;
          [@key "parsedToken"]
          [@yojson.option]
          [@ocaml.doc
            "`parsedToken` is present only when the token is extractable and\n\
             parsable."]
      status : OriginTrialTokenStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      rawTokenText : string;
          [@key "rawTokenText"] [@ocaml.doc "No description provided"]
      parsedToken : OriginTrialToken.t option;
          [@key "parsedToken"]
          [@yojson.option]
          [@ocaml.doc
            "`parsedToken` is present only when the token is extractable and\n\
             parsable."]
      status : OriginTrialTokenStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and OriginTrial : sig
    type t = {
      trialName : string;
          [@key "trialName"] [@ocaml.doc "No description provided"]
      status : OriginTrialStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
      tokensWithStatus : OriginTrialTokenWithStatus.t list;
          [@key "tokensWithStatus"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      trialName : string;
          [@key "trialName"] [@ocaml.doc "No description provided"]
      status : OriginTrialStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
      tokensWithStatus : OriginTrialTokenWithStatus.t list;
          [@key "tokensWithStatus"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Frame : sig
    type t = {
      id : FrameId.t; [@key "id"] [@ocaml.doc "Frame unique identifier."]
      parentId : FrameId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc "Parent frame identifier."]
      loaderId : Network.LoaderId.t;
          [@key "loaderId"]
          [@ocaml.doc "Identifier of the loader associated with this frame."]
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "Frame's name as specified in the tag."]
      url : string;
          [@key "url"] [@ocaml.doc "Frame document's URL without fragment."]
      urlFragment : string option;
          [@key "urlFragment"]
          [@yojson.option]
          [@ocaml.doc "Frame document's URL fragment including the '#'."]
      domainAndRegistry : string;
          [@key "domainAndRegistry"]
          [@ocaml.doc
            "Frame document's registered domain, taking the public suffixes \
             list into account.\n\
             Extracted from the Frame's url.\n\
             Example URLs: http://www.google.com/file.html -> \"google.com\"\n\
            \              http://a.b.co.uk/file.html      -> \"b.co.uk\""]
      securityOrigin : string;
          [@key "securityOrigin"]
          [@ocaml.doc "Frame document's security origin."]
      mimeType : string;
          [@key "mimeType"]
          [@ocaml.doc "Frame document's mimeType as determined by the browser."]
      unreachableUrl : string option;
          [@key "unreachableUrl"]
          [@yojson.option]
          [@ocaml.doc
            "If the frame failed to load, this contains the URL that could not \
             be loaded. Note that unlike url above, this URL may contain a \
             fragment."]
      adFrameStatus : AdFrameStatus.t option;
          [@key "adFrameStatus"]
          [@yojson.option]
          [@ocaml.doc
            "Indicates whether this frame was tagged as an ad and why."]
      secureContextType : SecureContextType.t;
          [@key "secureContextType"]
          [@ocaml.doc
            "Indicates whether the main document is a secure context and \
             explains why that is the case."]
      crossOriginIsolatedContextType : CrossOriginIsolatedContextType.t;
          [@key "crossOriginIsolatedContextType"]
          [@ocaml.doc
            "Indicates whether this is a cross origin isolated context."]
      gatedAPIFeatures : GatedAPIFeatures.t list;
          [@key "gatedAPIFeatures"]
          [@ocaml.doc "Indicated which gated APIs / features are available."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the Frame on the page."]
  end = struct
    type t = {
      id : FrameId.t; [@key "id"] [@ocaml.doc "Frame unique identifier."]
      parentId : FrameId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc "Parent frame identifier."]
      loaderId : Network.LoaderId.t;
          [@key "loaderId"]
          [@ocaml.doc "Identifier of the loader associated with this frame."]
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc "Frame's name as specified in the tag."]
      url : string;
          [@key "url"] [@ocaml.doc "Frame document's URL without fragment."]
      urlFragment : string option;
          [@key "urlFragment"]
          [@yojson.option]
          [@ocaml.doc "Frame document's URL fragment including the '#'."]
      domainAndRegistry : string;
          [@key "domainAndRegistry"]
          [@ocaml.doc
            "Frame document's registered domain, taking the public suffixes \
             list into account.\n\
             Extracted from the Frame's url.\n\
             Example URLs: http://www.google.com/file.html -> \"google.com\"\n\
            \              http://a.b.co.uk/file.html      -> \"b.co.uk\""]
      securityOrigin : string;
          [@key "securityOrigin"]
          [@ocaml.doc "Frame document's security origin."]
      mimeType : string;
          [@key "mimeType"]
          [@ocaml.doc "Frame document's mimeType as determined by the browser."]
      unreachableUrl : string option;
          [@key "unreachableUrl"]
          [@yojson.option]
          [@ocaml.doc
            "If the frame failed to load, this contains the URL that could not \
             be loaded. Note that unlike url above, this URL may contain a \
             fragment."]
      adFrameStatus : AdFrameStatus.t option;
          [@key "adFrameStatus"]
          [@yojson.option]
          [@ocaml.doc
            "Indicates whether this frame was tagged as an ad and why."]
      secureContextType : SecureContextType.t;
          [@key "secureContextType"]
          [@ocaml.doc
            "Indicates whether the main document is a secure context and \
             explains why that is the case."]
      crossOriginIsolatedContextType : CrossOriginIsolatedContextType.t;
          [@key "crossOriginIsolatedContextType"]
          [@ocaml.doc
            "Indicates whether this is a cross origin isolated context."]
      gatedAPIFeatures : GatedAPIFeatures.t list;
          [@key "gatedAPIFeatures"]
          [@ocaml.doc "Indicated which gated APIs / features are available."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the Frame on the page."]
  end

  and FrameResource : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "Resource URL."]
      type_ : Network.ResourceType.t;
          [@key "type"] [@ocaml.doc "Type of this resource."]
      mimeType : string;
          [@key "mimeType"]
          [@ocaml.doc "Resource mimeType as determined by the browser."]
      lastModified : Network.TimeSinceEpoch.t option;
          [@key "lastModified"]
          [@yojson.option]
          [@ocaml.doc "last-modified timestamp as reported by server."]
      contentSize : number option;
          [@key "contentSize"]
          [@yojson.option]
          [@ocaml.doc "Resource content size."]
      failed : bool option;
          [@key "failed"]
          [@yojson.option]
          [@ocaml.doc "True if the resource failed to load."]
      canceled : bool option;
          [@key "canceled"]
          [@yojson.option]
          [@ocaml.doc "True if the resource was canceled during loading."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about the Resource on the page."]
  end = struct
    type t = {
      url : string; [@key "url"] [@ocaml.doc "Resource URL."]
      type_ : Network.ResourceType.t;
          [@key "type"] [@ocaml.doc "Type of this resource."]
      mimeType : string;
          [@key "mimeType"]
          [@ocaml.doc "Resource mimeType as determined by the browser."]
      lastModified : Network.TimeSinceEpoch.t option;
          [@key "lastModified"]
          [@yojson.option]
          [@ocaml.doc "last-modified timestamp as reported by server."]
      contentSize : number option;
          [@key "contentSize"]
          [@yojson.option]
          [@ocaml.doc "Resource content size."]
      failed : bool option;
          [@key "failed"]
          [@yojson.option]
          [@ocaml.doc "True if the resource failed to load."]
      canceled : bool option;
          [@key "canceled"]
          [@yojson.option]
          [@ocaml.doc "True if the resource was canceled during loading."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about the Resource on the page."]
  end

  and FrameResourceTree : sig
    type t = {
      frame : Frame.t;
          [@key "frame"] [@ocaml.doc "Frame information for this tree item."]
      childFrames : FrameResourceTree.t list option;
          [@key "childFrames"] [@yojson.option] [@ocaml.doc "Child frames."]
      resources : FrameResource.t list;
          [@key "resources"] [@ocaml.doc "Information about frame resources."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about the Frame hierarchy along with their cached resources."]
  end = struct
    type t = {
      frame : Frame.t;
          [@key "frame"] [@ocaml.doc "Frame information for this tree item."]
      childFrames : FrameResourceTree.t list option;
          [@key "childFrames"] [@yojson.option] [@ocaml.doc "Child frames."]
      resources : FrameResource.t list;
          [@key "resources"] [@ocaml.doc "Information about frame resources."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Information about the Frame hierarchy along with their cached resources."]
  end

  and FrameTree : sig
    type t = {
      frame : Frame.t;
          [@key "frame"] [@ocaml.doc "Frame information for this tree item."]
      childFrames : FrameTree.t list option;
          [@key "childFrames"] [@yojson.option] [@ocaml.doc "Child frames."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the Frame hierarchy."]
  end = struct
    type t = {
      frame : Frame.t;
          [@key "frame"] [@ocaml.doc "Frame information for this tree item."]
      childFrames : FrameTree.t list option;
          [@key "childFrames"] [@yojson.option] [@ocaml.doc "Child frames."]
    }
    [@@deriving yojson] [@@ocaml.doc "Information about the Frame hierarchy."]
  end

  and ScriptIdentifier : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique script identifier."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique script identifier."]
  end

  and TransitionType : sig
    type _transitiontype =
      [ `link
      | `typed
      | `address_bar
      | `auto_bookmark
      | `auto_subframe
      | `manual_subframe
      | `generated
      | `auto_toplevel
      | `form_submit
      | `reload
      | `keyword
      | `keyword_generated
      | `other ]

    val _transitiontype_of_yojson : Yojson.Basic.t -> _transitiontype
    val yojson_of__transitiontype : _transitiontype -> Yojson.Basic.t

    type t = _transitiontype
    [@@deriving yojson] [@@ocaml.doc "Transition type."]
  end = struct
    type _transitiontype =
      [ `link
      | `typed
      | `address_bar
      | `auto_bookmark
      | `auto_subframe
      | `manual_subframe
      | `generated
      | `auto_toplevel
      | `form_submit
      | `reload
      | `keyword
      | `keyword_generated
      | `other ]

    let _transitiontype_of_yojson = function
      | `String "link" -> `link
      | `String "typed" -> `typed
      | `String "address_bar" -> `address_bar
      | `String "auto_bookmark" -> `auto_bookmark
      | `String "auto_subframe" -> `auto_subframe
      | `String "manual_subframe" -> `manual_subframe
      | `String "generated" -> `generated
      | `String "auto_toplevel" -> `auto_toplevel
      | `String "form_submit" -> `form_submit
      | `String "reload" -> `reload
      | `String "keyword" -> `keyword
      | `String "keyword_generated" -> `keyword_generated
      | `String "other" -> `other
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__transitiontype = function
      | `link -> `String "link"
      | `typed -> `String "typed"
      | `address_bar -> `String "address_bar"
      | `auto_bookmark -> `String "auto_bookmark"
      | `auto_subframe -> `String "auto_subframe"
      | `manual_subframe -> `String "manual_subframe"
      | `generated -> `String "generated"
      | `auto_toplevel -> `String "auto_toplevel"
      | `form_submit -> `String "form_submit"
      | `reload -> `String "reload"
      | `keyword -> `String "keyword"
      | `keyword_generated -> `String "keyword_generated"
      | `other -> `String "other"

    type t = _transitiontype
    [@@deriving yojson] [@@ocaml.doc "Transition type."]
  end

  and NavigationEntry : sig
    type t = {
      id : number;
          [@key "id"] [@ocaml.doc "Unique id of the navigation history entry."]
      url : string;
          [@key "url"] [@ocaml.doc "URL of the navigation history entry."]
      userTypedURL : string;
          [@key "userTypedURL"]
          [@ocaml.doc "URL that the user typed in the url bar."]
      title : string;
          [@key "title"] [@ocaml.doc "Title of the navigation history entry."]
      transitionType : TransitionType.t;
          [@key "transitionType"] [@ocaml.doc "Transition type."]
    }
    [@@deriving yojson] [@@ocaml.doc "Navigation history entry."]
  end = struct
    type t = {
      id : number;
          [@key "id"] [@ocaml.doc "Unique id of the navigation history entry."]
      url : string;
          [@key "url"] [@ocaml.doc "URL of the navigation history entry."]
      userTypedURL : string;
          [@key "userTypedURL"]
          [@ocaml.doc "URL that the user typed in the url bar."]
      title : string;
          [@key "title"] [@ocaml.doc "Title of the navigation history entry."]
      transitionType : TransitionType.t;
          [@key "transitionType"] [@ocaml.doc "Transition type."]
    }
    [@@deriving yojson] [@@ocaml.doc "Navigation history entry."]
  end

  and ScreencastFrameMetadata : sig
    type t = {
      offsetTop : number; [@key "offsetTop"] [@ocaml.doc "Top offset in DIP."]
      pageScaleFactor : number;
          [@key "pageScaleFactor"] [@ocaml.doc "Page scale factor."]
      deviceWidth : number;
          [@key "deviceWidth"] [@ocaml.doc "Device screen width in DIP."]
      deviceHeight : number;
          [@key "deviceHeight"] [@ocaml.doc "Device screen height in DIP."]
      scrollOffsetX : number;
          [@key "scrollOffsetX"]
          [@ocaml.doc "Position of horizontal scroll in CSS pixels."]
      scrollOffsetY : number;
          [@key "scrollOffsetY"]
          [@ocaml.doc "Position of vertical scroll in CSS pixels."]
      timestamp : Network.TimeSinceEpoch.t option;
          [@key "timestamp"]
          [@yojson.option]
          [@ocaml.doc "Frame swap timestamp."]
    }
    [@@deriving yojson] [@@ocaml.doc "Screencast frame metadata."]
  end = struct
    type t = {
      offsetTop : number; [@key "offsetTop"] [@ocaml.doc "Top offset in DIP."]
      pageScaleFactor : number;
          [@key "pageScaleFactor"] [@ocaml.doc "Page scale factor."]
      deviceWidth : number;
          [@key "deviceWidth"] [@ocaml.doc "Device screen width in DIP."]
      deviceHeight : number;
          [@key "deviceHeight"] [@ocaml.doc "Device screen height in DIP."]
      scrollOffsetX : number;
          [@key "scrollOffsetX"]
          [@ocaml.doc "Position of horizontal scroll in CSS pixels."]
      scrollOffsetY : number;
          [@key "scrollOffsetY"]
          [@ocaml.doc "Position of vertical scroll in CSS pixels."]
      timestamp : Network.TimeSinceEpoch.t option;
          [@key "timestamp"]
          [@yojson.option]
          [@ocaml.doc "Frame swap timestamp."]
    }
    [@@deriving yojson] [@@ocaml.doc "Screencast frame metadata."]
  end

  and DialogType : sig
    type _dialogtype = [ `alert | `confirm | `prompt | `beforeunload ]

    val _dialogtype_of_yojson : Yojson.Basic.t -> _dialogtype
    val yojson_of__dialogtype : _dialogtype -> Yojson.Basic.t

    type t = _dialogtype
    [@@deriving yojson] [@@ocaml.doc "Javascript dialog type."]
  end = struct
    type _dialogtype = [ `alert | `confirm | `prompt | `beforeunload ]

    let _dialogtype_of_yojson = function
      | `String "alert" -> `alert
      | `String "confirm" -> `confirm
      | `String "prompt" -> `prompt
      | `String "beforeunload" -> `beforeunload
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__dialogtype = function
      | `alert -> `String "alert"
      | `confirm -> `String "confirm"
      | `prompt -> `String "prompt"
      | `beforeunload -> `String "beforeunload"

    type t = _dialogtype
    [@@deriving yojson] [@@ocaml.doc "Javascript dialog type."]
  end

  and AppManifestError : sig
    type t = {
      message : string; [@key "message"] [@ocaml.doc "Error message."]
      critical : number;
          [@key "critical"]
          [@ocaml.doc "If criticial, this is a non-recoverable parse error."]
      line : number; [@key "line"] [@ocaml.doc "Error line."]
      column : number; [@key "column"] [@ocaml.doc "Error column."]
    }
    [@@deriving yojson] [@@ocaml.doc "Error while paring app manifest."]
  end = struct
    type t = {
      message : string; [@key "message"] [@ocaml.doc "Error message."]
      critical : number;
          [@key "critical"]
          [@ocaml.doc "If criticial, this is a non-recoverable parse error."]
      line : number; [@key "line"] [@ocaml.doc "Error line."]
      column : number; [@key "column"] [@ocaml.doc "Error column."]
    }
    [@@deriving yojson] [@@ocaml.doc "Error while paring app manifest."]
  end

  and AppManifestParsedProperties : sig
    type t = {
      scope : string; [@key "scope"] [@ocaml.doc "Computed scope value"]
    }
    [@@deriving yojson] [@@ocaml.doc "Parsed app manifest properties."]
  end = struct
    type t = {
      scope : string; [@key "scope"] [@ocaml.doc "Computed scope value"]
    }
    [@@deriving yojson] [@@ocaml.doc "Parsed app manifest properties."]
  end

  and LayoutViewport : sig
    type t = {
      pageX : number;
          [@key "pageX"]
          [@ocaml.doc
            "Horizontal offset relative to the document (CSS pixels)."]
      pageY : number;
          [@key "pageY"]
          [@ocaml.doc "Vertical offset relative to the document (CSS pixels)."]
      clientWidth : number;
          [@key "clientWidth"]
          [@ocaml.doc "Width (CSS pixels), excludes scrollbar if present."]
      clientHeight : number;
          [@key "clientHeight"]
          [@ocaml.doc "Height (CSS pixels), excludes scrollbar if present."]
    }
    [@@deriving yojson] [@@ocaml.doc "Layout viewport position and dimensions."]
  end = struct
    type t = {
      pageX : number;
          [@key "pageX"]
          [@ocaml.doc
            "Horizontal offset relative to the document (CSS pixels)."]
      pageY : number;
          [@key "pageY"]
          [@ocaml.doc "Vertical offset relative to the document (CSS pixels)."]
      clientWidth : number;
          [@key "clientWidth"]
          [@ocaml.doc "Width (CSS pixels), excludes scrollbar if present."]
      clientHeight : number;
          [@key "clientHeight"]
          [@ocaml.doc "Height (CSS pixels), excludes scrollbar if present."]
    }
    [@@deriving yojson] [@@ocaml.doc "Layout viewport position and dimensions."]
  end

  and VisualViewport : sig
    type t = {
      offsetX : number;
          [@key "offsetX"]
          [@ocaml.doc
            "Horizontal offset relative to the layout viewport (CSS pixels)."]
      offsetY : number;
          [@key "offsetY"]
          [@ocaml.doc
            "Vertical offset relative to the layout viewport (CSS pixels)."]
      pageX : number;
          [@key "pageX"]
          [@ocaml.doc
            "Horizontal offset relative to the document (CSS pixels)."]
      pageY : number;
          [@key "pageY"]
          [@ocaml.doc "Vertical offset relative to the document (CSS pixels)."]
      clientWidth : number;
          [@key "clientWidth"]
          [@ocaml.doc "Width (CSS pixels), excludes scrollbar if present."]
      clientHeight : number;
          [@key "clientHeight"]
          [@ocaml.doc "Height (CSS pixels), excludes scrollbar if present."]
      scale : number;
          [@key "scale"]
          [@ocaml.doc
            "Scale relative to the ideal viewport (size at width=device-width)."]
      zoom : number option;
          [@key "zoom"]
          [@yojson.option]
          [@ocaml.doc
            "Page zoom factor (CSS to device independent pixels ratio)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Visual viewport position, dimensions, and scale."]
  end = struct
    type t = {
      offsetX : number;
          [@key "offsetX"]
          [@ocaml.doc
            "Horizontal offset relative to the layout viewport (CSS pixels)."]
      offsetY : number;
          [@key "offsetY"]
          [@ocaml.doc
            "Vertical offset relative to the layout viewport (CSS pixels)."]
      pageX : number;
          [@key "pageX"]
          [@ocaml.doc
            "Horizontal offset relative to the document (CSS pixels)."]
      pageY : number;
          [@key "pageY"]
          [@ocaml.doc "Vertical offset relative to the document (CSS pixels)."]
      clientWidth : number;
          [@key "clientWidth"]
          [@ocaml.doc "Width (CSS pixels), excludes scrollbar if present."]
      clientHeight : number;
          [@key "clientHeight"]
          [@ocaml.doc "Height (CSS pixels), excludes scrollbar if present."]
      scale : number;
          [@key "scale"]
          [@ocaml.doc
            "Scale relative to the ideal viewport (size at width=device-width)."]
      zoom : number option;
          [@key "zoom"]
          [@yojson.option]
          [@ocaml.doc
            "Page zoom factor (CSS to device independent pixels ratio)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Visual viewport position, dimensions, and scale."]
  end

  and Viewport : sig
    type t = {
      x : number;
          [@key "x"] [@ocaml.doc "X offset in device independent pixels (dip)."]
      y : number;
          [@key "y"] [@ocaml.doc "Y offset in device independent pixels (dip)."]
      width : number;
          [@key "width"]
          [@ocaml.doc "Rectangle width in device independent pixels (dip)."]
      height : number;
          [@key "height"]
          [@ocaml.doc "Rectangle height in device independent pixels (dip)."]
      scale : number; [@key "scale"] [@ocaml.doc "Page scale factor."]
    }
    [@@deriving yojson] [@@ocaml.doc "Viewport for capturing screenshot."]
  end = struct
    type t = {
      x : number;
          [@key "x"] [@ocaml.doc "X offset in device independent pixels (dip)."]
      y : number;
          [@key "y"] [@ocaml.doc "Y offset in device independent pixels (dip)."]
      width : number;
          [@key "width"]
          [@ocaml.doc "Rectangle width in device independent pixels (dip)."]
      height : number;
          [@key "height"]
          [@ocaml.doc "Rectangle height in device independent pixels (dip)."]
      scale : number; [@key "scale"] [@ocaml.doc "Page scale factor."]
    }
    [@@deriving yojson] [@@ocaml.doc "Viewport for capturing screenshot."]
  end

  and FontFamilies : sig
    type t = {
      standard : string option;
          [@key "standard"]
          [@yojson.option]
          [@ocaml.doc "The standard font-family."]
      fixed : string option;
          [@key "fixed"] [@yojson.option] [@ocaml.doc "The fixed font-family."]
      serif : string option;
          [@key "serif"] [@yojson.option] [@ocaml.doc "The serif font-family."]
      sansSerif : string option;
          [@key "sansSerif"]
          [@yojson.option]
          [@ocaml.doc "The sansSerif font-family."]
      cursive : string option;
          [@key "cursive"]
          [@yojson.option]
          [@ocaml.doc "The cursive font-family."]
      fantasy : string option;
          [@key "fantasy"]
          [@yojson.option]
          [@ocaml.doc "The fantasy font-family."]
      math : string option;
          [@key "math"] [@yojson.option] [@ocaml.doc "The math font-family."]
    }
    [@@deriving yojson] [@@ocaml.doc "Generic font families collection."]
  end = struct
    type t = {
      standard : string option;
          [@key "standard"]
          [@yojson.option]
          [@ocaml.doc "The standard font-family."]
      fixed : string option;
          [@key "fixed"] [@yojson.option] [@ocaml.doc "The fixed font-family."]
      serif : string option;
          [@key "serif"] [@yojson.option] [@ocaml.doc "The serif font-family."]
      sansSerif : string option;
          [@key "sansSerif"]
          [@yojson.option]
          [@ocaml.doc "The sansSerif font-family."]
      cursive : string option;
          [@key "cursive"]
          [@yojson.option]
          [@ocaml.doc "The cursive font-family."]
      fantasy : string option;
          [@key "fantasy"]
          [@yojson.option]
          [@ocaml.doc "The fantasy font-family."]
      math : string option;
          [@key "math"] [@yojson.option] [@ocaml.doc "The math font-family."]
    }
    [@@deriving yojson] [@@ocaml.doc "Generic font families collection."]
  end

  and ScriptFontFamilies : sig
    type t = {
      script : string;
          [@key "script"]
          [@ocaml.doc
            "Name of the script which these font families are defined for."]
      fontFamilies : FontFamilies.t;
          [@key "fontFamilies"]
          [@ocaml.doc "Generic font families collection for the script."]
    }
    [@@deriving yojson] [@@ocaml.doc "Font families collection for a script."]
  end = struct
    type t = {
      script : string;
          [@key "script"]
          [@ocaml.doc
            "Name of the script which these font families are defined for."]
      fontFamilies : FontFamilies.t;
          [@key "fontFamilies"]
          [@ocaml.doc "Generic font families collection for the script."]
    }
    [@@deriving yojson] [@@ocaml.doc "Font families collection for a script."]
  end

  and FontSizes : sig
    type t = {
      standard : number option;
          [@key "standard"]
          [@yojson.option]
          [@ocaml.doc "Default standard font size."]
      fixed : number option;
          [@key "fixed"]
          [@yojson.option]
          [@ocaml.doc "Default fixed font size."]
    }
    [@@deriving yojson] [@@ocaml.doc "Default font sizes."]
  end = struct
    type t = {
      standard : number option;
          [@key "standard"]
          [@yojson.option]
          [@ocaml.doc "Default standard font size."]
      fixed : number option;
          [@key "fixed"]
          [@yojson.option]
          [@ocaml.doc "Default fixed font size."]
    }
    [@@deriving yojson] [@@ocaml.doc "Default font sizes."]
  end

  and ClientNavigationReason : sig
    type _clientnavigationreason =
      [ `formSubmissionGet
      | `formSubmissionPost
      | `httpHeaderRefresh
      | `scriptInitiated
      | `metaTagRefresh
      | `pageBlockInterstitial
      | `reload
      | `anchorClick ]

    val _clientnavigationreason_of_yojson :
      Yojson.Basic.t -> _clientnavigationreason

    val yojson_of__clientnavigationreason :
      _clientnavigationreason -> Yojson.Basic.t

    type t = _clientnavigationreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _clientnavigationreason =
      [ `formSubmissionGet
      | `formSubmissionPost
      | `httpHeaderRefresh
      | `scriptInitiated
      | `metaTagRefresh
      | `pageBlockInterstitial
      | `reload
      | `anchorClick ]

    let _clientnavigationreason_of_yojson = function
      | `String "formSubmissionGet" -> `formSubmissionGet
      | `String "formSubmissionPost" -> `formSubmissionPost
      | `String "httpHeaderRefresh" -> `httpHeaderRefresh
      | `String "scriptInitiated" -> `scriptInitiated
      | `String "metaTagRefresh" -> `metaTagRefresh
      | `String "pageBlockInterstitial" -> `pageBlockInterstitial
      | `String "reload" -> `reload
      | `String "anchorClick" -> `anchorClick
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__clientnavigationreason = function
      | `formSubmissionGet -> `String "formSubmissionGet"
      | `formSubmissionPost -> `String "formSubmissionPost"
      | `httpHeaderRefresh -> `String "httpHeaderRefresh"
      | `scriptInitiated -> `String "scriptInitiated"
      | `metaTagRefresh -> `String "metaTagRefresh"
      | `pageBlockInterstitial -> `String "pageBlockInterstitial"
      | `reload -> `String "reload"
      | `anchorClick -> `String "anchorClick"

    type t = _clientnavigationreason
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ClientNavigationDisposition : sig
    type _clientnavigationdisposition =
      [ `currentTab | `newTab | `newWindow | `download ]

    val _clientnavigationdisposition_of_yojson :
      Yojson.Basic.t -> _clientnavigationdisposition

    val yojson_of__clientnavigationdisposition :
      _clientnavigationdisposition -> Yojson.Basic.t

    type t = _clientnavigationdisposition
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _clientnavigationdisposition =
      [ `currentTab | `newTab | `newWindow | `download ]

    let _clientnavigationdisposition_of_yojson = function
      | `String "currentTab" -> `currentTab
      | `String "newTab" -> `newTab
      | `String "newWindow" -> `newWindow
      | `String "download" -> `download
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__clientnavigationdisposition = function
      | `currentTab -> `String "currentTab"
      | `newTab -> `String "newTab"
      | `newWindow -> `String "newWindow"
      | `download -> `String "download"

    type t = _clientnavigationdisposition
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and InstallabilityErrorArgument : sig
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Argument name (e.g. name:'minimum-icon-size-in-pixels')."]
      value : string;
          [@key "value"] [@ocaml.doc "Argument value (e.g. value:'64')."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Argument name (e.g. name:'minimum-icon-size-in-pixels')."]
      value : string;
          [@key "value"] [@ocaml.doc "Argument value (e.g. value:'64')."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and InstallabilityError : sig
    type t = {
      errorId : string;
          [@key "errorId"]
          [@ocaml.doc "The error id (e.g. 'manifest-missing-suitable-icon')."]
      errorArguments : InstallabilityErrorArgument.t list;
          [@key "errorArguments"]
          [@ocaml.doc
            "The list of error arguments (e.g. \
             {name:'minimum-icon-size-in-pixels', value:'64'})."]
    }
    [@@deriving yojson] [@@ocaml.doc "The installability error"]
  end = struct
    type t = {
      errorId : string;
          [@key "errorId"]
          [@ocaml.doc "The error id (e.g. 'manifest-missing-suitable-icon')."]
      errorArguments : InstallabilityErrorArgument.t list;
          [@key "errorArguments"]
          [@ocaml.doc
            "The list of error arguments (e.g. \
             {name:'minimum-icon-size-in-pixels', value:'64'})."]
    }
    [@@deriving yojson] [@@ocaml.doc "The installability error"]
  end

  and ReferrerPolicy : sig
    type _referrerpolicy =
      [ `noReferrer
      | `noReferrerWhenDowngrade
      | `origin
      | `originWhenCrossOrigin
      | `sameOrigin
      | `strictOrigin
      | `strictOriginWhenCrossOrigin
      | `unsafeUrl ]

    val _referrerpolicy_of_yojson : Yojson.Basic.t -> _referrerpolicy
    val yojson_of__referrerpolicy : _referrerpolicy -> Yojson.Basic.t

    type t = _referrerpolicy
    [@@deriving yojson]
    [@@ocaml.doc "The referring-policy used for the navigation."]
  end = struct
    type _referrerpolicy =
      [ `noReferrer
      | `noReferrerWhenDowngrade
      | `origin
      | `originWhenCrossOrigin
      | `sameOrigin
      | `strictOrigin
      | `strictOriginWhenCrossOrigin
      | `unsafeUrl ]

    let _referrerpolicy_of_yojson = function
      | `String "noReferrer" -> `noReferrer
      | `String "noReferrerWhenDowngrade" -> `noReferrerWhenDowngrade
      | `String "origin" -> `origin
      | `String "originWhenCrossOrigin" -> `originWhenCrossOrigin
      | `String "sameOrigin" -> `sameOrigin
      | `String "strictOrigin" -> `strictOrigin
      | `String "strictOriginWhenCrossOrigin" -> `strictOriginWhenCrossOrigin
      | `String "unsafeUrl" -> `unsafeUrl
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__referrerpolicy = function
      | `noReferrer -> `String "noReferrer"
      | `noReferrerWhenDowngrade -> `String "noReferrerWhenDowngrade"
      | `origin -> `String "origin"
      | `originWhenCrossOrigin -> `String "originWhenCrossOrigin"
      | `sameOrigin -> `String "sameOrigin"
      | `strictOrigin -> `String "strictOrigin"
      | `strictOriginWhenCrossOrigin -> `String "strictOriginWhenCrossOrigin"
      | `unsafeUrl -> `String "unsafeUrl"

    type t = _referrerpolicy
    [@@deriving yojson]
    [@@ocaml.doc "The referring-policy used for the navigation."]
  end

  and CompilationCacheParams : sig
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "The URL of the script to produce a compilation cache entry for."]
      eager : bool option;
          [@key "eager"]
          [@yojson.option]
          [@ocaml.doc
            "A hint to the backend whether eager compilation is recommended.\n\
             (the actual compilation mode used is upon backend discretion)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Per-script compilation cache parameters for \
       `Page.produceCompilationCache`"]
  end = struct
    type t = {
      url : string;
          [@key "url"]
          [@ocaml.doc
            "The URL of the script to produce a compilation cache entry for."]
      eager : bool option;
          [@key "eager"]
          [@yojson.option]
          [@ocaml.doc
            "A hint to the backend whether eager compilation is recommended.\n\
             (the actual compilation mode used is upon backend discretion)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Per-script compilation cache parameters for \
       `Page.produceCompilationCache`"]
  end

  and AutoResponseMode : sig
    type _autoresponsemode = [ `none | `autoAccept | `autoReject | `autoOptOut ]

    val _autoresponsemode_of_yojson : Yojson.Basic.t -> _autoresponsemode
    val yojson_of__autoresponsemode : _autoresponsemode -> Yojson.Basic.t

    type t = _autoresponsemode
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum of possible auto-reponse for permisison / prompt dialogs."]
  end = struct
    type _autoresponsemode = [ `none | `autoAccept | `autoReject | `autoOptOut ]

    let _autoresponsemode_of_yojson = function
      | `String "none" -> `none
      | `String "autoAccept" -> `autoAccept
      | `String "autoReject" -> `autoReject
      | `String "autoOptOut" -> `autoOptOut
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__autoresponsemode = function
      | `none -> `String "none"
      | `autoAccept -> `String "autoAccept"
      | `autoReject -> `String "autoReject"
      | `autoOptOut -> `String "autoOptOut"

    type t = _autoresponsemode
    [@@deriving yojson]
    [@@ocaml.doc
      "Enum of possible auto-reponse for permisison / prompt dialogs."]
  end

  and NavigationType : sig
    type _navigationtype = [ `Navigation | `BackForwardCacheRestore ]

    val _navigationtype_of_yojson : Yojson.Basic.t -> _navigationtype
    val yojson_of__navigationtype : _navigationtype -> Yojson.Basic.t

    type t = _navigationtype
    [@@deriving yojson] [@@ocaml.doc "The type of a frameNavigated event."]
  end = struct
    type _navigationtype = [ `Navigation | `BackForwardCacheRestore ]

    let _navigationtype_of_yojson = function
      | `String "Navigation" -> `Navigation
      | `String "BackForwardCacheRestore" -> `BackForwardCacheRestore
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__navigationtype = function
      | `Navigation -> `String "Navigation"
      | `BackForwardCacheRestore -> `String "BackForwardCacheRestore"

    type t = _navigationtype
    [@@deriving yojson] [@@ocaml.doc "The type of a frameNavigated event."]
  end

  and BackForwardCacheNotRestoredReason : sig
    type _backforwardcachenotrestoredreason =
      [ `NotPrimaryMainFrame
      | `BackForwardCacheDisabled
      | `RelatedActiveContentsExist
      | `HTTPStatusNotOK
      | `SchemeNotHTTPOrHTTPS
      | `Loading
      | `WasGrantedMediaAccess
      | `DisableForRenderFrameHostCalled
      | `DomainNotAllowed
      | `HTTPMethodNotGET
      | `SubframeIsNavigating
      | `Timeout
      | `CacheLimit
      | `JavaScriptExecution
      | `RendererProcessKilled
      | `RendererProcessCrashed
      | `SchedulerTrackedFeatureUsed
      | `ConflictingBrowsingInstance
      | `CacheFlushed
      | `ServiceWorkerVersionActivation
      | `SessionRestored
      | `ServiceWorkerPostMessage
      | `EnteredBackForwardCacheBeforeServiceWorkerHostAdded
      | `RenderFrameHostReused_SameSite
      | `RenderFrameHostReused_CrossSite
      | `ServiceWorkerClaim
      | `IgnoreEventAndEvict
      | `HaveInnerContents
      | `TimeoutPuttingInCache
      | `BackForwardCacheDisabledByLowMemory
      | `BackForwardCacheDisabledByCommandLine
      | `NetworkRequestDatapipeDrainedAsBytesConsumer
      | `NetworkRequestRedirected
      | `NetworkRequestTimeout
      | `NetworkExceedsBufferLimit
      | `NavigationCancelledWhileRestoring
      | `NotMostRecentNavigationEntry
      | `BackForwardCacheDisabledForPrerender
      | `UserAgentOverrideDiffers
      | `ForegroundCacheLimit
      | `BrowsingInstanceNotSwapped
      | `BackForwardCacheDisabledForDelegate
      | `UnloadHandlerExistsInMainFrame
      | `UnloadHandlerExistsInSubFrame
      | `ServiceWorkerUnregistration
      | `CacheControlNoStore
      | `CacheControlNoStoreCookieModified
      | `CacheControlNoStoreHTTPOnlyCookieModified
      | `NoResponseHead
      | `Unknown
      | `ActivationNavigationsDisallowedForBug1234857
      | `ErrorDocument
      | `FencedFramesEmbedder
      | `CookieDisabled
      | `HTTPAuthRequired
      | `CookieFlushed
      | `WebSocket
      | `WebTransport
      | `WebRTC
      | `MainResourceHasCacheControlNoStore
      | `MainResourceHasCacheControlNoCache
      | `SubresourceHasCacheControlNoStore
      | `SubresourceHasCacheControlNoCache
      | `ContainsPlugins
      | `DocumentLoaded
      | `DedicatedWorkerOrWorklet
      | `OutstandingNetworkRequestOthers
      | `RequestedMIDIPermission
      | `RequestedAudioCapturePermission
      | `RequestedVideoCapturePermission
      | `RequestedBackForwardCacheBlockedSensors
      | `RequestedBackgroundWorkPermission
      | `BroadcastChannel
      | `WebXR
      | `SharedWorker
      | `WebLocks
      | `WebHID
      | `WebShare
      | `RequestedStorageAccessGrant
      | `WebNfc
      | `OutstandingNetworkRequestFetch
      | `OutstandingNetworkRequestXHR
      | `AppBanner
      | `Printing
      | `WebDatabase
      | `PictureInPicture
      | `Portal
      | `SpeechRecognizer
      | `IdleManager
      | `PaymentManager
      | `SpeechSynthesis
      | `KeyboardLock
      | `WebOTPService
      | `OutstandingNetworkRequestDirectSocket
      | `InjectedJavascript
      | `InjectedStyleSheet
      | `KeepaliveRequest
      | `IndexedDBEvent
      | `Dummy
      | `JsNetworkRequestReceivedCacheControlNoStoreResource
      | `WebRTCSticky
      | `WebTransportSticky
      | `WebSocketSticky
      | `ContentSecurityHandler
      | `ContentWebAuthenticationAPI
      | `ContentFileChooser
      | `ContentSerial
      | `ContentFileSystemAccess
      | `ContentMediaDevicesDispatcherHost
      | `ContentWebBluetooth
      | `ContentWebUSB
      | `ContentMediaSessionService
      | `ContentScreenReader
      | `EmbedderPopupBlockerTabHelper
      | `EmbedderSafeBrowsingTriggeredPopupBlocker
      | `EmbedderSafeBrowsingThreatDetails
      | `EmbedderAppBannerManager
      | `EmbedderDomDistillerViewerSource
      | `EmbedderDomDistillerSelfDeletingRequestDelegate
      | `EmbedderOomInterventionTabHelper
      | `EmbedderOfflinePage
      | `EmbedderChromePasswordManagerClientBindCredentialManager
      | `EmbedderPermissionRequestManager
      | `EmbedderModalDialog
      | `EmbedderExtensions
      | `EmbedderExtensionMessaging
      | `EmbedderExtensionMessagingForOpenPort
      | `EmbedderExtensionSentMessageToCachedFrame ]

    val _backforwardcachenotrestoredreason_of_yojson :
      Yojson.Basic.t -> _backforwardcachenotrestoredreason

    val yojson_of__backforwardcachenotrestoredreason :
      _backforwardcachenotrestoredreason -> Yojson.Basic.t

    type t = _backforwardcachenotrestoredreason
    [@@deriving yojson]
    [@@ocaml.doc "List of not restored reasons for back-forward cache."]
  end = struct
    type _backforwardcachenotrestoredreason =
      [ `NotPrimaryMainFrame
      | `BackForwardCacheDisabled
      | `RelatedActiveContentsExist
      | `HTTPStatusNotOK
      | `SchemeNotHTTPOrHTTPS
      | `Loading
      | `WasGrantedMediaAccess
      | `DisableForRenderFrameHostCalled
      | `DomainNotAllowed
      | `HTTPMethodNotGET
      | `SubframeIsNavigating
      | `Timeout
      | `CacheLimit
      | `JavaScriptExecution
      | `RendererProcessKilled
      | `RendererProcessCrashed
      | `SchedulerTrackedFeatureUsed
      | `ConflictingBrowsingInstance
      | `CacheFlushed
      | `ServiceWorkerVersionActivation
      | `SessionRestored
      | `ServiceWorkerPostMessage
      | `EnteredBackForwardCacheBeforeServiceWorkerHostAdded
      | `RenderFrameHostReused_SameSite
      | `RenderFrameHostReused_CrossSite
      | `ServiceWorkerClaim
      | `IgnoreEventAndEvict
      | `HaveInnerContents
      | `TimeoutPuttingInCache
      | `BackForwardCacheDisabledByLowMemory
      | `BackForwardCacheDisabledByCommandLine
      | `NetworkRequestDatapipeDrainedAsBytesConsumer
      | `NetworkRequestRedirected
      | `NetworkRequestTimeout
      | `NetworkExceedsBufferLimit
      | `NavigationCancelledWhileRestoring
      | `NotMostRecentNavigationEntry
      | `BackForwardCacheDisabledForPrerender
      | `UserAgentOverrideDiffers
      | `ForegroundCacheLimit
      | `BrowsingInstanceNotSwapped
      | `BackForwardCacheDisabledForDelegate
      | `UnloadHandlerExistsInMainFrame
      | `UnloadHandlerExistsInSubFrame
      | `ServiceWorkerUnregistration
      | `CacheControlNoStore
      | `CacheControlNoStoreCookieModified
      | `CacheControlNoStoreHTTPOnlyCookieModified
      | `NoResponseHead
      | `Unknown
      | `ActivationNavigationsDisallowedForBug1234857
      | `ErrorDocument
      | `FencedFramesEmbedder
      | `CookieDisabled
      | `HTTPAuthRequired
      | `CookieFlushed
      | `WebSocket
      | `WebTransport
      | `WebRTC
      | `MainResourceHasCacheControlNoStore
      | `MainResourceHasCacheControlNoCache
      | `SubresourceHasCacheControlNoStore
      | `SubresourceHasCacheControlNoCache
      | `ContainsPlugins
      | `DocumentLoaded
      | `DedicatedWorkerOrWorklet
      | `OutstandingNetworkRequestOthers
      | `RequestedMIDIPermission
      | `RequestedAudioCapturePermission
      | `RequestedVideoCapturePermission
      | `RequestedBackForwardCacheBlockedSensors
      | `RequestedBackgroundWorkPermission
      | `BroadcastChannel
      | `WebXR
      | `SharedWorker
      | `WebLocks
      | `WebHID
      | `WebShare
      | `RequestedStorageAccessGrant
      | `WebNfc
      | `OutstandingNetworkRequestFetch
      | `OutstandingNetworkRequestXHR
      | `AppBanner
      | `Printing
      | `WebDatabase
      | `PictureInPicture
      | `Portal
      | `SpeechRecognizer
      | `IdleManager
      | `PaymentManager
      | `SpeechSynthesis
      | `KeyboardLock
      | `WebOTPService
      | `OutstandingNetworkRequestDirectSocket
      | `InjectedJavascript
      | `InjectedStyleSheet
      | `KeepaliveRequest
      | `IndexedDBEvent
      | `Dummy
      | `JsNetworkRequestReceivedCacheControlNoStoreResource
      | `WebRTCSticky
      | `WebTransportSticky
      | `WebSocketSticky
      | `ContentSecurityHandler
      | `ContentWebAuthenticationAPI
      | `ContentFileChooser
      | `ContentSerial
      | `ContentFileSystemAccess
      | `ContentMediaDevicesDispatcherHost
      | `ContentWebBluetooth
      | `ContentWebUSB
      | `ContentMediaSessionService
      | `ContentScreenReader
      | `EmbedderPopupBlockerTabHelper
      | `EmbedderSafeBrowsingTriggeredPopupBlocker
      | `EmbedderSafeBrowsingThreatDetails
      | `EmbedderAppBannerManager
      | `EmbedderDomDistillerViewerSource
      | `EmbedderDomDistillerSelfDeletingRequestDelegate
      | `EmbedderOomInterventionTabHelper
      | `EmbedderOfflinePage
      | `EmbedderChromePasswordManagerClientBindCredentialManager
      | `EmbedderPermissionRequestManager
      | `EmbedderModalDialog
      | `EmbedderExtensions
      | `EmbedderExtensionMessaging
      | `EmbedderExtensionMessagingForOpenPort
      | `EmbedderExtensionSentMessageToCachedFrame ]

    let _backforwardcachenotrestoredreason_of_yojson = function
      | `String "NotPrimaryMainFrame" -> `NotPrimaryMainFrame
      | `String "BackForwardCacheDisabled" -> `BackForwardCacheDisabled
      | `String "RelatedActiveContentsExist" -> `RelatedActiveContentsExist
      | `String "HTTPStatusNotOK" -> `HTTPStatusNotOK
      | `String "SchemeNotHTTPOrHTTPS" -> `SchemeNotHTTPOrHTTPS
      | `String "Loading" -> `Loading
      | `String "WasGrantedMediaAccess" -> `WasGrantedMediaAccess
      | `String "DisableForRenderFrameHostCalled" ->
          `DisableForRenderFrameHostCalled
      | `String "DomainNotAllowed" -> `DomainNotAllowed
      | `String "HTTPMethodNotGET" -> `HTTPMethodNotGET
      | `String "SubframeIsNavigating" -> `SubframeIsNavigating
      | `String "Timeout" -> `Timeout
      | `String "CacheLimit" -> `CacheLimit
      | `String "JavaScriptExecution" -> `JavaScriptExecution
      | `String "RendererProcessKilled" -> `RendererProcessKilled
      | `String "RendererProcessCrashed" -> `RendererProcessCrashed
      | `String "SchedulerTrackedFeatureUsed" -> `SchedulerTrackedFeatureUsed
      | `String "ConflictingBrowsingInstance" -> `ConflictingBrowsingInstance
      | `String "CacheFlushed" -> `CacheFlushed
      | `String "ServiceWorkerVersionActivation" ->
          `ServiceWorkerVersionActivation
      | `String "SessionRestored" -> `SessionRestored
      | `String "ServiceWorkerPostMessage" -> `ServiceWorkerPostMessage
      | `String "EnteredBackForwardCacheBeforeServiceWorkerHostAdded" ->
          `EnteredBackForwardCacheBeforeServiceWorkerHostAdded
      | `String "RenderFrameHostReused_SameSite" ->
          `RenderFrameHostReused_SameSite
      | `String "RenderFrameHostReused_CrossSite" ->
          `RenderFrameHostReused_CrossSite
      | `String "ServiceWorkerClaim" -> `ServiceWorkerClaim
      | `String "IgnoreEventAndEvict" -> `IgnoreEventAndEvict
      | `String "HaveInnerContents" -> `HaveInnerContents
      | `String "TimeoutPuttingInCache" -> `TimeoutPuttingInCache
      | `String "BackForwardCacheDisabledByLowMemory" ->
          `BackForwardCacheDisabledByLowMemory
      | `String "BackForwardCacheDisabledByCommandLine" ->
          `BackForwardCacheDisabledByCommandLine
      | `String "NetworkRequestDatapipeDrainedAsBytesConsumer" ->
          `NetworkRequestDatapipeDrainedAsBytesConsumer
      | `String "NetworkRequestRedirected" -> `NetworkRequestRedirected
      | `String "NetworkRequestTimeout" -> `NetworkRequestTimeout
      | `String "NetworkExceedsBufferLimit" -> `NetworkExceedsBufferLimit
      | `String "NavigationCancelledWhileRestoring" ->
          `NavigationCancelledWhileRestoring
      | `String "NotMostRecentNavigationEntry" -> `NotMostRecentNavigationEntry
      | `String "BackForwardCacheDisabledForPrerender" ->
          `BackForwardCacheDisabledForPrerender
      | `String "UserAgentOverrideDiffers" -> `UserAgentOverrideDiffers
      | `String "ForegroundCacheLimit" -> `ForegroundCacheLimit
      | `String "BrowsingInstanceNotSwapped" -> `BrowsingInstanceNotSwapped
      | `String "BackForwardCacheDisabledForDelegate" ->
          `BackForwardCacheDisabledForDelegate
      | `String "UnloadHandlerExistsInMainFrame" ->
          `UnloadHandlerExistsInMainFrame
      | `String "UnloadHandlerExistsInSubFrame" ->
          `UnloadHandlerExistsInSubFrame
      | `String "ServiceWorkerUnregistration" -> `ServiceWorkerUnregistration
      | `String "CacheControlNoStore" -> `CacheControlNoStore
      | `String "CacheControlNoStoreCookieModified" ->
          `CacheControlNoStoreCookieModified
      | `String "CacheControlNoStoreHTTPOnlyCookieModified" ->
          `CacheControlNoStoreHTTPOnlyCookieModified
      | `String "NoResponseHead" -> `NoResponseHead
      | `String "Unknown" -> `Unknown
      | `String "ActivationNavigationsDisallowedForBug1234857" ->
          `ActivationNavigationsDisallowedForBug1234857
      | `String "ErrorDocument" -> `ErrorDocument
      | `String "FencedFramesEmbedder" -> `FencedFramesEmbedder
      | `String "CookieDisabled" -> `CookieDisabled
      | `String "HTTPAuthRequired" -> `HTTPAuthRequired
      | `String "CookieFlushed" -> `CookieFlushed
      | `String "WebSocket" -> `WebSocket
      | `String "WebTransport" -> `WebTransport
      | `String "WebRTC" -> `WebRTC
      | `String "MainResourceHasCacheControlNoStore" ->
          `MainResourceHasCacheControlNoStore
      | `String "MainResourceHasCacheControlNoCache" ->
          `MainResourceHasCacheControlNoCache
      | `String "SubresourceHasCacheControlNoStore" ->
          `SubresourceHasCacheControlNoStore
      | `String "SubresourceHasCacheControlNoCache" ->
          `SubresourceHasCacheControlNoCache
      | `String "ContainsPlugins" -> `ContainsPlugins
      | `String "DocumentLoaded" -> `DocumentLoaded
      | `String "DedicatedWorkerOrWorklet" -> `DedicatedWorkerOrWorklet
      | `String "OutstandingNetworkRequestOthers" ->
          `OutstandingNetworkRequestOthers
      | `String "RequestedMIDIPermission" -> `RequestedMIDIPermission
      | `String "RequestedAudioCapturePermission" ->
          `RequestedAudioCapturePermission
      | `String "RequestedVideoCapturePermission" ->
          `RequestedVideoCapturePermission
      | `String "RequestedBackForwardCacheBlockedSensors" ->
          `RequestedBackForwardCacheBlockedSensors
      | `String "RequestedBackgroundWorkPermission" ->
          `RequestedBackgroundWorkPermission
      | `String "BroadcastChannel" -> `BroadcastChannel
      | `String "WebXR" -> `WebXR
      | `String "SharedWorker" -> `SharedWorker
      | `String "WebLocks" -> `WebLocks
      | `String "WebHID" -> `WebHID
      | `String "WebShare" -> `WebShare
      | `String "RequestedStorageAccessGrant" -> `RequestedStorageAccessGrant
      | `String "WebNfc" -> `WebNfc
      | `String "OutstandingNetworkRequestFetch" ->
          `OutstandingNetworkRequestFetch
      | `String "OutstandingNetworkRequestXHR" -> `OutstandingNetworkRequestXHR
      | `String "AppBanner" -> `AppBanner
      | `String "Printing" -> `Printing
      | `String "WebDatabase" -> `WebDatabase
      | `String "PictureInPicture" -> `PictureInPicture
      | `String "Portal" -> `Portal
      | `String "SpeechRecognizer" -> `SpeechRecognizer
      | `String "IdleManager" -> `IdleManager
      | `String "PaymentManager" -> `PaymentManager
      | `String "SpeechSynthesis" -> `SpeechSynthesis
      | `String "KeyboardLock" -> `KeyboardLock
      | `String "WebOTPService" -> `WebOTPService
      | `String "OutstandingNetworkRequestDirectSocket" ->
          `OutstandingNetworkRequestDirectSocket
      | `String "InjectedJavascript" -> `InjectedJavascript
      | `String "InjectedStyleSheet" -> `InjectedStyleSheet
      | `String "KeepaliveRequest" -> `KeepaliveRequest
      | `String "IndexedDBEvent" -> `IndexedDBEvent
      | `String "Dummy" -> `Dummy
      | `String "JsNetworkRequestReceivedCacheControlNoStoreResource" ->
          `JsNetworkRequestReceivedCacheControlNoStoreResource
      | `String "WebRTCSticky" -> `WebRTCSticky
      | `String "WebTransportSticky" -> `WebTransportSticky
      | `String "WebSocketSticky" -> `WebSocketSticky
      | `String "ContentSecurityHandler" -> `ContentSecurityHandler
      | `String "ContentWebAuthenticationAPI" -> `ContentWebAuthenticationAPI
      | `String "ContentFileChooser" -> `ContentFileChooser
      | `String "ContentSerial" -> `ContentSerial
      | `String "ContentFileSystemAccess" -> `ContentFileSystemAccess
      | `String "ContentMediaDevicesDispatcherHost" ->
          `ContentMediaDevicesDispatcherHost
      | `String "ContentWebBluetooth" -> `ContentWebBluetooth
      | `String "ContentWebUSB" -> `ContentWebUSB
      | `String "ContentMediaSessionService" -> `ContentMediaSessionService
      | `String "ContentScreenReader" -> `ContentScreenReader
      | `String "EmbedderPopupBlockerTabHelper" ->
          `EmbedderPopupBlockerTabHelper
      | `String "EmbedderSafeBrowsingTriggeredPopupBlocker" ->
          `EmbedderSafeBrowsingTriggeredPopupBlocker
      | `String "EmbedderSafeBrowsingThreatDetails" ->
          `EmbedderSafeBrowsingThreatDetails
      | `String "EmbedderAppBannerManager" -> `EmbedderAppBannerManager
      | `String "EmbedderDomDistillerViewerSource" ->
          `EmbedderDomDistillerViewerSource
      | `String "EmbedderDomDistillerSelfDeletingRequestDelegate" ->
          `EmbedderDomDistillerSelfDeletingRequestDelegate
      | `String "EmbedderOomInterventionTabHelper" ->
          `EmbedderOomInterventionTabHelper
      | `String "EmbedderOfflinePage" -> `EmbedderOfflinePage
      | `String "EmbedderChromePasswordManagerClientBindCredentialManager" ->
          `EmbedderChromePasswordManagerClientBindCredentialManager
      | `String "EmbedderPermissionRequestManager" ->
          `EmbedderPermissionRequestManager
      | `String "EmbedderModalDialog" -> `EmbedderModalDialog
      | `String "EmbedderExtensions" -> `EmbedderExtensions
      | `String "EmbedderExtensionMessaging" -> `EmbedderExtensionMessaging
      | `String "EmbedderExtensionMessagingForOpenPort" ->
          `EmbedderExtensionMessagingForOpenPort
      | `String "EmbedderExtensionSentMessageToCachedFrame" ->
          `EmbedderExtensionSentMessageToCachedFrame
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__backforwardcachenotrestoredreason = function
      | `NotPrimaryMainFrame -> `String "NotPrimaryMainFrame"
      | `BackForwardCacheDisabled -> `String "BackForwardCacheDisabled"
      | `RelatedActiveContentsExist -> `String "RelatedActiveContentsExist"
      | `HTTPStatusNotOK -> `String "HTTPStatusNotOK"
      | `SchemeNotHTTPOrHTTPS -> `String "SchemeNotHTTPOrHTTPS"
      | `Loading -> `String "Loading"
      | `WasGrantedMediaAccess -> `String "WasGrantedMediaAccess"
      | `DisableForRenderFrameHostCalled ->
          `String "DisableForRenderFrameHostCalled"
      | `DomainNotAllowed -> `String "DomainNotAllowed"
      | `HTTPMethodNotGET -> `String "HTTPMethodNotGET"
      | `SubframeIsNavigating -> `String "SubframeIsNavigating"
      | `Timeout -> `String "Timeout"
      | `CacheLimit -> `String "CacheLimit"
      | `JavaScriptExecution -> `String "JavaScriptExecution"
      | `RendererProcessKilled -> `String "RendererProcessKilled"
      | `RendererProcessCrashed -> `String "RendererProcessCrashed"
      | `SchedulerTrackedFeatureUsed -> `String "SchedulerTrackedFeatureUsed"
      | `ConflictingBrowsingInstance -> `String "ConflictingBrowsingInstance"
      | `CacheFlushed -> `String "CacheFlushed"
      | `ServiceWorkerVersionActivation ->
          `String "ServiceWorkerVersionActivation"
      | `SessionRestored -> `String "SessionRestored"
      | `ServiceWorkerPostMessage -> `String "ServiceWorkerPostMessage"
      | `EnteredBackForwardCacheBeforeServiceWorkerHostAdded ->
          `String "EnteredBackForwardCacheBeforeServiceWorkerHostAdded"
      | `RenderFrameHostReused_SameSite ->
          `String "RenderFrameHostReused_SameSite"
      | `RenderFrameHostReused_CrossSite ->
          `String "RenderFrameHostReused_CrossSite"
      | `ServiceWorkerClaim -> `String "ServiceWorkerClaim"
      | `IgnoreEventAndEvict -> `String "IgnoreEventAndEvict"
      | `HaveInnerContents -> `String "HaveInnerContents"
      | `TimeoutPuttingInCache -> `String "TimeoutPuttingInCache"
      | `BackForwardCacheDisabledByLowMemory ->
          `String "BackForwardCacheDisabledByLowMemory"
      | `BackForwardCacheDisabledByCommandLine ->
          `String "BackForwardCacheDisabledByCommandLine"
      | `NetworkRequestDatapipeDrainedAsBytesConsumer ->
          `String "NetworkRequestDatapipeDrainedAsBytesConsumer"
      | `NetworkRequestRedirected -> `String "NetworkRequestRedirected"
      | `NetworkRequestTimeout -> `String "NetworkRequestTimeout"
      | `NetworkExceedsBufferLimit -> `String "NetworkExceedsBufferLimit"
      | `NavigationCancelledWhileRestoring ->
          `String "NavigationCancelledWhileRestoring"
      | `NotMostRecentNavigationEntry -> `String "NotMostRecentNavigationEntry"
      | `BackForwardCacheDisabledForPrerender ->
          `String "BackForwardCacheDisabledForPrerender"
      | `UserAgentOverrideDiffers -> `String "UserAgentOverrideDiffers"
      | `ForegroundCacheLimit -> `String "ForegroundCacheLimit"
      | `BrowsingInstanceNotSwapped -> `String "BrowsingInstanceNotSwapped"
      | `BackForwardCacheDisabledForDelegate ->
          `String "BackForwardCacheDisabledForDelegate"
      | `UnloadHandlerExistsInMainFrame ->
          `String "UnloadHandlerExistsInMainFrame"
      | `UnloadHandlerExistsInSubFrame ->
          `String "UnloadHandlerExistsInSubFrame"
      | `ServiceWorkerUnregistration -> `String "ServiceWorkerUnregistration"
      | `CacheControlNoStore -> `String "CacheControlNoStore"
      | `CacheControlNoStoreCookieModified ->
          `String "CacheControlNoStoreCookieModified"
      | `CacheControlNoStoreHTTPOnlyCookieModified ->
          `String "CacheControlNoStoreHTTPOnlyCookieModified"
      | `NoResponseHead -> `String "NoResponseHead"
      | `Unknown -> `String "Unknown"
      | `ActivationNavigationsDisallowedForBug1234857 ->
          `String "ActivationNavigationsDisallowedForBug1234857"
      | `ErrorDocument -> `String "ErrorDocument"
      | `FencedFramesEmbedder -> `String "FencedFramesEmbedder"
      | `CookieDisabled -> `String "CookieDisabled"
      | `HTTPAuthRequired -> `String "HTTPAuthRequired"
      | `CookieFlushed -> `String "CookieFlushed"
      | `WebSocket -> `String "WebSocket"
      | `WebTransport -> `String "WebTransport"
      | `WebRTC -> `String "WebRTC"
      | `MainResourceHasCacheControlNoStore ->
          `String "MainResourceHasCacheControlNoStore"
      | `MainResourceHasCacheControlNoCache ->
          `String "MainResourceHasCacheControlNoCache"
      | `SubresourceHasCacheControlNoStore ->
          `String "SubresourceHasCacheControlNoStore"
      | `SubresourceHasCacheControlNoCache ->
          `String "SubresourceHasCacheControlNoCache"
      | `ContainsPlugins -> `String "ContainsPlugins"
      | `DocumentLoaded -> `String "DocumentLoaded"
      | `DedicatedWorkerOrWorklet -> `String "DedicatedWorkerOrWorklet"
      | `OutstandingNetworkRequestOthers ->
          `String "OutstandingNetworkRequestOthers"
      | `RequestedMIDIPermission -> `String "RequestedMIDIPermission"
      | `RequestedAudioCapturePermission ->
          `String "RequestedAudioCapturePermission"
      | `RequestedVideoCapturePermission ->
          `String "RequestedVideoCapturePermission"
      | `RequestedBackForwardCacheBlockedSensors ->
          `String "RequestedBackForwardCacheBlockedSensors"
      | `RequestedBackgroundWorkPermission ->
          `String "RequestedBackgroundWorkPermission"
      | `BroadcastChannel -> `String "BroadcastChannel"
      | `WebXR -> `String "WebXR"
      | `SharedWorker -> `String "SharedWorker"
      | `WebLocks -> `String "WebLocks"
      | `WebHID -> `String "WebHID"
      | `WebShare -> `String "WebShare"
      | `RequestedStorageAccessGrant -> `String "RequestedStorageAccessGrant"
      | `WebNfc -> `String "WebNfc"
      | `OutstandingNetworkRequestFetch ->
          `String "OutstandingNetworkRequestFetch"
      | `OutstandingNetworkRequestXHR -> `String "OutstandingNetworkRequestXHR"
      | `AppBanner -> `String "AppBanner"
      | `Printing -> `String "Printing"
      | `WebDatabase -> `String "WebDatabase"
      | `PictureInPicture -> `String "PictureInPicture"
      | `Portal -> `String "Portal"
      | `SpeechRecognizer -> `String "SpeechRecognizer"
      | `IdleManager -> `String "IdleManager"
      | `PaymentManager -> `String "PaymentManager"
      | `SpeechSynthesis -> `String "SpeechSynthesis"
      | `KeyboardLock -> `String "KeyboardLock"
      | `WebOTPService -> `String "WebOTPService"
      | `OutstandingNetworkRequestDirectSocket ->
          `String "OutstandingNetworkRequestDirectSocket"
      | `InjectedJavascript -> `String "InjectedJavascript"
      | `InjectedStyleSheet -> `String "InjectedStyleSheet"
      | `KeepaliveRequest -> `String "KeepaliveRequest"
      | `IndexedDBEvent -> `String "IndexedDBEvent"
      | `Dummy -> `String "Dummy"
      | `JsNetworkRequestReceivedCacheControlNoStoreResource ->
          `String "JsNetworkRequestReceivedCacheControlNoStoreResource"
      | `WebRTCSticky -> `String "WebRTCSticky"
      | `WebTransportSticky -> `String "WebTransportSticky"
      | `WebSocketSticky -> `String "WebSocketSticky"
      | `ContentSecurityHandler -> `String "ContentSecurityHandler"
      | `ContentWebAuthenticationAPI -> `String "ContentWebAuthenticationAPI"
      | `ContentFileChooser -> `String "ContentFileChooser"
      | `ContentSerial -> `String "ContentSerial"
      | `ContentFileSystemAccess -> `String "ContentFileSystemAccess"
      | `ContentMediaDevicesDispatcherHost ->
          `String "ContentMediaDevicesDispatcherHost"
      | `ContentWebBluetooth -> `String "ContentWebBluetooth"
      | `ContentWebUSB -> `String "ContentWebUSB"
      | `ContentMediaSessionService -> `String "ContentMediaSessionService"
      | `ContentScreenReader -> `String "ContentScreenReader"
      | `EmbedderPopupBlockerTabHelper ->
          `String "EmbedderPopupBlockerTabHelper"
      | `EmbedderSafeBrowsingTriggeredPopupBlocker ->
          `String "EmbedderSafeBrowsingTriggeredPopupBlocker"
      | `EmbedderSafeBrowsingThreatDetails ->
          `String "EmbedderSafeBrowsingThreatDetails"
      | `EmbedderAppBannerManager -> `String "EmbedderAppBannerManager"
      | `EmbedderDomDistillerViewerSource ->
          `String "EmbedderDomDistillerViewerSource"
      | `EmbedderDomDistillerSelfDeletingRequestDelegate ->
          `String "EmbedderDomDistillerSelfDeletingRequestDelegate"
      | `EmbedderOomInterventionTabHelper ->
          `String "EmbedderOomInterventionTabHelper"
      | `EmbedderOfflinePage -> `String "EmbedderOfflinePage"
      | `EmbedderChromePasswordManagerClientBindCredentialManager ->
          `String "EmbedderChromePasswordManagerClientBindCredentialManager"
      | `EmbedderPermissionRequestManager ->
          `String "EmbedderPermissionRequestManager"
      | `EmbedderModalDialog -> `String "EmbedderModalDialog"
      | `EmbedderExtensions -> `String "EmbedderExtensions"
      | `EmbedderExtensionMessaging -> `String "EmbedderExtensionMessaging"
      | `EmbedderExtensionMessagingForOpenPort ->
          `String "EmbedderExtensionMessagingForOpenPort"
      | `EmbedderExtensionSentMessageToCachedFrame ->
          `String "EmbedderExtensionSentMessageToCachedFrame"

    type t = _backforwardcachenotrestoredreason
    [@@deriving yojson]
    [@@ocaml.doc "List of not restored reasons for back-forward cache."]
  end

  and BackForwardCacheNotRestoredReasonType : sig
    type _backforwardcachenotrestoredreasontype =
      [ `SupportPending | `PageSupportNeeded | `Circumstantial ]

    val _backforwardcachenotrestoredreasontype_of_yojson :
      Yojson.Basic.t -> _backforwardcachenotrestoredreasontype

    val yojson_of__backforwardcachenotrestoredreasontype :
      _backforwardcachenotrestoredreasontype -> Yojson.Basic.t

    type t = _backforwardcachenotrestoredreasontype
    [@@deriving yojson]
    [@@ocaml.doc "Types of not restored reasons for back-forward cache."]
  end = struct
    type _backforwardcachenotrestoredreasontype =
      [ `SupportPending | `PageSupportNeeded | `Circumstantial ]

    let _backforwardcachenotrestoredreasontype_of_yojson = function
      | `String "SupportPending" -> `SupportPending
      | `String "PageSupportNeeded" -> `PageSupportNeeded
      | `String "Circumstantial" -> `Circumstantial
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__backforwardcachenotrestoredreasontype = function
      | `SupportPending -> `String "SupportPending"
      | `PageSupportNeeded -> `String "PageSupportNeeded"
      | `Circumstantial -> `String "Circumstantial"

    type t = _backforwardcachenotrestoredreasontype
    [@@deriving yojson]
    [@@ocaml.doc "Types of not restored reasons for back-forward cache."]
  end

  and BackForwardCacheNotRestoredExplanation : sig
    type t = {
      type_ : BackForwardCacheNotRestoredReasonType.t;
          [@key "type"] [@ocaml.doc "Type of the reason"]
      reason : BackForwardCacheNotRestoredReason.t;
          [@key "reason"] [@ocaml.doc "Not restored reason"]
      context : string option;
          [@key "context"]
          [@yojson.option]
          [@ocaml.doc
            "Context associated with the reason. The meaning of this context is\n\
             dependent on the reason:\n\
             - EmbedderExtensionSentMessageToCachedFrame: the extension ID."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      type_ : BackForwardCacheNotRestoredReasonType.t;
          [@key "type"] [@ocaml.doc "Type of the reason"]
      reason : BackForwardCacheNotRestoredReason.t;
          [@key "reason"] [@ocaml.doc "Not restored reason"]
      context : string option;
          [@key "context"]
          [@yojson.option]
          [@ocaml.doc
            "Context associated with the reason. The meaning of this context is\n\
             dependent on the reason:\n\
             - EmbedderExtensionSentMessageToCachedFrame: the extension ID."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and BackForwardCacheNotRestoredExplanationTree : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "URL of each frame"]
      explanations : BackForwardCacheNotRestoredExplanation.t list;
          [@key "explanations"]
          [@ocaml.doc "Not restored reasons of each frame"]
      children : BackForwardCacheNotRestoredExplanationTree.t list;
          [@key "children"] [@ocaml.doc "Array of children frame"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      url : string; [@key "url"] [@ocaml.doc "URL of each frame"]
      explanations : BackForwardCacheNotRestoredExplanation.t list;
          [@key "explanations"]
          [@ocaml.doc "Not restored reasons of each frame"]
      children : BackForwardCacheNotRestoredExplanationTree.t list;
          [@key "children"] [@ocaml.doc "Array of children frame"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and Performance : sig
  module rec Metric : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Metric name."]
      value : number; [@key "value"] [@ocaml.doc "Metric value."]
    }
    [@@deriving yojson] [@@ocaml.doc "Run-time execution metric."]
  end
end = struct
  module rec Metric : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Metric name."]
      value : number; [@key "value"] [@ocaml.doc "Metric value."]
    }
    [@@deriving yojson] [@@ocaml.doc "Run-time execution metric."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Metric name."]
      value : number; [@key "value"] [@ocaml.doc "Metric value."]
    }
    [@@deriving yojson] [@@ocaml.doc "Run-time execution metric."]
  end
end

and PerformanceTimeline : sig
  module rec LargestContentfulPaint : sig
    type t = {
      renderTime : Network.TimeSinceEpoch.t;
          [@key "renderTime"] [@ocaml.doc "No description provided"]
      loadTime : Network.TimeSinceEpoch.t;
          [@key "loadTime"] [@ocaml.doc "No description provided"]
      size : number;
          [@key "size"] [@ocaml.doc "The number of pixels being painted."]
      elementId : string option;
          [@key "elementId"]
          [@yojson.option]
          [@ocaml.doc "The id attribute of the element, if available."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc "The URL of the image (may be trimmed)."]
      nodeId : DOM.BackendNodeId.t option;
          [@key "nodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "See https://github.com/WICG/LargestContentfulPaint and \
       largest_contentful_paint.idl"]
  end

  and LayoutShiftAttribution : sig
    type t = {
      previousRect : DOM.Rect.t;
          [@key "previousRect"] [@ocaml.doc "No description provided"]
      currentRect : DOM.Rect.t;
          [@key "currentRect"] [@ocaml.doc "No description provided"]
      nodeId : DOM.BackendNodeId.t option;
          [@key "nodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and LayoutShift : sig
    type t = {
      value : number;
          [@key "value"] [@ocaml.doc "Score increment produced by this event."]
      hadRecentInput : bool;
          [@key "hadRecentInput"] [@ocaml.doc "No description provided"]
      lastInputTime : Network.TimeSinceEpoch.t;
          [@key "lastInputTime"] [@ocaml.doc "No description provided"]
      sources : LayoutShiftAttribution.t list;
          [@key "sources"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "See https://wicg.github.io/layout-instability/#sec-layout-shift and \
       layout_shift.idl"]
  end

  and TimelineEvent : sig
    type t = {
      frameId : Page.FrameId.t;
          [@key "frameId"]
          [@ocaml.doc
            "Identifies the frame that this event is related to. Empty for \
             non-frame targets."]
      type_ : string;
          [@key "type"]
          [@ocaml.doc
            "The event type, as specified in \
             https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype\n\
             This determines which of the optional \"details\" fiedls is \
             present."]
      name : string;
          [@key "name"] [@ocaml.doc "Name may be empty depending on the type."]
      time : Network.TimeSinceEpoch.t;
          [@key "time"]
          [@ocaml.doc
            "Time in seconds since Epoch, monotonically increasing within \
             document lifetime."]
      duration : number option;
          [@key "duration"]
          [@yojson.option]
          [@ocaml.doc "Event duration, if applicable."]
      lcpDetails : LargestContentfulPaint.t option;
          [@key "lcpDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      layoutShiftDetails : LayoutShift.t option;
          [@key "layoutShiftDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec LargestContentfulPaint : sig
    type t = {
      renderTime : Network.TimeSinceEpoch.t;
          [@key "renderTime"] [@ocaml.doc "No description provided"]
      loadTime : Network.TimeSinceEpoch.t;
          [@key "loadTime"] [@ocaml.doc "No description provided"]
      size : number;
          [@key "size"] [@ocaml.doc "The number of pixels being painted."]
      elementId : string option;
          [@key "elementId"]
          [@yojson.option]
          [@ocaml.doc "The id attribute of the element, if available."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc "The URL of the image (may be trimmed)."]
      nodeId : DOM.BackendNodeId.t option;
          [@key "nodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "See https://github.com/WICG/LargestContentfulPaint and \
       largest_contentful_paint.idl"]
  end = struct
    type t = {
      renderTime : Network.TimeSinceEpoch.t;
          [@key "renderTime"] [@ocaml.doc "No description provided"]
      loadTime : Network.TimeSinceEpoch.t;
          [@key "loadTime"] [@ocaml.doc "No description provided"]
      size : number;
          [@key "size"] [@ocaml.doc "The number of pixels being painted."]
      elementId : string option;
          [@key "elementId"]
          [@yojson.option]
          [@ocaml.doc "The id attribute of the element, if available."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc "The URL of the image (may be trimmed)."]
      nodeId : DOM.BackendNodeId.t option;
          [@key "nodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "See https://github.com/WICG/LargestContentfulPaint and \
       largest_contentful_paint.idl"]
  end

  and LayoutShiftAttribution : sig
    type t = {
      previousRect : DOM.Rect.t;
          [@key "previousRect"] [@ocaml.doc "No description provided"]
      currentRect : DOM.Rect.t;
          [@key "currentRect"] [@ocaml.doc "No description provided"]
      nodeId : DOM.BackendNodeId.t option;
          [@key "nodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      previousRect : DOM.Rect.t;
          [@key "previousRect"] [@ocaml.doc "No description provided"]
      currentRect : DOM.Rect.t;
          [@key "currentRect"] [@ocaml.doc "No description provided"]
      nodeId : DOM.BackendNodeId.t option;
          [@key "nodeId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and LayoutShift : sig
    type t = {
      value : number;
          [@key "value"] [@ocaml.doc "Score increment produced by this event."]
      hadRecentInput : bool;
          [@key "hadRecentInput"] [@ocaml.doc "No description provided"]
      lastInputTime : Network.TimeSinceEpoch.t;
          [@key "lastInputTime"] [@ocaml.doc "No description provided"]
      sources : LayoutShiftAttribution.t list;
          [@key "sources"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "See https://wicg.github.io/layout-instability/#sec-layout-shift and \
       layout_shift.idl"]
  end = struct
    type t = {
      value : number;
          [@key "value"] [@ocaml.doc "Score increment produced by this event."]
      hadRecentInput : bool;
          [@key "hadRecentInput"] [@ocaml.doc "No description provided"]
      lastInputTime : Network.TimeSinceEpoch.t;
          [@key "lastInputTime"] [@ocaml.doc "No description provided"]
      sources : LayoutShiftAttribution.t list;
          [@key "sources"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "See https://wicg.github.io/layout-instability/#sec-layout-shift and \
       layout_shift.idl"]
  end

  and TimelineEvent : sig
    type t = {
      frameId : Page.FrameId.t;
          [@key "frameId"]
          [@ocaml.doc
            "Identifies the frame that this event is related to. Empty for \
             non-frame targets."]
      type_ : string;
          [@key "type"]
          [@ocaml.doc
            "The event type, as specified in \
             https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype\n\
             This determines which of the optional \"details\" fiedls is \
             present."]
      name : string;
          [@key "name"] [@ocaml.doc "Name may be empty depending on the type."]
      time : Network.TimeSinceEpoch.t;
          [@key "time"]
          [@ocaml.doc
            "Time in seconds since Epoch, monotonically increasing within \
             document lifetime."]
      duration : number option;
          [@key "duration"]
          [@yojson.option]
          [@ocaml.doc "Event duration, if applicable."]
      lcpDetails : LargestContentfulPaint.t option;
          [@key "lcpDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      layoutShiftDetails : LayoutShift.t option;
          [@key "layoutShiftDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      frameId : Page.FrameId.t;
          [@key "frameId"]
          [@ocaml.doc
            "Identifies the frame that this event is related to. Empty for \
             non-frame targets."]
      type_ : string;
          [@key "type"]
          [@ocaml.doc
            "The event type, as specified in \
             https://w3c.github.io/performance-timeline/#dom-performanceentry-entrytype\n\
             This determines which of the optional \"details\" fiedls is \
             present."]
      name : string;
          [@key "name"] [@ocaml.doc "Name may be empty depending on the type."]
      time : Network.TimeSinceEpoch.t;
          [@key "time"]
          [@ocaml.doc
            "Time in seconds since Epoch, monotonically increasing within \
             document lifetime."]
      duration : number option;
          [@key "duration"]
          [@yojson.option]
          [@ocaml.doc "Event duration, if applicable."]
      lcpDetails : LargestContentfulPaint.t option;
          [@key "lcpDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      layoutShiftDetails : LayoutShift.t option;
          [@key "layoutShiftDetails"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and Security : sig
  module rec CertificateId : sig
    type t = number
    [@@deriving yojson] [@@ocaml.doc "An internal certificate ID value."]
  end

  and MixedContentType : sig
    type _mixedcontenttype = [ `blockable | `optionally_blockable | `none ]

    val _mixedcontenttype_of_yojson : Yojson.Basic.t -> _mixedcontenttype
    val yojson_of__mixedcontenttype : _mixedcontenttype -> Yojson.Basic.t

    type t = _mixedcontenttype
    [@@deriving yojson]
    [@@ocaml.doc
      "A description of mixed content (HTTP resources on HTTPS pages), as \
       defined by\n\
       https://www.w3.org/TR/mixed-content/#categories"]
  end

  and SecurityState : sig
    type _securitystate =
      [ `unknown | `neutral | `insecure | `secure | `info | `insecure_broken ]

    val _securitystate_of_yojson : Yojson.Basic.t -> _securitystate
    val yojson_of__securitystate : _securitystate -> Yojson.Basic.t

    type t = _securitystate
    [@@deriving yojson]
    [@@ocaml.doc "The security level of a page or resource."]
  end

  and CertificateSecurityState : sig
    type t = {
      protocol : string;
          [@key "protocol"]
          [@ocaml.doc "Protocol name (e.g. \"TLS 1.2\" or \"QUIC\")."]
      keyExchange : string;
          [@key "keyExchange"]
          [@ocaml.doc
            "Key Exchange used by the connection, or the empty string if not \
             applicable."]
      keyExchangeGroup : string option;
          [@key "keyExchangeGroup"]
          [@yojson.option]
          [@ocaml.doc "(EC)DH group used by the connection, if applicable."]
      cipher : string; [@key "cipher"] [@ocaml.doc "Cipher name."]
      mac : string option;
          [@key "mac"]
          [@yojson.option]
          [@ocaml.doc
            "TLS MAC. Note that AEAD ciphers do not have separate MACs."]
      certificate : string list;
          [@key "certificate"] [@ocaml.doc "Page certificate."]
      subjectName : string;
          [@key "subjectName"] [@ocaml.doc "Certificate subject name."]
      issuer : string; [@key "issuer"] [@ocaml.doc "Name of the issuing CA."]
      validFrom : Network.TimeSinceEpoch.t;
          [@key "validFrom"] [@ocaml.doc "Certificate valid from date."]
      validTo : Network.TimeSinceEpoch.t;
          [@key "validTo"] [@ocaml.doc "Certificate valid to (expiration) date"]
      certificateNetworkError : string option;
          [@key "certificateNetworkError"]
          [@yojson.option]
          [@ocaml.doc
            "The highest priority network error code, if the certificate has \
             an error."]
      certificateHasWeakSignature : bool;
          [@key "certificateHasWeakSignature"]
          [@ocaml.doc
            "True if the certificate uses a weak signature aglorithm."]
      certificateHasSha1Signature : bool;
          [@key "certificateHasSha1Signature"]
          [@ocaml.doc
            "True if the certificate has a SHA1 signature in the chain."]
      modernSSL : bool; [@key "modernSSL"] [@ocaml.doc "True if modern SSL"]
      obsoleteSslProtocol : bool;
          [@key "obsoleteSslProtocol"]
          [@ocaml.doc
            "True if the connection is using an obsolete SSL protocol."]
      obsoleteSslKeyExchange : bool;
          [@key "obsoleteSslKeyExchange"]
          [@ocaml.doc
            "True if the connection is using an obsolete SSL key exchange."]
      obsoleteSslCipher : bool;
          [@key "obsoleteSslCipher"]
          [@ocaml.doc "True if the connection is using an obsolete SSL cipher."]
      obsoleteSslSignature : bool;
          [@key "obsoleteSslSignature"]
          [@ocaml.doc
            "True if the connection is using an obsolete SSL signature."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Details about the security state of the page certificate."]
  end

  and SafetyTipStatus : sig
    type _safetytipstatus = [ `badReputation | `lookalike ]

    val _safetytipstatus_of_yojson : Yojson.Basic.t -> _safetytipstatus
    val yojson_of__safetytipstatus : _safetytipstatus -> Yojson.Basic.t

    type t = _safetytipstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SafetyTipInfo : sig
    type t = {
      safetyTipStatus : SafetyTipStatus.t;
          [@key "safetyTipStatus"]
          [@ocaml.doc
            "Describes whether the page triggers any safety tips or reputation \
             warnings. Default is unknown."]
      safeUrl : string option;
          [@key "safeUrl"]
          [@yojson.option]
          [@ocaml.doc
            "The URL the safety tip suggested (\"Did you mean?\"). Only filled \
             in for lookalike matches."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and VisibleSecurityState : sig
    type t = {
      securityState : SecurityState.t;
          [@key "securityState"] [@ocaml.doc "The security level of the page."]
      certificateSecurityState : CertificateSecurityState.t option;
          [@key "certificateSecurityState"]
          [@yojson.option]
          [@ocaml.doc "Security state details about the page certificate."]
      safetyTipInfo : SafetyTipInfo.t option;
          [@key "safetyTipInfo"]
          [@yojson.option]
          [@ocaml.doc
            "The type of Safety Tip triggered on the page. Note that this \
             field will be set even if the Safety Tip UI was not actually \
             shown."]
      securityStateIssueIds : string list;
          [@key "securityStateIssueIds"]
          [@ocaml.doc "Array of security state issues ids."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Security state information about the page."]
  end

  and SecurityStateExplanation : sig
    type t = {
      securityState : SecurityState.t;
          [@key "securityState"]
          [@ocaml.doc
            "Security state representing the severity of the factor being \
             explained."]
      title : string;
          [@key "title"] [@ocaml.doc "Title describing the type of factor."]
      summary : string;
          [@key "summary"]
          [@ocaml.doc "Short phrase describing the type of factor."]
      description : string;
          [@key "description"]
          [@ocaml.doc "Full text explanation of the factor."]
      mixedContentType : MixedContentType.t;
          [@key "mixedContentType"]
          [@ocaml.doc "The type of mixed content described by the explanation."]
      certificate : string list;
          [@key "certificate"] [@ocaml.doc "Page certificate."]
      recommendations : string list option;
          [@key "recommendations"]
          [@yojson.option]
          [@ocaml.doc "Recommendations to fix any issues."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "An explanation of an factor contributing to the security state."]
  end

  and InsecureContentStatus : sig
    type t = {
      ranMixedContent : bool;
          [@key "ranMixedContent"] [@ocaml.doc "Always false."]
      displayedMixedContent : bool;
          [@key "displayedMixedContent"] [@ocaml.doc "Always false."]
      containedMixedForm : bool;
          [@key "containedMixedForm"] [@ocaml.doc "Always false."]
      ranContentWithCertErrors : bool;
          [@key "ranContentWithCertErrors"] [@ocaml.doc "Always false."]
      displayedContentWithCertErrors : bool;
          [@key "displayedContentWithCertErrors"] [@ocaml.doc "Always false."]
      ranInsecureContentStyle : SecurityState.t;
          [@key "ranInsecureContentStyle"] [@ocaml.doc "Always set to unknown."]
      displayedInsecureContentStyle : SecurityState.t;
          [@key "displayedInsecureContentStyle"]
          [@ocaml.doc "Always set to unknown."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about insecure content on the page."]
  end

  and CertificateErrorAction : sig
    type _certificateerroraction = [ `continue | `cancel ]

    val _certificateerroraction_of_yojson :
      Yojson.Basic.t -> _certificateerroraction

    val yojson_of__certificateerroraction :
      _certificateerroraction -> Yojson.Basic.t

    type t = _certificateerroraction
    [@@deriving yojson]
    [@@ocaml.doc
      "The action to take when a certificate error occurs. continue will \
       continue processing the\n\
       request and cancel will cancel the request."]
  end
end = struct
  module rec CertificateId : sig
    type t = number
    [@@deriving yojson] [@@ocaml.doc "An internal certificate ID value."]
  end = struct
    type t = number
    [@@deriving yojson] [@@ocaml.doc "An internal certificate ID value."]
  end

  and MixedContentType : sig
    type _mixedcontenttype = [ `blockable | `optionally_blockable | `none ]

    val _mixedcontenttype_of_yojson : Yojson.Basic.t -> _mixedcontenttype
    val yojson_of__mixedcontenttype : _mixedcontenttype -> Yojson.Basic.t

    type t = _mixedcontenttype
    [@@deriving yojson]
    [@@ocaml.doc
      "A description of mixed content (HTTP resources on HTTPS pages), as \
       defined by\n\
       https://www.w3.org/TR/mixed-content/#categories"]
  end = struct
    type _mixedcontenttype = [ `blockable | `optionally_blockable | `none ]

    let _mixedcontenttype_of_yojson = function
      | `String "blockable" -> `blockable
      | `String "optionally-blockable" -> `optionally_blockable
      | `String "none" -> `none
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__mixedcontenttype = function
      | `blockable -> `String "blockable"
      | `optionally_blockable -> `String "optionally-blockable"
      | `none -> `String "none"

    type t = _mixedcontenttype
    [@@deriving yojson]
    [@@ocaml.doc
      "A description of mixed content (HTTP resources on HTTPS pages), as \
       defined by\n\
       https://www.w3.org/TR/mixed-content/#categories"]
  end

  and SecurityState : sig
    type _securitystate =
      [ `unknown | `neutral | `insecure | `secure | `info | `insecure_broken ]

    val _securitystate_of_yojson : Yojson.Basic.t -> _securitystate
    val yojson_of__securitystate : _securitystate -> Yojson.Basic.t

    type t = _securitystate
    [@@deriving yojson]
    [@@ocaml.doc "The security level of a page or resource."]
  end = struct
    type _securitystate =
      [ `unknown | `neutral | `insecure | `secure | `info | `insecure_broken ]

    let _securitystate_of_yojson = function
      | `String "unknown" -> `unknown
      | `String "neutral" -> `neutral
      | `String "insecure" -> `insecure
      | `String "secure" -> `secure
      | `String "info" -> `info
      | `String "insecure-broken" -> `insecure_broken
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__securitystate = function
      | `unknown -> `String "unknown"
      | `neutral -> `String "neutral"
      | `insecure -> `String "insecure"
      | `secure -> `String "secure"
      | `info -> `String "info"
      | `insecure_broken -> `String "insecure-broken"

    type t = _securitystate
    [@@deriving yojson]
    [@@ocaml.doc "The security level of a page or resource."]
  end

  and CertificateSecurityState : sig
    type t = {
      protocol : string;
          [@key "protocol"]
          [@ocaml.doc "Protocol name (e.g. \"TLS 1.2\" or \"QUIC\")."]
      keyExchange : string;
          [@key "keyExchange"]
          [@ocaml.doc
            "Key Exchange used by the connection, or the empty string if not \
             applicable."]
      keyExchangeGroup : string option;
          [@key "keyExchangeGroup"]
          [@yojson.option]
          [@ocaml.doc "(EC)DH group used by the connection, if applicable."]
      cipher : string; [@key "cipher"] [@ocaml.doc "Cipher name."]
      mac : string option;
          [@key "mac"]
          [@yojson.option]
          [@ocaml.doc
            "TLS MAC. Note that AEAD ciphers do not have separate MACs."]
      certificate : string list;
          [@key "certificate"] [@ocaml.doc "Page certificate."]
      subjectName : string;
          [@key "subjectName"] [@ocaml.doc "Certificate subject name."]
      issuer : string; [@key "issuer"] [@ocaml.doc "Name of the issuing CA."]
      validFrom : Network.TimeSinceEpoch.t;
          [@key "validFrom"] [@ocaml.doc "Certificate valid from date."]
      validTo : Network.TimeSinceEpoch.t;
          [@key "validTo"] [@ocaml.doc "Certificate valid to (expiration) date"]
      certificateNetworkError : string option;
          [@key "certificateNetworkError"]
          [@yojson.option]
          [@ocaml.doc
            "The highest priority network error code, if the certificate has \
             an error."]
      certificateHasWeakSignature : bool;
          [@key "certificateHasWeakSignature"]
          [@ocaml.doc
            "True if the certificate uses a weak signature aglorithm."]
      certificateHasSha1Signature : bool;
          [@key "certificateHasSha1Signature"]
          [@ocaml.doc
            "True if the certificate has a SHA1 signature in the chain."]
      modernSSL : bool; [@key "modernSSL"] [@ocaml.doc "True if modern SSL"]
      obsoleteSslProtocol : bool;
          [@key "obsoleteSslProtocol"]
          [@ocaml.doc
            "True if the connection is using an obsolete SSL protocol."]
      obsoleteSslKeyExchange : bool;
          [@key "obsoleteSslKeyExchange"]
          [@ocaml.doc
            "True if the connection is using an obsolete SSL key exchange."]
      obsoleteSslCipher : bool;
          [@key "obsoleteSslCipher"]
          [@ocaml.doc "True if the connection is using an obsolete SSL cipher."]
      obsoleteSslSignature : bool;
          [@key "obsoleteSslSignature"]
          [@ocaml.doc
            "True if the connection is using an obsolete SSL signature."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Details about the security state of the page certificate."]
  end = struct
    type t = {
      protocol : string;
          [@key "protocol"]
          [@ocaml.doc "Protocol name (e.g. \"TLS 1.2\" or \"QUIC\")."]
      keyExchange : string;
          [@key "keyExchange"]
          [@ocaml.doc
            "Key Exchange used by the connection, or the empty string if not \
             applicable."]
      keyExchangeGroup : string option;
          [@key "keyExchangeGroup"]
          [@yojson.option]
          [@ocaml.doc "(EC)DH group used by the connection, if applicable."]
      cipher : string; [@key "cipher"] [@ocaml.doc "Cipher name."]
      mac : string option;
          [@key "mac"]
          [@yojson.option]
          [@ocaml.doc
            "TLS MAC. Note that AEAD ciphers do not have separate MACs."]
      certificate : string list;
          [@key "certificate"] [@ocaml.doc "Page certificate."]
      subjectName : string;
          [@key "subjectName"] [@ocaml.doc "Certificate subject name."]
      issuer : string; [@key "issuer"] [@ocaml.doc "Name of the issuing CA."]
      validFrom : Network.TimeSinceEpoch.t;
          [@key "validFrom"] [@ocaml.doc "Certificate valid from date."]
      validTo : Network.TimeSinceEpoch.t;
          [@key "validTo"] [@ocaml.doc "Certificate valid to (expiration) date"]
      certificateNetworkError : string option;
          [@key "certificateNetworkError"]
          [@yojson.option]
          [@ocaml.doc
            "The highest priority network error code, if the certificate has \
             an error."]
      certificateHasWeakSignature : bool;
          [@key "certificateHasWeakSignature"]
          [@ocaml.doc
            "True if the certificate uses a weak signature aglorithm."]
      certificateHasSha1Signature : bool;
          [@key "certificateHasSha1Signature"]
          [@ocaml.doc
            "True if the certificate has a SHA1 signature in the chain."]
      modernSSL : bool; [@key "modernSSL"] [@ocaml.doc "True if modern SSL"]
      obsoleteSslProtocol : bool;
          [@key "obsoleteSslProtocol"]
          [@ocaml.doc
            "True if the connection is using an obsolete SSL protocol."]
      obsoleteSslKeyExchange : bool;
          [@key "obsoleteSslKeyExchange"]
          [@ocaml.doc
            "True if the connection is using an obsolete SSL key exchange."]
      obsoleteSslCipher : bool;
          [@key "obsoleteSslCipher"]
          [@ocaml.doc "True if the connection is using an obsolete SSL cipher."]
      obsoleteSslSignature : bool;
          [@key "obsoleteSslSignature"]
          [@ocaml.doc
            "True if the connection is using an obsolete SSL signature."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Details about the security state of the page certificate."]
  end

  and SafetyTipStatus : sig
    type _safetytipstatus = [ `badReputation | `lookalike ]

    val _safetytipstatus_of_yojson : Yojson.Basic.t -> _safetytipstatus
    val yojson_of__safetytipstatus : _safetytipstatus -> Yojson.Basic.t

    type t = _safetytipstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _safetytipstatus = [ `badReputation | `lookalike ]

    let _safetytipstatus_of_yojson = function
      | `String "badReputation" -> `badReputation
      | `String "lookalike" -> `lookalike
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__safetytipstatus = function
      | `badReputation -> `String "badReputation"
      | `lookalike -> `String "lookalike"

    type t = _safetytipstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SafetyTipInfo : sig
    type t = {
      safetyTipStatus : SafetyTipStatus.t;
          [@key "safetyTipStatus"]
          [@ocaml.doc
            "Describes whether the page triggers any safety tips or reputation \
             warnings. Default is unknown."]
      safeUrl : string option;
          [@key "safeUrl"]
          [@yojson.option]
          [@ocaml.doc
            "The URL the safety tip suggested (\"Did you mean?\"). Only filled \
             in for lookalike matches."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      safetyTipStatus : SafetyTipStatus.t;
          [@key "safetyTipStatus"]
          [@ocaml.doc
            "Describes whether the page triggers any safety tips or reputation \
             warnings. Default is unknown."]
      safeUrl : string option;
          [@key "safeUrl"]
          [@yojson.option]
          [@ocaml.doc
            "The URL the safety tip suggested (\"Did you mean?\"). Only filled \
             in for lookalike matches."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and VisibleSecurityState : sig
    type t = {
      securityState : SecurityState.t;
          [@key "securityState"] [@ocaml.doc "The security level of the page."]
      certificateSecurityState : CertificateSecurityState.t option;
          [@key "certificateSecurityState"]
          [@yojson.option]
          [@ocaml.doc "Security state details about the page certificate."]
      safetyTipInfo : SafetyTipInfo.t option;
          [@key "safetyTipInfo"]
          [@yojson.option]
          [@ocaml.doc
            "The type of Safety Tip triggered on the page. Note that this \
             field will be set even if the Safety Tip UI was not actually \
             shown."]
      securityStateIssueIds : string list;
          [@key "securityStateIssueIds"]
          [@ocaml.doc "Array of security state issues ids."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Security state information about the page."]
  end = struct
    type t = {
      securityState : SecurityState.t;
          [@key "securityState"] [@ocaml.doc "The security level of the page."]
      certificateSecurityState : CertificateSecurityState.t option;
          [@key "certificateSecurityState"]
          [@yojson.option]
          [@ocaml.doc "Security state details about the page certificate."]
      safetyTipInfo : SafetyTipInfo.t option;
          [@key "safetyTipInfo"]
          [@yojson.option]
          [@ocaml.doc
            "The type of Safety Tip triggered on the page. Note that this \
             field will be set even if the Safety Tip UI was not actually \
             shown."]
      securityStateIssueIds : string list;
          [@key "securityStateIssueIds"]
          [@ocaml.doc "Array of security state issues ids."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Security state information about the page."]
  end

  and SecurityStateExplanation : sig
    type t = {
      securityState : SecurityState.t;
          [@key "securityState"]
          [@ocaml.doc
            "Security state representing the severity of the factor being \
             explained."]
      title : string;
          [@key "title"] [@ocaml.doc "Title describing the type of factor."]
      summary : string;
          [@key "summary"]
          [@ocaml.doc "Short phrase describing the type of factor."]
      description : string;
          [@key "description"]
          [@ocaml.doc "Full text explanation of the factor."]
      mixedContentType : MixedContentType.t;
          [@key "mixedContentType"]
          [@ocaml.doc "The type of mixed content described by the explanation."]
      certificate : string list;
          [@key "certificate"] [@ocaml.doc "Page certificate."]
      recommendations : string list option;
          [@key "recommendations"]
          [@yojson.option]
          [@ocaml.doc "Recommendations to fix any issues."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "An explanation of an factor contributing to the security state."]
  end = struct
    type t = {
      securityState : SecurityState.t;
          [@key "securityState"]
          [@ocaml.doc
            "Security state representing the severity of the factor being \
             explained."]
      title : string;
          [@key "title"] [@ocaml.doc "Title describing the type of factor."]
      summary : string;
          [@key "summary"]
          [@ocaml.doc "Short phrase describing the type of factor."]
      description : string;
          [@key "description"]
          [@ocaml.doc "Full text explanation of the factor."]
      mixedContentType : MixedContentType.t;
          [@key "mixedContentType"]
          [@ocaml.doc "The type of mixed content described by the explanation."]
      certificate : string list;
          [@key "certificate"] [@ocaml.doc "Page certificate."]
      recommendations : string list option;
          [@key "recommendations"]
          [@yojson.option]
          [@ocaml.doc "Recommendations to fix any issues."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "An explanation of an factor contributing to the security state."]
  end

  and InsecureContentStatus : sig
    type t = {
      ranMixedContent : bool;
          [@key "ranMixedContent"] [@ocaml.doc "Always false."]
      displayedMixedContent : bool;
          [@key "displayedMixedContent"] [@ocaml.doc "Always false."]
      containedMixedForm : bool;
          [@key "containedMixedForm"] [@ocaml.doc "Always false."]
      ranContentWithCertErrors : bool;
          [@key "ranContentWithCertErrors"] [@ocaml.doc "Always false."]
      displayedContentWithCertErrors : bool;
          [@key "displayedContentWithCertErrors"] [@ocaml.doc "Always false."]
      ranInsecureContentStyle : SecurityState.t;
          [@key "ranInsecureContentStyle"] [@ocaml.doc "Always set to unknown."]
      displayedInsecureContentStyle : SecurityState.t;
          [@key "displayedInsecureContentStyle"]
          [@ocaml.doc "Always set to unknown."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about insecure content on the page."]
  end = struct
    type t = {
      ranMixedContent : bool;
          [@key "ranMixedContent"] [@ocaml.doc "Always false."]
      displayedMixedContent : bool;
          [@key "displayedMixedContent"] [@ocaml.doc "Always false."]
      containedMixedForm : bool;
          [@key "containedMixedForm"] [@ocaml.doc "Always false."]
      ranContentWithCertErrors : bool;
          [@key "ranContentWithCertErrors"] [@ocaml.doc "Always false."]
      displayedContentWithCertErrors : bool;
          [@key "displayedContentWithCertErrors"] [@ocaml.doc "Always false."]
      ranInsecureContentStyle : SecurityState.t;
          [@key "ranInsecureContentStyle"] [@ocaml.doc "Always set to unknown."]
      displayedInsecureContentStyle : SecurityState.t;
          [@key "displayedInsecureContentStyle"]
          [@ocaml.doc "Always set to unknown."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Information about insecure content on the page."]
  end

  and CertificateErrorAction : sig
    type _certificateerroraction = [ `continue | `cancel ]

    val _certificateerroraction_of_yojson :
      Yojson.Basic.t -> _certificateerroraction

    val yojson_of__certificateerroraction :
      _certificateerroraction -> Yojson.Basic.t

    type t = _certificateerroraction
    [@@deriving yojson]
    [@@ocaml.doc
      "The action to take when a certificate error occurs. continue will \
       continue processing the\n\
       request and cancel will cancel the request."]
  end = struct
    type _certificateerroraction = [ `continue | `cancel ]

    let _certificateerroraction_of_yojson = function
      | `String "continue" -> `continue
      | `String "cancel" -> `cancel
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__certificateerroraction = function
      | `continue -> `String "continue"
      | `cancel -> `String "cancel"

    type t = _certificateerroraction
    [@@deriving yojson]
    [@@ocaml.doc
      "The action to take when a certificate error occurs. continue will \
       continue processing the\n\
       request and cancel will cancel the request."]
  end
end

and ServiceWorker : sig
  module rec RegistrationID : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ServiceWorkerRegistration : sig
    type t = {
      registrationId : RegistrationID.t;
          [@key "registrationId"] [@ocaml.doc "No description provided"]
      scopeURL : string;
          [@key "scopeURL"] [@ocaml.doc "No description provided"]
      isDeleted : bool; [@key "isDeleted"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "ServiceWorker registration."]
  end

  and ServiceWorkerVersionRunningStatus : sig
    type _serviceworkerversionrunningstatus =
      [ `stopped | `starting | `running | `stopping ]

    val _serviceworkerversionrunningstatus_of_yojson :
      Yojson.Basic.t -> _serviceworkerversionrunningstatus

    val yojson_of__serviceworkerversionrunningstatus :
      _serviceworkerversionrunningstatus -> Yojson.Basic.t

    type t = _serviceworkerversionrunningstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ServiceWorkerVersionStatus : sig
    type _serviceworkerversionstatus =
      [ `new_
      | `installing
      | `installed
      | `activating
      | `activated
      | `redundant ]

    val _serviceworkerversionstatus_of_yojson :
      Yojson.Basic.t -> _serviceworkerversionstatus

    val yojson_of__serviceworkerversionstatus :
      _serviceworkerversionstatus -> Yojson.Basic.t

    type t = _serviceworkerversionstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ServiceWorkerVersion : sig
    type t = {
      versionId : string;
          [@key "versionId"] [@ocaml.doc "No description provided"]
      registrationId : RegistrationID.t;
          [@key "registrationId"] [@ocaml.doc "No description provided"]
      scriptURL : string;
          [@key "scriptURL"] [@ocaml.doc "No description provided"]
      runningStatus : ServiceWorkerVersionRunningStatus.t;
          [@key "runningStatus"] [@ocaml.doc "No description provided"]
      status : ServiceWorkerVersionStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
      scriptLastModified : number option;
          [@key "scriptLastModified"]
          [@yojson.option]
          [@ocaml.doc "The Last-Modified header value of the main script."]
      scriptResponseTime : number option;
          [@key "scriptResponseTime"]
          [@yojson.option]
          [@ocaml.doc
            "The time at which the response headers of the main script were \
             received from the server.\n\
             For cached script it is the last time the cache entry was \
             validated."]
      controlledClients : Target.TargetID.t list option;
          [@key "controlledClients"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      targetId : Target.TargetID.t option;
          [@key "targetId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "ServiceWorker version."]
  end

  and ServiceWorkerErrorMessage : sig
    type t = {
      errorMessage : string;
          [@key "errorMessage"] [@ocaml.doc "No description provided"]
      registrationId : RegistrationID.t;
          [@key "registrationId"] [@ocaml.doc "No description provided"]
      versionId : string;
          [@key "versionId"] [@ocaml.doc "No description provided"]
      sourceURL : string;
          [@key "sourceURL"] [@ocaml.doc "No description provided"]
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "No description provided"]
      columnNumber : number;
          [@key "columnNumber"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "ServiceWorker error message."]
  end
end = struct
  module rec RegistrationID : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ServiceWorkerRegistration : sig
    type t = {
      registrationId : RegistrationID.t;
          [@key "registrationId"] [@ocaml.doc "No description provided"]
      scopeURL : string;
          [@key "scopeURL"] [@ocaml.doc "No description provided"]
      isDeleted : bool; [@key "isDeleted"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "ServiceWorker registration."]
  end = struct
    type t = {
      registrationId : RegistrationID.t;
          [@key "registrationId"] [@ocaml.doc "No description provided"]
      scopeURL : string;
          [@key "scopeURL"] [@ocaml.doc "No description provided"]
      isDeleted : bool; [@key "isDeleted"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "ServiceWorker registration."]
  end

  and ServiceWorkerVersionRunningStatus : sig
    type _serviceworkerversionrunningstatus =
      [ `stopped | `starting | `running | `stopping ]

    val _serviceworkerversionrunningstatus_of_yojson :
      Yojson.Basic.t -> _serviceworkerversionrunningstatus

    val yojson_of__serviceworkerversionrunningstatus :
      _serviceworkerversionrunningstatus -> Yojson.Basic.t

    type t = _serviceworkerversionrunningstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _serviceworkerversionrunningstatus =
      [ `stopped | `starting | `running | `stopping ]

    let _serviceworkerversionrunningstatus_of_yojson = function
      | `String "stopped" -> `stopped
      | `String "starting" -> `starting
      | `String "running" -> `running
      | `String "stopping" -> `stopping
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__serviceworkerversionrunningstatus = function
      | `stopped -> `String "stopped"
      | `starting -> `String "starting"
      | `running -> `String "running"
      | `stopping -> `String "stopping"

    type t = _serviceworkerversionrunningstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ServiceWorkerVersionStatus : sig
    type _serviceworkerversionstatus =
      [ `new_
      | `installing
      | `installed
      | `activating
      | `activated
      | `redundant ]

    val _serviceworkerversionstatus_of_yojson :
      Yojson.Basic.t -> _serviceworkerversionstatus

    val yojson_of__serviceworkerversionstatus :
      _serviceworkerversionstatus -> Yojson.Basic.t

    type t = _serviceworkerversionstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _serviceworkerversionstatus =
      [ `new_
      | `installing
      | `installed
      | `activating
      | `activated
      | `redundant ]

    let _serviceworkerversionstatus_of_yojson = function
      | `String "new" -> `new_
      | `String "installing" -> `installing
      | `String "installed" -> `installed
      | `String "activating" -> `activating
      | `String "activated" -> `activated
      | `String "redundant" -> `redundant
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__serviceworkerversionstatus = function
      | `new_ -> `String "new"
      | `installing -> `String "installing"
      | `installed -> `String "installed"
      | `activating -> `String "activating"
      | `activated -> `String "activated"
      | `redundant -> `String "redundant"

    type t = _serviceworkerversionstatus
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ServiceWorkerVersion : sig
    type t = {
      versionId : string;
          [@key "versionId"] [@ocaml.doc "No description provided"]
      registrationId : RegistrationID.t;
          [@key "registrationId"] [@ocaml.doc "No description provided"]
      scriptURL : string;
          [@key "scriptURL"] [@ocaml.doc "No description provided"]
      runningStatus : ServiceWorkerVersionRunningStatus.t;
          [@key "runningStatus"] [@ocaml.doc "No description provided"]
      status : ServiceWorkerVersionStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
      scriptLastModified : number option;
          [@key "scriptLastModified"]
          [@yojson.option]
          [@ocaml.doc "The Last-Modified header value of the main script."]
      scriptResponseTime : number option;
          [@key "scriptResponseTime"]
          [@yojson.option]
          [@ocaml.doc
            "The time at which the response headers of the main script were \
             received from the server.\n\
             For cached script it is the last time the cache entry was \
             validated."]
      controlledClients : Target.TargetID.t list option;
          [@key "controlledClients"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      targetId : Target.TargetID.t option;
          [@key "targetId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "ServiceWorker version."]
  end = struct
    type t = {
      versionId : string;
          [@key "versionId"] [@ocaml.doc "No description provided"]
      registrationId : RegistrationID.t;
          [@key "registrationId"] [@ocaml.doc "No description provided"]
      scriptURL : string;
          [@key "scriptURL"] [@ocaml.doc "No description provided"]
      runningStatus : ServiceWorkerVersionRunningStatus.t;
          [@key "runningStatus"] [@ocaml.doc "No description provided"]
      status : ServiceWorkerVersionStatus.t;
          [@key "status"] [@ocaml.doc "No description provided"]
      scriptLastModified : number option;
          [@key "scriptLastModified"]
          [@yojson.option]
          [@ocaml.doc "The Last-Modified header value of the main script."]
      scriptResponseTime : number option;
          [@key "scriptResponseTime"]
          [@yojson.option]
          [@ocaml.doc
            "The time at which the response headers of the main script were \
             received from the server.\n\
             For cached script it is the last time the cache entry was \
             validated."]
      controlledClients : Target.TargetID.t list option;
          [@key "controlledClients"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      targetId : Target.TargetID.t option;
          [@key "targetId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "ServiceWorker version."]
  end

  and ServiceWorkerErrorMessage : sig
    type t = {
      errorMessage : string;
          [@key "errorMessage"] [@ocaml.doc "No description provided"]
      registrationId : RegistrationID.t;
          [@key "registrationId"] [@ocaml.doc "No description provided"]
      versionId : string;
          [@key "versionId"] [@ocaml.doc "No description provided"]
      sourceURL : string;
          [@key "sourceURL"] [@ocaml.doc "No description provided"]
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "No description provided"]
      columnNumber : number;
          [@key "columnNumber"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "ServiceWorker error message."]
  end = struct
    type t = {
      errorMessage : string;
          [@key "errorMessage"] [@ocaml.doc "No description provided"]
      registrationId : RegistrationID.t;
          [@key "registrationId"] [@ocaml.doc "No description provided"]
      versionId : string;
          [@key "versionId"] [@ocaml.doc "No description provided"]
      sourceURL : string;
          [@key "sourceURL"] [@ocaml.doc "No description provided"]
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "No description provided"]
      columnNumber : number;
          [@key "columnNumber"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "ServiceWorker error message."]
  end
end

and Storage : sig
  module rec SerializedStorageKey : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StorageType : sig
    type _storagetype =
      [ `appcache
      | `cookies
      | `file_systems
      | `indexeddb
      | `local_storage
      | `shader_cache
      | `websql
      | `service_workers
      | `cache_storage
      | `interest_groups
      | `shared_storage
      | `storage_buckets
      | `all
      | `other ]

    val _storagetype_of_yojson : Yojson.Basic.t -> _storagetype
    val yojson_of__storagetype : _storagetype -> Yojson.Basic.t

    type t = _storagetype
    [@@deriving yojson] [@@ocaml.doc "Enum of possible storage types."]
  end

  and UsageForType : sig
    type t = {
      storageType : StorageType.t;
          [@key "storageType"] [@ocaml.doc "Name of storage type."]
      usage : number; [@key "usage"] [@ocaml.doc "Storage usage (bytes)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Usage for a storage type."]
  end

  and TrustTokens : sig
    type t = {
      issuerOrigin : string;
          [@key "issuerOrigin"] [@ocaml.doc "No description provided"]
      count : number; [@key "count"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Pair of issuer origin and number of available (signed, but not used) \
       Trust\n\
       Tokens from that issuer."]
  end

  and InterestGroupAccessType : sig
    type _interestgroupaccesstype =
      [ `join | `leave | `update | `loaded | `bid | `win ]

    val _interestgroupaccesstype_of_yojson :
      Yojson.Basic.t -> _interestgroupaccesstype

    val yojson_of__interestgroupaccesstype :
      _interestgroupaccesstype -> Yojson.Basic.t

    type t = _interestgroupaccesstype
    [@@deriving yojson] [@@ocaml.doc "Enum of interest group access types."]
  end

  and InterestGroupAd : sig
    type t = {
      renderUrl : string;
          [@key "renderUrl"] [@ocaml.doc "No description provided"]
      metadata : string option;
          [@key "metadata"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Ad advertising element inside an interest group."]
  end

  and InterestGroupDetails : sig
    type t = {
      ownerOrigin : string;
          [@key "ownerOrigin"] [@ocaml.doc "No description provided"]
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      expirationTime : Network.TimeSinceEpoch.t;
          [@key "expirationTime"] [@ocaml.doc "No description provided"]
      joiningOrigin : string;
          [@key "joiningOrigin"] [@ocaml.doc "No description provided"]
      biddingUrl : string option;
          [@key "biddingUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      biddingWasmHelperUrl : string option;
          [@key "biddingWasmHelperUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      updateUrl : string option;
          [@key "updateUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      trustedBiddingSignalsUrl : string option;
          [@key "trustedBiddingSignalsUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      trustedBiddingSignalsKeys : string list;
          [@key "trustedBiddingSignalsKeys"]
          [@ocaml.doc "No description provided"]
      userBiddingSignals : string option;
          [@key "userBiddingSignals"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      ads : InterestGroupAd.t list;
          [@key "ads"] [@ocaml.doc "No description provided"]
      adComponents : InterestGroupAd.t list;
          [@key "adComponents"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "The full details of an interest group."]
  end

  and SharedStorageAccessType : sig
    type _sharedstorageaccesstype =
      [ `documentAddModule
      | `documentSelectURL
      | `documentRun
      | `documentSet
      | `documentAppend
      | `documentDelete
      | `documentClear
      | `workletSet
      | `workletAppend
      | `workletDelete
      | `workletClear
      | `workletGet
      | `workletKeys
      | `workletEntries
      | `workletLength
      | `workletRemainingBudget ]

    val _sharedstorageaccesstype_of_yojson :
      Yojson.Basic.t -> _sharedstorageaccesstype

    val yojson_of__sharedstorageaccesstype :
      _sharedstorageaccesstype -> Yojson.Basic.t

    type t = _sharedstorageaccesstype
    [@@deriving yojson] [@@ocaml.doc "Enum of shared storage access types."]
  end

  and SharedStorageEntry : sig
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Struct for a single key-value pair in an origin's shared storage."]
  end

  and SharedStorageMetadata : sig
    type t = {
      creationTime : Network.TimeSinceEpoch.t;
          [@key "creationTime"] [@ocaml.doc "No description provided"]
      length : number; [@key "length"] [@ocaml.doc "No description provided"]
      remainingBudget : number;
          [@key "remainingBudget"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Details for an origin's shared storage."]
  end

  and SharedStorageReportingMetadata : sig
    type t = {
      eventType : string;
          [@key "eventType"] [@ocaml.doc "No description provided"]
      reportingUrl : string;
          [@key "reportingUrl"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Pair of reporting metadata details for a candidate URL for \
       `selectURL()`."]
  end

  and SharedStorageUrlWithMetadata : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "Spec of candidate URL."]
      reportingMetadata : SharedStorageReportingMetadata.t list;
          [@key "reportingMetadata"]
          [@ocaml.doc "Any associated reporting metadata."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Bundles a candidate URL with its reporting metadata."]
  end

  and SharedStorageAccessParams : sig
    type t = {
      scriptSourceUrl : string option;
          [@key "scriptSourceUrl"]
          [@yojson.option]
          [@ocaml.doc
            "Spec of the module script URL.\n\
             Present only for SharedStorageAccessType.documentAddModule."]
      operationName : string option;
          [@key "operationName"]
          [@yojson.option]
          [@ocaml.doc
            "Name of the registered operation to be run.\n\
             Present only for SharedStorageAccessType.documentRun and\n\
             SharedStorageAccessType.documentSelectURL."]
      serializedData : string option;
          [@key "serializedData"]
          [@yojson.option]
          [@ocaml.doc
            "The operation's serialized data in bytes (converted to a string).\n\
             Present only for SharedStorageAccessType.documentRun and\n\
             SharedStorageAccessType.documentSelectURL."]
      urlsWithMetadata : SharedStorageUrlWithMetadata.t list option;
          [@key "urlsWithMetadata"]
          [@yojson.option]
          [@ocaml.doc
            "Array of candidate URLs' specs, along with any associated metadata.\n\
             Present only for SharedStorageAccessType.documentSelectURL."]
      key : string option;
          [@key "key"]
          [@yojson.option]
          [@ocaml.doc
            "Key for a specific entry in an origin's shared storage.\n\
             Present only for SharedStorageAccessType.documentSet,\n\
             SharedStorageAccessType.documentAppend,\n\
             SharedStorageAccessType.documentDelete,\n\
             SharedStorageAccessType.workletSet,\n\
             SharedStorageAccessType.workletAppend,\n\
             SharedStorageAccessType.workletDelete, and\n\
             SharedStorageAccessType.workletGet."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc
            "Value for a specific entry in an origin's shared storage.\n\
             Present only for SharedStorageAccessType.documentSet,\n\
             SharedStorageAccessType.documentAppend,\n\
             SharedStorageAccessType.workletSet, and\n\
             SharedStorageAccessType.workletAppend."]
      ignoreIfPresent : bool option;
          [@key "ignoreIfPresent"]
          [@yojson.option]
          [@ocaml.doc
            "Whether or not to set an entry for a key if that key is already \
             present.\n\
             Present only for SharedStorageAccessType.documentSet and\n\
             SharedStorageAccessType.workletSet."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Bundles the parameters for shared storage access events whose\n\
       presence/absence can vary according to SharedStorageAccessType."]
  end

  and StorageBucketsDurability : sig
    type _storagebucketsdurability = [ `relaxed | `strict ]

    val _storagebucketsdurability_of_yojson :
      Yojson.Basic.t -> _storagebucketsdurability

    val yojson_of__storagebucketsdurability :
      _storagebucketsdurability -> Yojson.Basic.t

    type t = _storagebucketsdurability
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StorageBucket : sig
    type t = {
      storageKey : SerializedStorageKey.t;
          [@key "storageKey"] [@ocaml.doc "No description provided"]
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc
            "If not specified, it is the default bucket of the storageKey."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StorageBucketInfo : sig
    type t = {
      bucket : StorageBucket.t;
          [@key "bucket"] [@ocaml.doc "No description provided"]
      id : string; [@key "id"] [@ocaml.doc "No description provided"]
      expiration : Network.TimeSinceEpoch.t;
          [@key "expiration"] [@ocaml.doc "No description provided"]
      quota : number; [@key "quota"] [@ocaml.doc "Storage quota (bytes)."]
      persistent : bool;
          [@key "persistent"] [@ocaml.doc "No description provided"]
      durability : StorageBucketsDurability.t;
          [@key "durability"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingSourceType : sig
    type _attributionreportingsourcetype = [ `navigation | `event ]

    val _attributionreportingsourcetype_of_yojson :
      Yojson.Basic.t -> _attributionreportingsourcetype

    val yojson_of__attributionreportingsourcetype :
      _attributionreportingsourcetype -> Yojson.Basic.t

    type t = _attributionreportingsourcetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and UnsignedInt64AsBase10 : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and UnsignedInt128AsBase16 : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SignedInt64AsBase10 : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingFilterDataEntry : sig
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      values : string list;
          [@key "values"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingAggregationKeysEntry : sig
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      value : UnsignedInt128AsBase16.t;
          [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingSourceRegistration : sig
    type t = {
      time : Network.TimeSinceEpoch.t;
          [@key "time"] [@ocaml.doc "No description provided"]
      expiry : number option;
          [@key "expiry"] [@yojson.option] [@ocaml.doc "duration in seconds"]
      eventReportWindow : number option;
          [@key "eventReportWindow"]
          [@yojson.option]
          [@ocaml.doc "duration in seconds"]
      aggregatableReportWindow : number option;
          [@key "aggregatableReportWindow"]
          [@yojson.option]
          [@ocaml.doc "duration in seconds"]
      type_ : AttributionReportingSourceType.t;
          [@key "type"] [@ocaml.doc "No description provided"]
      sourceOrigin : string;
          [@key "sourceOrigin"] [@ocaml.doc "No description provided"]
      reportingOrigin : string;
          [@key "reportingOrigin"] [@ocaml.doc "No description provided"]
      destinationSites : string list;
          [@key "destinationSites"] [@ocaml.doc "No description provided"]
      eventId : UnsignedInt64AsBase10.t;
          [@key "eventId"] [@ocaml.doc "No description provided"]
      priority : SignedInt64AsBase10.t;
          [@key "priority"] [@ocaml.doc "No description provided"]
      filterData : AttributionReportingFilterDataEntry.t list;
          [@key "filterData"] [@ocaml.doc "No description provided"]
      aggregationKeys : AttributionReportingAggregationKeysEntry.t list;
          [@key "aggregationKeys"] [@ocaml.doc "No description provided"]
      debugKey : UnsignedInt64AsBase10.t option;
          [@key "debugKey"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingSourceRegistrationResult : sig
    type _attributionreportingsourceregistrationresult =
      [ `success
      | `internalError
      | `insufficientSourceCapacity
      | `insufficientUniqueDestinationCapacity
      | `excessiveReportingOrigins
      | `prohibitedByBrowserPolicy
      | `successNoised
      | `destinationReportingLimitReached
      | `destinationGlobalLimitReached
      | `destinationBothLimitsReached
      | `reportingOriginsPerSiteLimitReached ]

    val _attributionreportingsourceregistrationresult_of_yojson :
      Yojson.Basic.t -> _attributionreportingsourceregistrationresult

    val yojson_of__attributionreportingsourceregistrationresult :
      _attributionreportingsourceregistrationresult -> Yojson.Basic.t

    type t = _attributionreportingsourceregistrationresult
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec SerializedStorageKey : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StorageType : sig
    type _storagetype =
      [ `appcache
      | `cookies
      | `file_systems
      | `indexeddb
      | `local_storage
      | `shader_cache
      | `websql
      | `service_workers
      | `cache_storage
      | `interest_groups
      | `shared_storage
      | `storage_buckets
      | `all
      | `other ]

    val _storagetype_of_yojson : Yojson.Basic.t -> _storagetype
    val yojson_of__storagetype : _storagetype -> Yojson.Basic.t

    type t = _storagetype
    [@@deriving yojson] [@@ocaml.doc "Enum of possible storage types."]
  end = struct
    type _storagetype =
      [ `appcache
      | `cookies
      | `file_systems
      | `indexeddb
      | `local_storage
      | `shader_cache
      | `websql
      | `service_workers
      | `cache_storage
      | `interest_groups
      | `shared_storage
      | `storage_buckets
      | `all
      | `other ]

    let _storagetype_of_yojson = function
      | `String "appcache" -> `appcache
      | `String "cookies" -> `cookies
      | `String "file_systems" -> `file_systems
      | `String "indexeddb" -> `indexeddb
      | `String "local_storage" -> `local_storage
      | `String "shader_cache" -> `shader_cache
      | `String "websql" -> `websql
      | `String "service_workers" -> `service_workers
      | `String "cache_storage" -> `cache_storage
      | `String "interest_groups" -> `interest_groups
      | `String "shared_storage" -> `shared_storage
      | `String "storage_buckets" -> `storage_buckets
      | `String "all" -> `all
      | `String "other" -> `other
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__storagetype = function
      | `appcache -> `String "appcache"
      | `cookies -> `String "cookies"
      | `file_systems -> `String "file_systems"
      | `indexeddb -> `String "indexeddb"
      | `local_storage -> `String "local_storage"
      | `shader_cache -> `String "shader_cache"
      | `websql -> `String "websql"
      | `service_workers -> `String "service_workers"
      | `cache_storage -> `String "cache_storage"
      | `interest_groups -> `String "interest_groups"
      | `shared_storage -> `String "shared_storage"
      | `storage_buckets -> `String "storage_buckets"
      | `all -> `String "all"
      | `other -> `String "other"

    type t = _storagetype
    [@@deriving yojson] [@@ocaml.doc "Enum of possible storage types."]
  end

  and UsageForType : sig
    type t = {
      storageType : StorageType.t;
          [@key "storageType"] [@ocaml.doc "Name of storage type."]
      usage : number; [@key "usage"] [@ocaml.doc "Storage usage (bytes)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Usage for a storage type."]
  end = struct
    type t = {
      storageType : StorageType.t;
          [@key "storageType"] [@ocaml.doc "Name of storage type."]
      usage : number; [@key "usage"] [@ocaml.doc "Storage usage (bytes)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Usage for a storage type."]
  end

  and TrustTokens : sig
    type t = {
      issuerOrigin : string;
          [@key "issuerOrigin"] [@ocaml.doc "No description provided"]
      count : number; [@key "count"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Pair of issuer origin and number of available (signed, but not used) \
       Trust\n\
       Tokens from that issuer."]
  end = struct
    type t = {
      issuerOrigin : string;
          [@key "issuerOrigin"] [@ocaml.doc "No description provided"]
      count : number; [@key "count"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Pair of issuer origin and number of available (signed, but not used) \
       Trust\n\
       Tokens from that issuer."]
  end

  and InterestGroupAccessType : sig
    type _interestgroupaccesstype =
      [ `join | `leave | `update | `loaded | `bid | `win ]

    val _interestgroupaccesstype_of_yojson :
      Yojson.Basic.t -> _interestgroupaccesstype

    val yojson_of__interestgroupaccesstype :
      _interestgroupaccesstype -> Yojson.Basic.t

    type t = _interestgroupaccesstype
    [@@deriving yojson] [@@ocaml.doc "Enum of interest group access types."]
  end = struct
    type _interestgroupaccesstype =
      [ `join | `leave | `update | `loaded | `bid | `win ]

    let _interestgroupaccesstype_of_yojson = function
      | `String "join" -> `join
      | `String "leave" -> `leave
      | `String "update" -> `update
      | `String "loaded" -> `loaded
      | `String "bid" -> `bid
      | `String "win" -> `win
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__interestgroupaccesstype = function
      | `join -> `String "join"
      | `leave -> `String "leave"
      | `update -> `String "update"
      | `loaded -> `String "loaded"
      | `bid -> `String "bid"
      | `win -> `String "win"

    type t = _interestgroupaccesstype
    [@@deriving yojson] [@@ocaml.doc "Enum of interest group access types."]
  end

  and InterestGroupAd : sig
    type t = {
      renderUrl : string;
          [@key "renderUrl"] [@ocaml.doc "No description provided"]
      metadata : string option;
          [@key "metadata"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Ad advertising element inside an interest group."]
  end = struct
    type t = {
      renderUrl : string;
          [@key "renderUrl"] [@ocaml.doc "No description provided"]
      metadata : string option;
          [@key "metadata"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Ad advertising element inside an interest group."]
  end

  and InterestGroupDetails : sig
    type t = {
      ownerOrigin : string;
          [@key "ownerOrigin"] [@ocaml.doc "No description provided"]
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      expirationTime : Network.TimeSinceEpoch.t;
          [@key "expirationTime"] [@ocaml.doc "No description provided"]
      joiningOrigin : string;
          [@key "joiningOrigin"] [@ocaml.doc "No description provided"]
      biddingUrl : string option;
          [@key "biddingUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      biddingWasmHelperUrl : string option;
          [@key "biddingWasmHelperUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      updateUrl : string option;
          [@key "updateUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      trustedBiddingSignalsUrl : string option;
          [@key "trustedBiddingSignalsUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      trustedBiddingSignalsKeys : string list;
          [@key "trustedBiddingSignalsKeys"]
          [@ocaml.doc "No description provided"]
      userBiddingSignals : string option;
          [@key "userBiddingSignals"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      ads : InterestGroupAd.t list;
          [@key "ads"] [@ocaml.doc "No description provided"]
      adComponents : InterestGroupAd.t list;
          [@key "adComponents"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "The full details of an interest group."]
  end = struct
    type t = {
      ownerOrigin : string;
          [@key "ownerOrigin"] [@ocaml.doc "No description provided"]
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      expirationTime : Network.TimeSinceEpoch.t;
          [@key "expirationTime"] [@ocaml.doc "No description provided"]
      joiningOrigin : string;
          [@key "joiningOrigin"] [@ocaml.doc "No description provided"]
      biddingUrl : string option;
          [@key "biddingUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      biddingWasmHelperUrl : string option;
          [@key "biddingWasmHelperUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      updateUrl : string option;
          [@key "updateUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      trustedBiddingSignalsUrl : string option;
          [@key "trustedBiddingSignalsUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      trustedBiddingSignalsKeys : string list;
          [@key "trustedBiddingSignalsKeys"]
          [@ocaml.doc "No description provided"]
      userBiddingSignals : string option;
          [@key "userBiddingSignals"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      ads : InterestGroupAd.t list;
          [@key "ads"] [@ocaml.doc "No description provided"]
      adComponents : InterestGroupAd.t list;
          [@key "adComponents"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "The full details of an interest group."]
  end

  and SharedStorageAccessType : sig
    type _sharedstorageaccesstype =
      [ `documentAddModule
      | `documentSelectURL
      | `documentRun
      | `documentSet
      | `documentAppend
      | `documentDelete
      | `documentClear
      | `workletSet
      | `workletAppend
      | `workletDelete
      | `workletClear
      | `workletGet
      | `workletKeys
      | `workletEntries
      | `workletLength
      | `workletRemainingBudget ]

    val _sharedstorageaccesstype_of_yojson :
      Yojson.Basic.t -> _sharedstorageaccesstype

    val yojson_of__sharedstorageaccesstype :
      _sharedstorageaccesstype -> Yojson.Basic.t

    type t = _sharedstorageaccesstype
    [@@deriving yojson] [@@ocaml.doc "Enum of shared storage access types."]
  end = struct
    type _sharedstorageaccesstype =
      [ `documentAddModule
      | `documentSelectURL
      | `documentRun
      | `documentSet
      | `documentAppend
      | `documentDelete
      | `documentClear
      | `workletSet
      | `workletAppend
      | `workletDelete
      | `workletClear
      | `workletGet
      | `workletKeys
      | `workletEntries
      | `workletLength
      | `workletRemainingBudget ]

    let _sharedstorageaccesstype_of_yojson = function
      | `String "documentAddModule" -> `documentAddModule
      | `String "documentSelectURL" -> `documentSelectURL
      | `String "documentRun" -> `documentRun
      | `String "documentSet" -> `documentSet
      | `String "documentAppend" -> `documentAppend
      | `String "documentDelete" -> `documentDelete
      | `String "documentClear" -> `documentClear
      | `String "workletSet" -> `workletSet
      | `String "workletAppend" -> `workletAppend
      | `String "workletDelete" -> `workletDelete
      | `String "workletClear" -> `workletClear
      | `String "workletGet" -> `workletGet
      | `String "workletKeys" -> `workletKeys
      | `String "workletEntries" -> `workletEntries
      | `String "workletLength" -> `workletLength
      | `String "workletRemainingBudget" -> `workletRemainingBudget
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__sharedstorageaccesstype = function
      | `documentAddModule -> `String "documentAddModule"
      | `documentSelectURL -> `String "documentSelectURL"
      | `documentRun -> `String "documentRun"
      | `documentSet -> `String "documentSet"
      | `documentAppend -> `String "documentAppend"
      | `documentDelete -> `String "documentDelete"
      | `documentClear -> `String "documentClear"
      | `workletSet -> `String "workletSet"
      | `workletAppend -> `String "workletAppend"
      | `workletDelete -> `String "workletDelete"
      | `workletClear -> `String "workletClear"
      | `workletGet -> `String "workletGet"
      | `workletKeys -> `String "workletKeys"
      | `workletEntries -> `String "workletEntries"
      | `workletLength -> `String "workletLength"
      | `workletRemainingBudget -> `String "workletRemainingBudget"

    type t = _sharedstorageaccesstype
    [@@deriving yojson] [@@ocaml.doc "Enum of shared storage access types."]
  end

  and SharedStorageEntry : sig
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Struct for a single key-value pair in an origin's shared storage."]
  end = struct
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Struct for a single key-value pair in an origin's shared storage."]
  end

  and SharedStorageMetadata : sig
    type t = {
      creationTime : Network.TimeSinceEpoch.t;
          [@key "creationTime"] [@ocaml.doc "No description provided"]
      length : number; [@key "length"] [@ocaml.doc "No description provided"]
      remainingBudget : number;
          [@key "remainingBudget"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Details for an origin's shared storage."]
  end = struct
    type t = {
      creationTime : Network.TimeSinceEpoch.t;
          [@key "creationTime"] [@ocaml.doc "No description provided"]
      length : number; [@key "length"] [@ocaml.doc "No description provided"]
      remainingBudget : number;
          [@key "remainingBudget"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Details for an origin's shared storage."]
  end

  and SharedStorageReportingMetadata : sig
    type t = {
      eventType : string;
          [@key "eventType"] [@ocaml.doc "No description provided"]
      reportingUrl : string;
          [@key "reportingUrl"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Pair of reporting metadata details for a candidate URL for \
       `selectURL()`."]
  end = struct
    type t = {
      eventType : string;
          [@key "eventType"] [@ocaml.doc "No description provided"]
      reportingUrl : string;
          [@key "reportingUrl"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Pair of reporting metadata details for a candidate URL for \
       `selectURL()`."]
  end

  and SharedStorageUrlWithMetadata : sig
    type t = {
      url : string; [@key "url"] [@ocaml.doc "Spec of candidate URL."]
      reportingMetadata : SharedStorageReportingMetadata.t list;
          [@key "reportingMetadata"]
          [@ocaml.doc "Any associated reporting metadata."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Bundles a candidate URL with its reporting metadata."]
  end = struct
    type t = {
      url : string; [@key "url"] [@ocaml.doc "Spec of candidate URL."]
      reportingMetadata : SharedStorageReportingMetadata.t list;
          [@key "reportingMetadata"]
          [@ocaml.doc "Any associated reporting metadata."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Bundles a candidate URL with its reporting metadata."]
  end

  and SharedStorageAccessParams : sig
    type t = {
      scriptSourceUrl : string option;
          [@key "scriptSourceUrl"]
          [@yojson.option]
          [@ocaml.doc
            "Spec of the module script URL.\n\
             Present only for SharedStorageAccessType.documentAddModule."]
      operationName : string option;
          [@key "operationName"]
          [@yojson.option]
          [@ocaml.doc
            "Name of the registered operation to be run.\n\
             Present only for SharedStorageAccessType.documentRun and\n\
             SharedStorageAccessType.documentSelectURL."]
      serializedData : string option;
          [@key "serializedData"]
          [@yojson.option]
          [@ocaml.doc
            "The operation's serialized data in bytes (converted to a string).\n\
             Present only for SharedStorageAccessType.documentRun and\n\
             SharedStorageAccessType.documentSelectURL."]
      urlsWithMetadata : SharedStorageUrlWithMetadata.t list option;
          [@key "urlsWithMetadata"]
          [@yojson.option]
          [@ocaml.doc
            "Array of candidate URLs' specs, along with any associated metadata.\n\
             Present only for SharedStorageAccessType.documentSelectURL."]
      key : string option;
          [@key "key"]
          [@yojson.option]
          [@ocaml.doc
            "Key for a specific entry in an origin's shared storage.\n\
             Present only for SharedStorageAccessType.documentSet,\n\
             SharedStorageAccessType.documentAppend,\n\
             SharedStorageAccessType.documentDelete,\n\
             SharedStorageAccessType.workletSet,\n\
             SharedStorageAccessType.workletAppend,\n\
             SharedStorageAccessType.workletDelete, and\n\
             SharedStorageAccessType.workletGet."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc
            "Value for a specific entry in an origin's shared storage.\n\
             Present only for SharedStorageAccessType.documentSet,\n\
             SharedStorageAccessType.documentAppend,\n\
             SharedStorageAccessType.workletSet, and\n\
             SharedStorageAccessType.workletAppend."]
      ignoreIfPresent : bool option;
          [@key "ignoreIfPresent"]
          [@yojson.option]
          [@ocaml.doc
            "Whether or not to set an entry for a key if that key is already \
             present.\n\
             Present only for SharedStorageAccessType.documentSet and\n\
             SharedStorageAccessType.workletSet."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Bundles the parameters for shared storage access events whose\n\
       presence/absence can vary according to SharedStorageAccessType."]
  end = struct
    type t = {
      scriptSourceUrl : string option;
          [@key "scriptSourceUrl"]
          [@yojson.option]
          [@ocaml.doc
            "Spec of the module script URL.\n\
             Present only for SharedStorageAccessType.documentAddModule."]
      operationName : string option;
          [@key "operationName"]
          [@yojson.option]
          [@ocaml.doc
            "Name of the registered operation to be run.\n\
             Present only for SharedStorageAccessType.documentRun and\n\
             SharedStorageAccessType.documentSelectURL."]
      serializedData : string option;
          [@key "serializedData"]
          [@yojson.option]
          [@ocaml.doc
            "The operation's serialized data in bytes (converted to a string).\n\
             Present only for SharedStorageAccessType.documentRun and\n\
             SharedStorageAccessType.documentSelectURL."]
      urlsWithMetadata : SharedStorageUrlWithMetadata.t list option;
          [@key "urlsWithMetadata"]
          [@yojson.option]
          [@ocaml.doc
            "Array of candidate URLs' specs, along with any associated metadata.\n\
             Present only for SharedStorageAccessType.documentSelectURL."]
      key : string option;
          [@key "key"]
          [@yojson.option]
          [@ocaml.doc
            "Key for a specific entry in an origin's shared storage.\n\
             Present only for SharedStorageAccessType.documentSet,\n\
             SharedStorageAccessType.documentAppend,\n\
             SharedStorageAccessType.documentDelete,\n\
             SharedStorageAccessType.workletSet,\n\
             SharedStorageAccessType.workletAppend,\n\
             SharedStorageAccessType.workletDelete, and\n\
             SharedStorageAccessType.workletGet."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc
            "Value for a specific entry in an origin's shared storage.\n\
             Present only for SharedStorageAccessType.documentSet,\n\
             SharedStorageAccessType.documentAppend,\n\
             SharedStorageAccessType.workletSet, and\n\
             SharedStorageAccessType.workletAppend."]
      ignoreIfPresent : bool option;
          [@key "ignoreIfPresent"]
          [@yojson.option]
          [@ocaml.doc
            "Whether or not to set an entry for a key if that key is already \
             present.\n\
             Present only for SharedStorageAccessType.documentSet and\n\
             SharedStorageAccessType.workletSet."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Bundles the parameters for shared storage access events whose\n\
       presence/absence can vary according to SharedStorageAccessType."]
  end

  and StorageBucketsDurability : sig
    type _storagebucketsdurability = [ `relaxed | `strict ]

    val _storagebucketsdurability_of_yojson :
      Yojson.Basic.t -> _storagebucketsdurability

    val yojson_of__storagebucketsdurability :
      _storagebucketsdurability -> Yojson.Basic.t

    type t = _storagebucketsdurability
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _storagebucketsdurability = [ `relaxed | `strict ]

    let _storagebucketsdurability_of_yojson = function
      | `String "relaxed" -> `relaxed
      | `String "strict" -> `strict
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__storagebucketsdurability = function
      | `relaxed -> `String "relaxed"
      | `strict -> `String "strict"

    type t = _storagebucketsdurability
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StorageBucket : sig
    type t = {
      storageKey : SerializedStorageKey.t;
          [@key "storageKey"] [@ocaml.doc "No description provided"]
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc
            "If not specified, it is the default bucket of the storageKey."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      storageKey : SerializedStorageKey.t;
          [@key "storageKey"] [@ocaml.doc "No description provided"]
      name : string option;
          [@key "name"]
          [@yojson.option]
          [@ocaml.doc
            "If not specified, it is the default bucket of the storageKey."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StorageBucketInfo : sig
    type t = {
      bucket : StorageBucket.t;
          [@key "bucket"] [@ocaml.doc "No description provided"]
      id : string; [@key "id"] [@ocaml.doc "No description provided"]
      expiration : Network.TimeSinceEpoch.t;
          [@key "expiration"] [@ocaml.doc "No description provided"]
      quota : number; [@key "quota"] [@ocaml.doc "Storage quota (bytes)."]
      persistent : bool;
          [@key "persistent"] [@ocaml.doc "No description provided"]
      durability : StorageBucketsDurability.t;
          [@key "durability"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      bucket : StorageBucket.t;
          [@key "bucket"] [@ocaml.doc "No description provided"]
      id : string; [@key "id"] [@ocaml.doc "No description provided"]
      expiration : Network.TimeSinceEpoch.t;
          [@key "expiration"] [@ocaml.doc "No description provided"]
      quota : number; [@key "quota"] [@ocaml.doc "Storage quota (bytes)."]
      persistent : bool;
          [@key "persistent"] [@ocaml.doc "No description provided"]
      durability : StorageBucketsDurability.t;
          [@key "durability"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingSourceType : sig
    type _attributionreportingsourcetype = [ `navigation | `event ]

    val _attributionreportingsourcetype_of_yojson :
      Yojson.Basic.t -> _attributionreportingsourcetype

    val yojson_of__attributionreportingsourcetype :
      _attributionreportingsourcetype -> Yojson.Basic.t

    type t = _attributionreportingsourcetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _attributionreportingsourcetype = [ `navigation | `event ]

    let _attributionreportingsourcetype_of_yojson = function
      | `String "navigation" -> `navigation
      | `String "event" -> `event
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__attributionreportingsourcetype = function
      | `navigation -> `String "navigation"
      | `event -> `String "event"

    type t = _attributionreportingsourcetype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and UnsignedInt64AsBase10 : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and UnsignedInt128AsBase16 : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SignedInt64AsBase10 : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingFilterDataEntry : sig
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      values : string list;
          [@key "values"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      values : string list;
          [@key "values"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingAggregationKeysEntry : sig
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      value : UnsignedInt128AsBase16.t;
          [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      key : string; [@key "key"] [@ocaml.doc "No description provided"]
      value : UnsignedInt128AsBase16.t;
          [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingSourceRegistration : sig
    type t = {
      time : Network.TimeSinceEpoch.t;
          [@key "time"] [@ocaml.doc "No description provided"]
      expiry : number option;
          [@key "expiry"] [@yojson.option] [@ocaml.doc "duration in seconds"]
      eventReportWindow : number option;
          [@key "eventReportWindow"]
          [@yojson.option]
          [@ocaml.doc "duration in seconds"]
      aggregatableReportWindow : number option;
          [@key "aggregatableReportWindow"]
          [@yojson.option]
          [@ocaml.doc "duration in seconds"]
      type_ : AttributionReportingSourceType.t;
          [@key "type"] [@ocaml.doc "No description provided"]
      sourceOrigin : string;
          [@key "sourceOrigin"] [@ocaml.doc "No description provided"]
      reportingOrigin : string;
          [@key "reportingOrigin"] [@ocaml.doc "No description provided"]
      destinationSites : string list;
          [@key "destinationSites"] [@ocaml.doc "No description provided"]
      eventId : UnsignedInt64AsBase10.t;
          [@key "eventId"] [@ocaml.doc "No description provided"]
      priority : SignedInt64AsBase10.t;
          [@key "priority"] [@ocaml.doc "No description provided"]
      filterData : AttributionReportingFilterDataEntry.t list;
          [@key "filterData"] [@ocaml.doc "No description provided"]
      aggregationKeys : AttributionReportingAggregationKeysEntry.t list;
          [@key "aggregationKeys"] [@ocaml.doc "No description provided"]
      debugKey : UnsignedInt64AsBase10.t option;
          [@key "debugKey"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      time : Network.TimeSinceEpoch.t;
          [@key "time"] [@ocaml.doc "No description provided"]
      expiry : number option;
          [@key "expiry"] [@yojson.option] [@ocaml.doc "duration in seconds"]
      eventReportWindow : number option;
          [@key "eventReportWindow"]
          [@yojson.option]
          [@ocaml.doc "duration in seconds"]
      aggregatableReportWindow : number option;
          [@key "aggregatableReportWindow"]
          [@yojson.option]
          [@ocaml.doc "duration in seconds"]
      type_ : AttributionReportingSourceType.t;
          [@key "type"] [@ocaml.doc "No description provided"]
      sourceOrigin : string;
          [@key "sourceOrigin"] [@ocaml.doc "No description provided"]
      reportingOrigin : string;
          [@key "reportingOrigin"] [@ocaml.doc "No description provided"]
      destinationSites : string list;
          [@key "destinationSites"] [@ocaml.doc "No description provided"]
      eventId : UnsignedInt64AsBase10.t;
          [@key "eventId"] [@ocaml.doc "No description provided"]
      priority : SignedInt64AsBase10.t;
          [@key "priority"] [@ocaml.doc "No description provided"]
      filterData : AttributionReportingFilterDataEntry.t list;
          [@key "filterData"] [@ocaml.doc "No description provided"]
      aggregationKeys : AttributionReportingAggregationKeysEntry.t list;
          [@key "aggregationKeys"] [@ocaml.doc "No description provided"]
      debugKey : UnsignedInt64AsBase10.t option;
          [@key "debugKey"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AttributionReportingSourceRegistrationResult : sig
    type _attributionreportingsourceregistrationresult =
      [ `success
      | `internalError
      | `insufficientSourceCapacity
      | `insufficientUniqueDestinationCapacity
      | `excessiveReportingOrigins
      | `prohibitedByBrowserPolicy
      | `successNoised
      | `destinationReportingLimitReached
      | `destinationGlobalLimitReached
      | `destinationBothLimitsReached
      | `reportingOriginsPerSiteLimitReached ]

    val _attributionreportingsourceregistrationresult_of_yojson :
      Yojson.Basic.t -> _attributionreportingsourceregistrationresult

    val yojson_of__attributionreportingsourceregistrationresult :
      _attributionreportingsourceregistrationresult -> Yojson.Basic.t

    type t = _attributionreportingsourceregistrationresult
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _attributionreportingsourceregistrationresult =
      [ `success
      | `internalError
      | `insufficientSourceCapacity
      | `insufficientUniqueDestinationCapacity
      | `excessiveReportingOrigins
      | `prohibitedByBrowserPolicy
      | `successNoised
      | `destinationReportingLimitReached
      | `destinationGlobalLimitReached
      | `destinationBothLimitsReached
      | `reportingOriginsPerSiteLimitReached ]

    let _attributionreportingsourceregistrationresult_of_yojson = function
      | `String "success" -> `success
      | `String "internalError" -> `internalError
      | `String "insufficientSourceCapacity" -> `insufficientSourceCapacity
      | `String "insufficientUniqueDestinationCapacity" ->
          `insufficientUniqueDestinationCapacity
      | `String "excessiveReportingOrigins" -> `excessiveReportingOrigins
      | `String "prohibitedByBrowserPolicy" -> `prohibitedByBrowserPolicy
      | `String "successNoised" -> `successNoised
      | `String "destinationReportingLimitReached" ->
          `destinationReportingLimitReached
      | `String "destinationGlobalLimitReached" ->
          `destinationGlobalLimitReached
      | `String "destinationBothLimitsReached" -> `destinationBothLimitsReached
      | `String "reportingOriginsPerSiteLimitReached" ->
          `reportingOriginsPerSiteLimitReached
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__attributionreportingsourceregistrationresult = function
      | `success -> `String "success"
      | `internalError -> `String "internalError"
      | `insufficientSourceCapacity -> `String "insufficientSourceCapacity"
      | `insufficientUniqueDestinationCapacity ->
          `String "insufficientUniqueDestinationCapacity"
      | `excessiveReportingOrigins -> `String "excessiveReportingOrigins"
      | `prohibitedByBrowserPolicy -> `String "prohibitedByBrowserPolicy"
      | `successNoised -> `String "successNoised"
      | `destinationReportingLimitReached ->
          `String "destinationReportingLimitReached"
      | `destinationGlobalLimitReached ->
          `String "destinationGlobalLimitReached"
      | `destinationBothLimitsReached -> `String "destinationBothLimitsReached"
      | `reportingOriginsPerSiteLimitReached ->
          `String "reportingOriginsPerSiteLimitReached"

    type t = _attributionreportingsourceregistrationresult
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and SystemInfo : sig
  module rec GPUDevice : sig
    type t = {
      vendorId : number;
          [@key "vendorId"]
          [@ocaml.doc "PCI ID of the GPU vendor, if available; 0 otherwise."]
      deviceId : number;
          [@key "deviceId"]
          [@ocaml.doc "PCI ID of the GPU device, if available; 0 otherwise."]
      subSysId : number option;
          [@key "subSysId"]
          [@yojson.option]
          [@ocaml.doc "Sub sys ID of the GPU, only available on Windows."]
      revision : number option;
          [@key "revision"]
          [@yojson.option]
          [@ocaml.doc "Revision of the GPU, only available on Windows."]
      vendorString : string;
          [@key "vendorString"]
          [@ocaml.doc
            "String description of the GPU vendor, if the PCI ID is not \
             available."]
      deviceString : string;
          [@key "deviceString"]
          [@ocaml.doc
            "String description of the GPU device, if the PCI ID is not \
             available."]
      driverVendor : string;
          [@key "driverVendor"]
          [@ocaml.doc "String description of the GPU driver vendor."]
      driverVersion : string;
          [@key "driverVersion"]
          [@ocaml.doc "String description of the GPU driver version."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Describes a single graphics processor (GPU)."]
  end

  and Size : sig
    type t = {
      width : number; [@key "width"] [@ocaml.doc "Width in pixels."]
      height : number; [@key "height"] [@ocaml.doc "Height in pixels."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Describes the width and height dimensions of an entity."]
  end

  and VideoDecodeAcceleratorCapability : sig
    type t = {
      profile : string;
          [@key "profile"]
          [@ocaml.doc
            "Video codec profile that is supported, e.g. VP9 Profile 2."]
      maxResolution : Size.t;
          [@key "maxResolution"]
          [@ocaml.doc
            "Maximum video dimensions in pixels supported for this |profile|."]
      minResolution : Size.t;
          [@key "minResolution"]
          [@ocaml.doc
            "Minimum video dimensions in pixels supported for this |profile|."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Describes a supported video decoding profile with its associated \
       minimum and\n\
       maximum resolutions."]
  end

  and VideoEncodeAcceleratorCapability : sig
    type t = {
      profile : string;
          [@key "profile"]
          [@ocaml.doc "Video codec profile that is supported, e.g H264 Main."]
      maxResolution : Size.t;
          [@key "maxResolution"]
          [@ocaml.doc
            "Maximum video dimensions in pixels supported for this |profile|."]
      maxFramerateNumerator : number;
          [@key "maxFramerateNumerator"]
          [@ocaml.doc
            "Maximum encoding framerate in frames per second supported for this\n\
             |profile|, as fraction's numerator and denominator, e.g. 24/1 fps,\n\
             24000/1001 fps, etc."]
      maxFramerateDenominator : number;
          [@key "maxFramerateDenominator"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Describes a supported video encoding profile with its associated maximum\n\
       resolution and maximum framerate."]
  end

  and SubsamplingFormat : sig
    type _subsamplingformat = [ `yuv420 | `yuv422 | `yuv444 ]

    val _subsamplingformat_of_yojson : Yojson.Basic.t -> _subsamplingformat
    val yojson_of__subsamplingformat : _subsamplingformat -> Yojson.Basic.t

    type t = _subsamplingformat
    [@@deriving yojson]
    [@@ocaml.doc "YUV subsampling type of the pixels of a given image."]
  end

  and ImageType : sig
    type _imagetype = [ `jpeg | `webp | `unknown ]

    val _imagetype_of_yojson : Yojson.Basic.t -> _imagetype
    val yojson_of__imagetype : _imagetype -> Yojson.Basic.t

    type t = _imagetype
    [@@deriving yojson] [@@ocaml.doc "Image format of a given image."]
  end

  and ImageDecodeAcceleratorCapability : sig
    type t = {
      imageType : ImageType.t;
          [@key "imageType"] [@ocaml.doc "Image coded, e.g. Jpeg."]
      maxDimensions : Size.t;
          [@key "maxDimensions"]
          [@ocaml.doc "Maximum supported dimensions of the image in pixels."]
      minDimensions : Size.t;
          [@key "minDimensions"]
          [@ocaml.doc "Minimum supported dimensions of the image in pixels."]
      subsamplings : SubsamplingFormat.t list;
          [@key "subsamplings"]
          [@ocaml.doc
            "Optional array of supported subsampling formats, e.g. 4:2:0, if \
             known."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Describes a supported image decoding profile with its associated \
       minimum and\n\
       maximum resolutions and subsampling."]
  end

  and GPUInfo : sig
    type t = {
      devices : GPUDevice.t list;
          [@key "devices"]
          [@ocaml.doc
            "The graphics devices on the system. Element 0 is the primary GPU."]
      auxAttributes : assoc option;
          [@key "auxAttributes"]
          [@yojson.option]
          [@ocaml.doc
            "An optional dictionary of additional GPU related attributes."]
      featureStatus : assoc option;
          [@key "featureStatus"]
          [@yojson.option]
          [@ocaml.doc
            "An optional dictionary of graphics features and their status."]
      driverBugWorkarounds : string list;
          [@key "driverBugWorkarounds"]
          [@ocaml.doc "An optional array of GPU driver bug workarounds."]
      videoDecoding : VideoDecodeAcceleratorCapability.t list;
          [@key "videoDecoding"]
          [@ocaml.doc "Supported accelerated video decoding capabilities."]
      videoEncoding : VideoEncodeAcceleratorCapability.t list;
          [@key "videoEncoding"]
          [@ocaml.doc "Supported accelerated video encoding capabilities."]
      imageDecoding : ImageDecodeAcceleratorCapability.t list;
          [@key "imageDecoding"]
          [@ocaml.doc "Supported accelerated image decoding capabilities."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Provides information about the GPU(s) on the system."]
  end

  and ProcessInfo : sig
    type t = {
      type_ : string; [@key "type"] [@ocaml.doc "Specifies process type."]
      id : number; [@key "id"] [@ocaml.doc "Specifies process id."]
      cpuTime : number;
          [@key "cpuTime"]
          [@ocaml.doc
            "Specifies cumulative CPU usage in seconds across all threads of the\n\
             process since the process start."]
    }
    [@@deriving yojson] [@@ocaml.doc "Represents process info."]
  end
end = struct
  module rec GPUDevice : sig
    type t = {
      vendorId : number;
          [@key "vendorId"]
          [@ocaml.doc "PCI ID of the GPU vendor, if available; 0 otherwise."]
      deviceId : number;
          [@key "deviceId"]
          [@ocaml.doc "PCI ID of the GPU device, if available; 0 otherwise."]
      subSysId : number option;
          [@key "subSysId"]
          [@yojson.option]
          [@ocaml.doc "Sub sys ID of the GPU, only available on Windows."]
      revision : number option;
          [@key "revision"]
          [@yojson.option]
          [@ocaml.doc "Revision of the GPU, only available on Windows."]
      vendorString : string;
          [@key "vendorString"]
          [@ocaml.doc
            "String description of the GPU vendor, if the PCI ID is not \
             available."]
      deviceString : string;
          [@key "deviceString"]
          [@ocaml.doc
            "String description of the GPU device, if the PCI ID is not \
             available."]
      driverVendor : string;
          [@key "driverVendor"]
          [@ocaml.doc "String description of the GPU driver vendor."]
      driverVersion : string;
          [@key "driverVersion"]
          [@ocaml.doc "String description of the GPU driver version."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Describes a single graphics processor (GPU)."]
  end = struct
    type t = {
      vendorId : number;
          [@key "vendorId"]
          [@ocaml.doc "PCI ID of the GPU vendor, if available; 0 otherwise."]
      deviceId : number;
          [@key "deviceId"]
          [@ocaml.doc "PCI ID of the GPU device, if available; 0 otherwise."]
      subSysId : number option;
          [@key "subSysId"]
          [@yojson.option]
          [@ocaml.doc "Sub sys ID of the GPU, only available on Windows."]
      revision : number option;
          [@key "revision"]
          [@yojson.option]
          [@ocaml.doc "Revision of the GPU, only available on Windows."]
      vendorString : string;
          [@key "vendorString"]
          [@ocaml.doc
            "String description of the GPU vendor, if the PCI ID is not \
             available."]
      deviceString : string;
          [@key "deviceString"]
          [@ocaml.doc
            "String description of the GPU device, if the PCI ID is not \
             available."]
      driverVendor : string;
          [@key "driverVendor"]
          [@ocaml.doc "String description of the GPU driver vendor."]
      driverVersion : string;
          [@key "driverVersion"]
          [@ocaml.doc "String description of the GPU driver version."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Describes a single graphics processor (GPU)."]
  end

  and Size : sig
    type t = {
      width : number; [@key "width"] [@ocaml.doc "Width in pixels."]
      height : number; [@key "height"] [@ocaml.doc "Height in pixels."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Describes the width and height dimensions of an entity."]
  end = struct
    type t = {
      width : number; [@key "width"] [@ocaml.doc "Width in pixels."]
      height : number; [@key "height"] [@ocaml.doc "Height in pixels."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Describes the width and height dimensions of an entity."]
  end

  and VideoDecodeAcceleratorCapability : sig
    type t = {
      profile : string;
          [@key "profile"]
          [@ocaml.doc
            "Video codec profile that is supported, e.g. VP9 Profile 2."]
      maxResolution : Size.t;
          [@key "maxResolution"]
          [@ocaml.doc
            "Maximum video dimensions in pixels supported for this |profile|."]
      minResolution : Size.t;
          [@key "minResolution"]
          [@ocaml.doc
            "Minimum video dimensions in pixels supported for this |profile|."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Describes a supported video decoding profile with its associated \
       minimum and\n\
       maximum resolutions."]
  end = struct
    type t = {
      profile : string;
          [@key "profile"]
          [@ocaml.doc
            "Video codec profile that is supported, e.g. VP9 Profile 2."]
      maxResolution : Size.t;
          [@key "maxResolution"]
          [@ocaml.doc
            "Maximum video dimensions in pixels supported for this |profile|."]
      minResolution : Size.t;
          [@key "minResolution"]
          [@ocaml.doc
            "Minimum video dimensions in pixels supported for this |profile|."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Describes a supported video decoding profile with its associated \
       minimum and\n\
       maximum resolutions."]
  end

  and VideoEncodeAcceleratorCapability : sig
    type t = {
      profile : string;
          [@key "profile"]
          [@ocaml.doc "Video codec profile that is supported, e.g H264 Main."]
      maxResolution : Size.t;
          [@key "maxResolution"]
          [@ocaml.doc
            "Maximum video dimensions in pixels supported for this |profile|."]
      maxFramerateNumerator : number;
          [@key "maxFramerateNumerator"]
          [@ocaml.doc
            "Maximum encoding framerate in frames per second supported for this\n\
             |profile|, as fraction's numerator and denominator, e.g. 24/1 fps,\n\
             24000/1001 fps, etc."]
      maxFramerateDenominator : number;
          [@key "maxFramerateDenominator"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Describes a supported video encoding profile with its associated maximum\n\
       resolution and maximum framerate."]
  end = struct
    type t = {
      profile : string;
          [@key "profile"]
          [@ocaml.doc "Video codec profile that is supported, e.g H264 Main."]
      maxResolution : Size.t;
          [@key "maxResolution"]
          [@ocaml.doc
            "Maximum video dimensions in pixels supported for this |profile|."]
      maxFramerateNumerator : number;
          [@key "maxFramerateNumerator"]
          [@ocaml.doc
            "Maximum encoding framerate in frames per second supported for this\n\
             |profile|, as fraction's numerator and denominator, e.g. 24/1 fps,\n\
             24000/1001 fps, etc."]
      maxFramerateDenominator : number;
          [@key "maxFramerateDenominator"]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Describes a supported video encoding profile with its associated maximum\n\
       resolution and maximum framerate."]
  end

  and SubsamplingFormat : sig
    type _subsamplingformat = [ `yuv420 | `yuv422 | `yuv444 ]

    val _subsamplingformat_of_yojson : Yojson.Basic.t -> _subsamplingformat
    val yojson_of__subsamplingformat : _subsamplingformat -> Yojson.Basic.t

    type t = _subsamplingformat
    [@@deriving yojson]
    [@@ocaml.doc "YUV subsampling type of the pixels of a given image."]
  end = struct
    type _subsamplingformat = [ `yuv420 | `yuv422 | `yuv444 ]

    let _subsamplingformat_of_yojson = function
      | `String "yuv420" -> `yuv420
      | `String "yuv422" -> `yuv422
      | `String "yuv444" -> `yuv444
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__subsamplingformat = function
      | `yuv420 -> `String "yuv420"
      | `yuv422 -> `String "yuv422"
      | `yuv444 -> `String "yuv444"

    type t = _subsamplingformat
    [@@deriving yojson]
    [@@ocaml.doc "YUV subsampling type of the pixels of a given image."]
  end

  and ImageType : sig
    type _imagetype = [ `jpeg | `webp | `unknown ]

    val _imagetype_of_yojson : Yojson.Basic.t -> _imagetype
    val yojson_of__imagetype : _imagetype -> Yojson.Basic.t

    type t = _imagetype
    [@@deriving yojson] [@@ocaml.doc "Image format of a given image."]
  end = struct
    type _imagetype = [ `jpeg | `webp | `unknown ]

    let _imagetype_of_yojson = function
      | `String "jpeg" -> `jpeg
      | `String "webp" -> `webp
      | `String "unknown" -> `unknown
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__imagetype = function
      | `jpeg -> `String "jpeg"
      | `webp -> `String "webp"
      | `unknown -> `String "unknown"

    type t = _imagetype
    [@@deriving yojson] [@@ocaml.doc "Image format of a given image."]
  end

  and ImageDecodeAcceleratorCapability : sig
    type t = {
      imageType : ImageType.t;
          [@key "imageType"] [@ocaml.doc "Image coded, e.g. Jpeg."]
      maxDimensions : Size.t;
          [@key "maxDimensions"]
          [@ocaml.doc "Maximum supported dimensions of the image in pixels."]
      minDimensions : Size.t;
          [@key "minDimensions"]
          [@ocaml.doc "Minimum supported dimensions of the image in pixels."]
      subsamplings : SubsamplingFormat.t list;
          [@key "subsamplings"]
          [@ocaml.doc
            "Optional array of supported subsampling formats, e.g. 4:2:0, if \
             known."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Describes a supported image decoding profile with its associated \
       minimum and\n\
       maximum resolutions and subsampling."]
  end = struct
    type t = {
      imageType : ImageType.t;
          [@key "imageType"] [@ocaml.doc "Image coded, e.g. Jpeg."]
      maxDimensions : Size.t;
          [@key "maxDimensions"]
          [@ocaml.doc "Maximum supported dimensions of the image in pixels."]
      minDimensions : Size.t;
          [@key "minDimensions"]
          [@ocaml.doc "Minimum supported dimensions of the image in pixels."]
      subsamplings : SubsamplingFormat.t list;
          [@key "subsamplings"]
          [@ocaml.doc
            "Optional array of supported subsampling formats, e.g. 4:2:0, if \
             known."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Describes a supported image decoding profile with its associated \
       minimum and\n\
       maximum resolutions and subsampling."]
  end

  and GPUInfo : sig
    type t = {
      devices : GPUDevice.t list;
          [@key "devices"]
          [@ocaml.doc
            "The graphics devices on the system. Element 0 is the primary GPU."]
      auxAttributes : assoc option;
          [@key "auxAttributes"]
          [@yojson.option]
          [@ocaml.doc
            "An optional dictionary of additional GPU related attributes."]
      featureStatus : assoc option;
          [@key "featureStatus"]
          [@yojson.option]
          [@ocaml.doc
            "An optional dictionary of graphics features and their status."]
      driverBugWorkarounds : string list;
          [@key "driverBugWorkarounds"]
          [@ocaml.doc "An optional array of GPU driver bug workarounds."]
      videoDecoding : VideoDecodeAcceleratorCapability.t list;
          [@key "videoDecoding"]
          [@ocaml.doc "Supported accelerated video decoding capabilities."]
      videoEncoding : VideoEncodeAcceleratorCapability.t list;
          [@key "videoEncoding"]
          [@ocaml.doc "Supported accelerated video encoding capabilities."]
      imageDecoding : ImageDecodeAcceleratorCapability.t list;
          [@key "imageDecoding"]
          [@ocaml.doc "Supported accelerated image decoding capabilities."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Provides information about the GPU(s) on the system."]
  end = struct
    type t = {
      devices : GPUDevice.t list;
          [@key "devices"]
          [@ocaml.doc
            "The graphics devices on the system. Element 0 is the primary GPU."]
      auxAttributes : assoc option;
          [@key "auxAttributes"]
          [@yojson.option]
          [@ocaml.doc
            "An optional dictionary of additional GPU related attributes."]
      featureStatus : assoc option;
          [@key "featureStatus"]
          [@yojson.option]
          [@ocaml.doc
            "An optional dictionary of graphics features and their status."]
      driverBugWorkarounds : string list;
          [@key "driverBugWorkarounds"]
          [@ocaml.doc "An optional array of GPU driver bug workarounds."]
      videoDecoding : VideoDecodeAcceleratorCapability.t list;
          [@key "videoDecoding"]
          [@ocaml.doc "Supported accelerated video decoding capabilities."]
      videoEncoding : VideoEncodeAcceleratorCapability.t list;
          [@key "videoEncoding"]
          [@ocaml.doc "Supported accelerated video encoding capabilities."]
      imageDecoding : ImageDecodeAcceleratorCapability.t list;
          [@key "imageDecoding"]
          [@ocaml.doc "Supported accelerated image decoding capabilities."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Provides information about the GPU(s) on the system."]
  end

  and ProcessInfo : sig
    type t = {
      type_ : string; [@key "type"] [@ocaml.doc "Specifies process type."]
      id : number; [@key "id"] [@ocaml.doc "Specifies process id."]
      cpuTime : number;
          [@key "cpuTime"]
          [@ocaml.doc
            "Specifies cumulative CPU usage in seconds across all threads of the\n\
             process since the process start."]
    }
    [@@deriving yojson] [@@ocaml.doc "Represents process info."]
  end = struct
    type t = {
      type_ : string; [@key "type"] [@ocaml.doc "Specifies process type."]
      id : number; [@key "id"] [@ocaml.doc "Specifies process id."]
      cpuTime : number;
          [@key "cpuTime"]
          [@ocaml.doc
            "Specifies cumulative CPU usage in seconds across all threads of the\n\
             process since the process start."]
    }
    [@@deriving yojson] [@@ocaml.doc "Represents process info."]
  end
end

and Target : sig
  module rec TargetID : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SessionID : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc "Unique identifier of attached debugging session."]
  end

  and TargetInfo : sig
    type t = {
      targetId : TargetID.t;
          [@key "targetId"] [@ocaml.doc "No description provided"]
      type_ : string; [@key "type"] [@ocaml.doc "No description provided"]
      title : string; [@key "title"] [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      attached : bool;
          [@key "attached"]
          [@ocaml.doc "Whether the target has an attached client."]
      openerId : TargetID.t option;
          [@key "openerId"] [@yojson.option] [@ocaml.doc "Opener target Id"]
      canAccessOpener : bool;
          [@key "canAccessOpener"]
          [@ocaml.doc
            "Whether the target has access to the originating window."]
      openerFrameId : Page.FrameId.t option;
          [@key "openerFrameId"]
          [@yojson.option]
          [@ocaml.doc
            "Frame id of originating window (is only set if target has an \
             opener)."]
      browserContextId : Browser.BrowserContextID.t option;
          [@key "browserContextId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      subtype : string option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Provides additional details for specific target types. For \
             example, for\n\
             the type of \"page\", this may be set to \"portal\" or \
             \"prerender\"."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and FilterEntry : sig
    type t = {
      exclude : bool option;
          [@key "exclude"]
          [@yojson.option]
          [@ocaml.doc
            "If set, causes exclusion of mathcing targets from the list."]
      type_ : string option;
          [@key "type"]
          [@yojson.option]
          [@ocaml.doc "If not present, matches any type."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A filter used by target query/discovery/auto-attach operations."]
  end

  and TargetFilter : sig
    type t = FilterEntry.t list
    [@@deriving yojson]
    [@@ocaml.doc
      "The entries in TargetFilter are matched sequentially against targets and\n\
       the first entry that matches determines if the target is included or not,\n\
       depending on the value of `exclude` field in the entry.\n\
       If filter is not specified, the one assumed is\n\
       [{type: \"browser\", exclude: true}, {type: \"tab\", exclude: true}, {}]\n\
       (i.e. include everything but `browser` and `tab`)."]
  end

  and RemoteLocation : sig
    type t = {
      host : string; [@key "host"] [@ocaml.doc "No description provided"]
      port : number; [@key "port"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec TargetID : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SessionID : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc "Unique identifier of attached debugging session."]
  end = struct
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc "Unique identifier of attached debugging session."]
  end

  and TargetInfo : sig
    type t = {
      targetId : TargetID.t;
          [@key "targetId"] [@ocaml.doc "No description provided"]
      type_ : string; [@key "type"] [@ocaml.doc "No description provided"]
      title : string; [@key "title"] [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      attached : bool;
          [@key "attached"]
          [@ocaml.doc "Whether the target has an attached client."]
      openerId : TargetID.t option;
          [@key "openerId"] [@yojson.option] [@ocaml.doc "Opener target Id"]
      canAccessOpener : bool;
          [@key "canAccessOpener"]
          [@ocaml.doc
            "Whether the target has access to the originating window."]
      openerFrameId : Page.FrameId.t option;
          [@key "openerFrameId"]
          [@yojson.option]
          [@ocaml.doc
            "Frame id of originating window (is only set if target has an \
             opener)."]
      browserContextId : Browser.BrowserContextID.t option;
          [@key "browserContextId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      subtype : string option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Provides additional details for specific target types. For \
             example, for\n\
             the type of \"page\", this may be set to \"portal\" or \
             \"prerender\"."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      targetId : TargetID.t;
          [@key "targetId"] [@ocaml.doc "No description provided"]
      type_ : string; [@key "type"] [@ocaml.doc "No description provided"]
      title : string; [@key "title"] [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      attached : bool;
          [@key "attached"]
          [@ocaml.doc "Whether the target has an attached client."]
      openerId : TargetID.t option;
          [@key "openerId"] [@yojson.option] [@ocaml.doc "Opener target Id"]
      canAccessOpener : bool;
          [@key "canAccessOpener"]
          [@ocaml.doc
            "Whether the target has access to the originating window."]
      openerFrameId : Page.FrameId.t option;
          [@key "openerFrameId"]
          [@yojson.option]
          [@ocaml.doc
            "Frame id of originating window (is only set if target has an \
             opener)."]
      browserContextId : Browser.BrowserContextID.t option;
          [@key "browserContextId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      subtype : string option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Provides additional details for specific target types. For \
             example, for\n\
             the type of \"page\", this may be set to \"portal\" or \
             \"prerender\"."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and FilterEntry : sig
    type t = {
      exclude : bool option;
          [@key "exclude"]
          [@yojson.option]
          [@ocaml.doc
            "If set, causes exclusion of mathcing targets from the list."]
      type_ : string option;
          [@key "type"]
          [@yojson.option]
          [@ocaml.doc "If not present, matches any type."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A filter used by target query/discovery/auto-attach operations."]
  end = struct
    type t = {
      exclude : bool option;
          [@key "exclude"]
          [@yojson.option]
          [@ocaml.doc
            "If set, causes exclusion of mathcing targets from the list."]
      type_ : string option;
          [@key "type"]
          [@yojson.option]
          [@ocaml.doc "If not present, matches any type."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A filter used by target query/discovery/auto-attach operations."]
  end

  and TargetFilter : sig
    type t = FilterEntry.t list
    [@@deriving yojson]
    [@@ocaml.doc
      "The entries in TargetFilter are matched sequentially against targets and\n\
       the first entry that matches determines if the target is included or not,\n\
       depending on the value of `exclude` field in the entry.\n\
       If filter is not specified, the one assumed is\n\
       [{type: \"browser\", exclude: true}, {type: \"tab\", exclude: true}, {}]\n\
       (i.e. include everything but `browser` and `tab`)."]
  end = struct
    type t = FilterEntry.t list
    [@@deriving yojson]
    [@@ocaml.doc
      "The entries in TargetFilter are matched sequentially against targets and\n\
       the first entry that matches determines if the target is included or not,\n\
       depending on the value of `exclude` field in the entry.\n\
       If filter is not specified, the one assumed is\n\
       [{type: \"browser\", exclude: true}, {type: \"tab\", exclude: true}, {}]\n\
       (i.e. include everything but `browser` and `tab`)."]
  end

  and RemoteLocation : sig
    type t = {
      host : string; [@key "host"] [@ocaml.doc "No description provided"]
      port : number; [@key "port"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      host : string; [@key "host"] [@ocaml.doc "No description provided"]
      port : number; [@key "port"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and Tracing : sig
  module rec MemoryDumpConfig : sig
    type t = assoc
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration for memory dump. Used only when \"memory-infra\" category \
       is enabled."]
  end

  and TraceConfig : sig
    type _traceconfig_recordmode =
      [ `recordUntilFull
      | `recordContinuously
      | `recordAsMuchAsPossible
      | `echoToConsole ]

    val _traceconfig_recordmode_of_yojson :
      Yojson.Basic.t -> _traceconfig_recordmode

    val yojson_of__traceconfig_recordmode :
      _traceconfig_recordmode -> Yojson.Basic.t

    type t = {
      recordMode : _traceconfig_recordmode option;
          [@key "recordMode"]
          [@yojson.option]
          [@ocaml.doc "Controls how the trace buffer stores data."]
      traceBufferSizeInKb : number option;
          [@key "traceBufferSizeInKb"]
          [@yojson.option]
          [@ocaml.doc
            "Size of the trace buffer in kilobytes. If not specified or zero \
             is passed, a default value\n\
             of 200 MB would be used."]
      enableSampling : bool option;
          [@key "enableSampling"]
          [@yojson.option]
          [@ocaml.doc "Turns on JavaScript stack sampling."]
      enableSystrace : bool option;
          [@key "enableSystrace"]
          [@yojson.option]
          [@ocaml.doc "Turns on system tracing."]
      enableArgumentFilter : bool option;
          [@key "enableArgumentFilter"]
          [@yojson.option]
          [@ocaml.doc "Turns on argument filter."]
      includedCategories : string list option;
          [@key "includedCategories"]
          [@yojson.option]
          [@ocaml.doc "Included category filters."]
      excludedCategories : string list option;
          [@key "excludedCategories"]
          [@yojson.option]
          [@ocaml.doc "Excluded category filters."]
      syntheticDelays : string list option;
          [@key "syntheticDelays"]
          [@yojson.option]
          [@ocaml.doc "Configuration to synthesize the delays in tracing."]
      memoryDumpConfig : MemoryDumpConfig.t option;
          [@key "memoryDumpConfig"]
          [@yojson.option]
          [@ocaml.doc
            "Configuration for memory dump triggers. Used only when \
             \"memory-infra\" category is enabled."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StreamFormat : sig
    type _streamformat = [ `json | `proto ]

    val _streamformat_of_yojson : Yojson.Basic.t -> _streamformat
    val yojson_of__streamformat : _streamformat -> Yojson.Basic.t

    type t = _streamformat
    [@@deriving yojson]
    [@@ocaml.doc
      "Data format of a trace. Can be either the legacy JSON format or the\n\
       protocol buffer format. Note that the JSON format will be deprecated \
       soon."]
  end

  and StreamCompression : sig
    type _streamcompression = [ `none | `gzip ]

    val _streamcompression_of_yojson : Yojson.Basic.t -> _streamcompression
    val yojson_of__streamcompression : _streamcompression -> Yojson.Basic.t

    type t = _streamcompression
    [@@deriving yojson]
    [@@ocaml.doc "Compression type to use for traces returned via streams."]
  end

  and MemoryDumpLevelOfDetail : sig
    type _memorydumplevelofdetail = [ `background | `light | `detailed ]

    val _memorydumplevelofdetail_of_yojson :
      Yojson.Basic.t -> _memorydumplevelofdetail

    val yojson_of__memorydumplevelofdetail :
      _memorydumplevelofdetail -> Yojson.Basic.t

    type t = _memorydumplevelofdetail
    [@@deriving yojson]
    [@@ocaml.doc
      "Details exposed when memory request explicitly declared.\n\
       Keep consistent with memory_dump_request_args.h and\n\
       memory_instrumentation.mojom"]
  end

  and TracingBackend : sig
    type _tracingbackend = [ `auto | `chrome | `system ]

    val _tracingbackend_of_yojson : Yojson.Basic.t -> _tracingbackend
    val yojson_of__tracingbackend : _tracingbackend -> Yojson.Basic.t

    type t = _tracingbackend
    [@@deriving yojson]
    [@@ocaml.doc
      "Backend type to use for tracing. `chrome` uses the Chrome-integrated\n\
       tracing service and is supported on all platforms. `system` is only\n\
       supported on Chrome OS and uses the Perfetto system tracing service.\n\
       `auto` chooses `system` when the perfettoConfig provided to Tracing.start\n\
       specifies at least one non-Chrome data source; otherwise uses `chrome`."]
  end
end = struct
  module rec MemoryDumpConfig : sig
    type t = assoc
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration for memory dump. Used only when \"memory-infra\" category \
       is enabled."]
  end = struct
    type t = assoc
    [@@deriving yojson]
    [@@ocaml.doc
      "Configuration for memory dump. Used only when \"memory-infra\" category \
       is enabled."]
  end

  and TraceConfig : sig
    type _traceconfig_recordmode =
      [ `recordUntilFull
      | `recordContinuously
      | `recordAsMuchAsPossible
      | `echoToConsole ]

    val _traceconfig_recordmode_of_yojson :
      Yojson.Basic.t -> _traceconfig_recordmode

    val yojson_of__traceconfig_recordmode :
      _traceconfig_recordmode -> Yojson.Basic.t

    type t = {
      recordMode : _traceconfig_recordmode option;
          [@key "recordMode"]
          [@yojson.option]
          [@ocaml.doc "Controls how the trace buffer stores data."]
      traceBufferSizeInKb : number option;
          [@key "traceBufferSizeInKb"]
          [@yojson.option]
          [@ocaml.doc
            "Size of the trace buffer in kilobytes. If not specified or zero \
             is passed, a default value\n\
             of 200 MB would be used."]
      enableSampling : bool option;
          [@key "enableSampling"]
          [@yojson.option]
          [@ocaml.doc "Turns on JavaScript stack sampling."]
      enableSystrace : bool option;
          [@key "enableSystrace"]
          [@yojson.option]
          [@ocaml.doc "Turns on system tracing."]
      enableArgumentFilter : bool option;
          [@key "enableArgumentFilter"]
          [@yojson.option]
          [@ocaml.doc "Turns on argument filter."]
      includedCategories : string list option;
          [@key "includedCategories"]
          [@yojson.option]
          [@ocaml.doc "Included category filters."]
      excludedCategories : string list option;
          [@key "excludedCategories"]
          [@yojson.option]
          [@ocaml.doc "Excluded category filters."]
      syntheticDelays : string list option;
          [@key "syntheticDelays"]
          [@yojson.option]
          [@ocaml.doc "Configuration to synthesize the delays in tracing."]
      memoryDumpConfig : MemoryDumpConfig.t option;
          [@key "memoryDumpConfig"]
          [@yojson.option]
          [@ocaml.doc
            "Configuration for memory dump triggers. Used only when \
             \"memory-infra\" category is enabled."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _traceconfig_recordmode =
      [ `recordUntilFull
      | `recordContinuously
      | `recordAsMuchAsPossible
      | `echoToConsole ]

    let _traceconfig_recordmode_of_yojson = function
      | `String "recordUntilFull" -> `recordUntilFull
      | `String "recordContinuously" -> `recordContinuously
      | `String "recordAsMuchAsPossible" -> `recordAsMuchAsPossible
      | `String "echoToConsole" -> `echoToConsole
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__traceconfig_recordmode = function
      | `recordUntilFull -> `String "recordUntilFull"
      | `recordContinuously -> `String "recordContinuously"
      | `recordAsMuchAsPossible -> `String "recordAsMuchAsPossible"
      | `echoToConsole -> `String "echoToConsole"

    type t = {
      recordMode : _traceconfig_recordmode option;
          [@key "recordMode"]
          [@yojson.option]
          [@ocaml.doc "Controls how the trace buffer stores data."]
      traceBufferSizeInKb : number option;
          [@key "traceBufferSizeInKb"]
          [@yojson.option]
          [@ocaml.doc
            "Size of the trace buffer in kilobytes. If not specified or zero \
             is passed, a default value\n\
             of 200 MB would be used."]
      enableSampling : bool option;
          [@key "enableSampling"]
          [@yojson.option]
          [@ocaml.doc "Turns on JavaScript stack sampling."]
      enableSystrace : bool option;
          [@key "enableSystrace"]
          [@yojson.option]
          [@ocaml.doc "Turns on system tracing."]
      enableArgumentFilter : bool option;
          [@key "enableArgumentFilter"]
          [@yojson.option]
          [@ocaml.doc "Turns on argument filter."]
      includedCategories : string list option;
          [@key "includedCategories"]
          [@yojson.option]
          [@ocaml.doc "Included category filters."]
      excludedCategories : string list option;
          [@key "excludedCategories"]
          [@yojson.option]
          [@ocaml.doc "Excluded category filters."]
      syntheticDelays : string list option;
          [@key "syntheticDelays"]
          [@yojson.option]
          [@ocaml.doc "Configuration to synthesize the delays in tracing."]
      memoryDumpConfig : MemoryDumpConfig.t option;
          [@key "memoryDumpConfig"]
          [@yojson.option]
          [@ocaml.doc
            "Configuration for memory dump triggers. Used only when \
             \"memory-infra\" category is enabled."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and StreamFormat : sig
    type _streamformat = [ `json | `proto ]

    val _streamformat_of_yojson : Yojson.Basic.t -> _streamformat
    val yojson_of__streamformat : _streamformat -> Yojson.Basic.t

    type t = _streamformat
    [@@deriving yojson]
    [@@ocaml.doc
      "Data format of a trace. Can be either the legacy JSON format or the\n\
       protocol buffer format. Note that the JSON format will be deprecated \
       soon."]
  end = struct
    type _streamformat = [ `json | `proto ]

    let _streamformat_of_yojson = function
      | `String "json" -> `json
      | `String "proto" -> `proto
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__streamformat = function
      | `json -> `String "json"
      | `proto -> `String "proto"

    type t = _streamformat
    [@@deriving yojson]
    [@@ocaml.doc
      "Data format of a trace. Can be either the legacy JSON format or the\n\
       protocol buffer format. Note that the JSON format will be deprecated \
       soon."]
  end

  and StreamCompression : sig
    type _streamcompression = [ `none | `gzip ]

    val _streamcompression_of_yojson : Yojson.Basic.t -> _streamcompression
    val yojson_of__streamcompression : _streamcompression -> Yojson.Basic.t

    type t = _streamcompression
    [@@deriving yojson]
    [@@ocaml.doc "Compression type to use for traces returned via streams."]
  end = struct
    type _streamcompression = [ `none | `gzip ]

    let _streamcompression_of_yojson = function
      | `String "none" -> `none
      | `String "gzip" -> `gzip
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__streamcompression = function
      | `none -> `String "none"
      | `gzip -> `String "gzip"

    type t = _streamcompression
    [@@deriving yojson]
    [@@ocaml.doc "Compression type to use for traces returned via streams."]
  end

  and MemoryDumpLevelOfDetail : sig
    type _memorydumplevelofdetail = [ `background | `light | `detailed ]

    val _memorydumplevelofdetail_of_yojson :
      Yojson.Basic.t -> _memorydumplevelofdetail

    val yojson_of__memorydumplevelofdetail :
      _memorydumplevelofdetail -> Yojson.Basic.t

    type t = _memorydumplevelofdetail
    [@@deriving yojson]
    [@@ocaml.doc
      "Details exposed when memory request explicitly declared.\n\
       Keep consistent with memory_dump_request_args.h and\n\
       memory_instrumentation.mojom"]
  end = struct
    type _memorydumplevelofdetail = [ `background | `light | `detailed ]

    let _memorydumplevelofdetail_of_yojson = function
      | `String "background" -> `background
      | `String "light" -> `light
      | `String "detailed" -> `detailed
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__memorydumplevelofdetail = function
      | `background -> `String "background"
      | `light -> `String "light"
      | `detailed -> `String "detailed"

    type t = _memorydumplevelofdetail
    [@@deriving yojson]
    [@@ocaml.doc
      "Details exposed when memory request explicitly declared.\n\
       Keep consistent with memory_dump_request_args.h and\n\
       memory_instrumentation.mojom"]
  end

  and TracingBackend : sig
    type _tracingbackend = [ `auto | `chrome | `system ]

    val _tracingbackend_of_yojson : Yojson.Basic.t -> _tracingbackend
    val yojson_of__tracingbackend : _tracingbackend -> Yojson.Basic.t

    type t = _tracingbackend
    [@@deriving yojson]
    [@@ocaml.doc
      "Backend type to use for tracing. `chrome` uses the Chrome-integrated\n\
       tracing service and is supported on all platforms. `system` is only\n\
       supported on Chrome OS and uses the Perfetto system tracing service.\n\
       `auto` chooses `system` when the perfettoConfig provided to Tracing.start\n\
       specifies at least one non-Chrome data source; otherwise uses `chrome`."]
  end = struct
    type _tracingbackend = [ `auto | `chrome | `system ]

    let _tracingbackend_of_yojson = function
      | `String "auto" -> `auto
      | `String "chrome" -> `chrome
      | `String "system" -> `system
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__tracingbackend = function
      | `auto -> `String "auto"
      | `chrome -> `String "chrome"
      | `system -> `String "system"

    type t = _tracingbackend
    [@@deriving yojson]
    [@@ocaml.doc
      "Backend type to use for tracing. `chrome` uses the Chrome-integrated\n\
       tracing service and is supported on all platforms. `system` is only\n\
       supported on Chrome OS and uses the Perfetto system tracing service.\n\
       `auto` chooses `system` when the perfettoConfig provided to Tracing.start\n\
       specifies at least one non-Chrome data source; otherwise uses `chrome`."]
  end
end

and Fetch : sig
  module rec RequestId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique request identifier."]
  end

  and RequestStage : sig
    type _requeststage = [ `Request | `Response ]

    val _requeststage_of_yojson : Yojson.Basic.t -> _requeststage
    val yojson_of__requeststage : _requeststage -> Yojson.Basic.t

    type t = _requeststage
    [@@deriving yojson]
    [@@ocaml.doc
      "Stages of the request to handle. Request will intercept before the \
       request is\n\
       sent. Response will intercept after the response is received (but \
       before response\n\
       body is received)."]
  end

  and RequestPattern : sig
    type t = {
      urlPattern : string option;
          [@key "urlPattern"]
          [@yojson.option]
          [@ocaml.doc
            "Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are \
             allowed. Escape character is\n\
             backslash. Omitting is equivalent to `\"*\"`."]
      resourceType : Network.ResourceType.t option;
          [@key "resourceType"]
          [@yojson.option]
          [@ocaml.doc
            "If set, only requests for matching resource types will be \
             intercepted."]
      requestStage : RequestStage.t option;
          [@key "requestStage"]
          [@yojson.option]
          [@ocaml.doc
            "Stage at which to begin intercepting requests. Default is Request."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HeaderEntry : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Response HTTP header entry"]
  end

  and AuthChallenge : sig
    type _authchallenge_source = [ `Server | `Proxy ]

    val _authchallenge_source_of_yojson :
      Yojson.Basic.t -> _authchallenge_source

    val yojson_of__authchallenge_source :
      _authchallenge_source -> Yojson.Basic.t

    type t = {
      source : _authchallenge_source option;
          [@key "source"]
          [@yojson.option]
          [@ocaml.doc "Source of the authentication challenge."]
      origin : string; [@key "origin"] [@ocaml.doc "Origin of the challenger."]
      scheme : string;
          [@key "scheme"]
          [@ocaml.doc "The authentication scheme used, such as basic or digest"]
      realm : string;
          [@key "realm"]
          [@ocaml.doc "The realm of the challenge. May be empty."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Authorization challenge for HTTP status code 401 or 407."]
  end

  and AuthChallengeResponse : sig
    type _authchallengeresponse_response =
      [ `Default | `CancelAuth | `ProvideCredentials ]

    val _authchallengeresponse_response_of_yojson :
      Yojson.Basic.t -> _authchallengeresponse_response

    val yojson_of__authchallengeresponse_response :
      _authchallengeresponse_response -> Yojson.Basic.t

    type t = {
      response : _authchallengeresponse_response;
          [@key "response"]
          [@ocaml.doc
            "The decision on what to do in response to the authorization \
             challenge.  Default means\n\
             deferring to the default behavior of the net stack, which will \
             likely either the Cancel\n\
             authentication or display a popup dialog box."]
      username : string option;
          [@key "username"]
          [@yojson.option]
          [@ocaml.doc
            "The username to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
      password : string option;
          [@key "password"]
          [@yojson.option]
          [@ocaml.doc
            "The password to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
    }
    [@@deriving yojson] [@@ocaml.doc "Response to an AuthChallenge."]
  end
end = struct
  module rec RequestId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique request identifier."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique request identifier."]
  end

  and RequestStage : sig
    type _requeststage = [ `Request | `Response ]

    val _requeststage_of_yojson : Yojson.Basic.t -> _requeststage
    val yojson_of__requeststage : _requeststage -> Yojson.Basic.t

    type t = _requeststage
    [@@deriving yojson]
    [@@ocaml.doc
      "Stages of the request to handle. Request will intercept before the \
       request is\n\
       sent. Response will intercept after the response is received (but \
       before response\n\
       body is received)."]
  end = struct
    type _requeststage = [ `Request | `Response ]

    let _requeststage_of_yojson = function
      | `String "Request" -> `Request
      | `String "Response" -> `Response
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__requeststage = function
      | `Request -> `String "Request"
      | `Response -> `String "Response"

    type t = _requeststage
    [@@deriving yojson]
    [@@ocaml.doc
      "Stages of the request to handle. Request will intercept before the \
       request is\n\
       sent. Response will intercept after the response is received (but \
       before response\n\
       body is received)."]
  end

  and RequestPattern : sig
    type t = {
      urlPattern : string option;
          [@key "urlPattern"]
          [@yojson.option]
          [@ocaml.doc
            "Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are \
             allowed. Escape character is\n\
             backslash. Omitting is equivalent to `\"*\"`."]
      resourceType : Network.ResourceType.t option;
          [@key "resourceType"]
          [@yojson.option]
          [@ocaml.doc
            "If set, only requests for matching resource types will be \
             intercepted."]
      requestStage : RequestStage.t option;
          [@key "requestStage"]
          [@yojson.option]
          [@ocaml.doc
            "Stage at which to begin intercepting requests. Default is Request."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      urlPattern : string option;
          [@key "urlPattern"]
          [@yojson.option]
          [@ocaml.doc
            "Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are \
             allowed. Escape character is\n\
             backslash. Omitting is equivalent to `\"*\"`."]
      resourceType : Network.ResourceType.t option;
          [@key "resourceType"]
          [@yojson.option]
          [@ocaml.doc
            "If set, only requests for matching resource types will be \
             intercepted."]
      requestStage : RequestStage.t option;
          [@key "requestStage"]
          [@yojson.option]
          [@ocaml.doc
            "Stage at which to begin intercepting requests. Default is Request."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and HeaderEntry : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Response HTTP header entry"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Response HTTP header entry"]
  end

  and AuthChallenge : sig
    type _authchallenge_source = [ `Server | `Proxy ]

    val _authchallenge_source_of_yojson :
      Yojson.Basic.t -> _authchallenge_source

    val yojson_of__authchallenge_source :
      _authchallenge_source -> Yojson.Basic.t

    type t = {
      source : _authchallenge_source option;
          [@key "source"]
          [@yojson.option]
          [@ocaml.doc "Source of the authentication challenge."]
      origin : string; [@key "origin"] [@ocaml.doc "Origin of the challenger."]
      scheme : string;
          [@key "scheme"]
          [@ocaml.doc "The authentication scheme used, such as basic or digest"]
      realm : string;
          [@key "realm"]
          [@ocaml.doc "The realm of the challenge. May be empty."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Authorization challenge for HTTP status code 401 or 407."]
  end = struct
    type _authchallenge_source = [ `Server | `Proxy ]

    let _authchallenge_source_of_yojson = function
      | `String "Server" -> `Server
      | `String "Proxy" -> `Proxy
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__authchallenge_source = function
      | `Server -> `String "Server"
      | `Proxy -> `String "Proxy"

    type t = {
      source : _authchallenge_source option;
          [@key "source"]
          [@yojson.option]
          [@ocaml.doc "Source of the authentication challenge."]
      origin : string; [@key "origin"] [@ocaml.doc "Origin of the challenger."]
      scheme : string;
          [@key "scheme"]
          [@ocaml.doc "The authentication scheme used, such as basic or digest"]
      realm : string;
          [@key "realm"]
          [@ocaml.doc "The realm of the challenge. May be empty."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Authorization challenge for HTTP status code 401 or 407."]
  end

  and AuthChallengeResponse : sig
    type _authchallengeresponse_response =
      [ `Default | `CancelAuth | `ProvideCredentials ]

    val _authchallengeresponse_response_of_yojson :
      Yojson.Basic.t -> _authchallengeresponse_response

    val yojson_of__authchallengeresponse_response :
      _authchallengeresponse_response -> Yojson.Basic.t

    type t = {
      response : _authchallengeresponse_response;
          [@key "response"]
          [@ocaml.doc
            "The decision on what to do in response to the authorization \
             challenge.  Default means\n\
             deferring to the default behavior of the net stack, which will \
             likely either the Cancel\n\
             authentication or display a popup dialog box."]
      username : string option;
          [@key "username"]
          [@yojson.option]
          [@ocaml.doc
            "The username to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
      password : string option;
          [@key "password"]
          [@yojson.option]
          [@ocaml.doc
            "The password to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
    }
    [@@deriving yojson] [@@ocaml.doc "Response to an AuthChallenge."]
  end = struct
    type _authchallengeresponse_response =
      [ `Default | `CancelAuth | `ProvideCredentials ]

    let _authchallengeresponse_response_of_yojson = function
      | `String "Default" -> `Default
      | `String "CancelAuth" -> `CancelAuth
      | `String "ProvideCredentials" -> `ProvideCredentials
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__authchallengeresponse_response = function
      | `Default -> `String "Default"
      | `CancelAuth -> `String "CancelAuth"
      | `ProvideCredentials -> `String "ProvideCredentials"

    type t = {
      response : _authchallengeresponse_response;
          [@key "response"]
          [@ocaml.doc
            "The decision on what to do in response to the authorization \
             challenge.  Default means\n\
             deferring to the default behavior of the net stack, which will \
             likely either the Cancel\n\
             authentication or display a popup dialog box."]
      username : string option;
          [@key "username"]
          [@yojson.option]
          [@ocaml.doc
            "The username to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
      password : string option;
          [@key "password"]
          [@yojson.option]
          [@ocaml.doc
            "The password to provide, possibly empty. Should only be set if \
             response is\n\
             ProvideCredentials."]
    }
    [@@deriving yojson] [@@ocaml.doc "Response to an AuthChallenge."]
  end
end

and WebAudio : sig
  module rec GraphObjectId : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "An unique ID for a graph object (AudioContext, AudioNode, AudioParam) \
       in Web Audio API"]
  end

  and ContextType : sig
    type _contexttype = [ `realtime | `offline ]

    val _contexttype_of_yojson : Yojson.Basic.t -> _contexttype
    val yojson_of__contexttype : _contexttype -> Yojson.Basic.t

    type t = _contexttype
    [@@deriving yojson] [@@ocaml.doc "Enum of BaseAudioContext types"]
  end

  and ContextState : sig
    type _contextstate = [ `suspended | `running | `closed ]

    val _contextstate_of_yojson : Yojson.Basic.t -> _contextstate
    val yojson_of__contextstate : _contextstate -> Yojson.Basic.t

    type t = _contextstate
    [@@deriving yojson] [@@ocaml.doc "Enum of AudioContextState from the spec"]
  end

  and NodeType : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Enum of AudioNode types"]
  end

  and ChannelCountMode : sig
    type _channelcountmode = [ `clamped_max | `explicit | `max ]

    val _channelcountmode_of_yojson : Yojson.Basic.t -> _channelcountmode
    val yojson_of__channelcountmode : _channelcountmode -> Yojson.Basic.t

    type t = _channelcountmode
    [@@deriving yojson]
    [@@ocaml.doc "Enum of AudioNode::ChannelCountMode from the spec"]
  end

  and ChannelInterpretation : sig
    type _channelinterpretation = [ `discrete | `speakers ]

    val _channelinterpretation_of_yojson :
      Yojson.Basic.t -> _channelinterpretation

    val yojson_of__channelinterpretation :
      _channelinterpretation -> Yojson.Basic.t

    type t = _channelinterpretation
    [@@deriving yojson]
    [@@ocaml.doc "Enum of AudioNode::ChannelInterpretation from the spec"]
  end

  and ParamType : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Enum of AudioParam types"]
  end

  and AutomationRate : sig
    type _automationrate = [ `a_rate | `k_rate ]

    val _automationrate_of_yojson : Yojson.Basic.t -> _automationrate
    val yojson_of__automationrate : _automationrate -> Yojson.Basic.t

    type t = _automationrate
    [@@deriving yojson]
    [@@ocaml.doc "Enum of AudioParam::AutomationRate from the spec"]
  end

  and ContextRealtimeData : sig
    type t = {
      currentTime : number;
          [@key "currentTime"]
          [@ocaml.doc "The current context time in second in BaseAudioContext."]
      renderCapacity : number;
          [@key "renderCapacity"]
          [@ocaml.doc
            "The time spent on rendering graph divided by render quantum \
             duration,\n\
             and multiplied by 100. 100 means the audio renderer reached the \
             full\n\
             capacity and glitch may occur."]
      callbackIntervalMean : number;
          [@key "callbackIntervalMean"]
          [@ocaml.doc "A running mean of callback interval."]
      callbackIntervalVariance : number;
          [@key "callbackIntervalVariance"]
          [@ocaml.doc "A running variance of callback interval."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Fields in AudioContext that change in real-time."]
  end

  and BaseAudioContext : sig
    type t = {
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
      contextType : ContextType.t;
          [@key "contextType"] [@ocaml.doc "No description provided"]
      contextState : ContextState.t;
          [@key "contextState"] [@ocaml.doc "No description provided"]
      realtimeData : ContextRealtimeData.t option;
          [@key "realtimeData"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      callbackBufferSize : number;
          [@key "callbackBufferSize"]
          [@ocaml.doc "Platform-dependent callback buffer size."]
      maxOutputChannelCount : number;
          [@key "maxOutputChannelCount"]
          [@ocaml.doc
            "Number of output channels supported by audio hardware in use."]
      sampleRate : number;
          [@key "sampleRate"] [@ocaml.doc "Context sample rate."]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for BaseAudioContext"]
  end

  and AudioListener : sig
    type t = {
      listenerId : GraphObjectId.t;
          [@key "listenerId"] [@ocaml.doc "No description provided"]
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for AudioListener"]
  end

  and AudioNode : sig
    type t = {
      nodeId : GraphObjectId.t;
          [@key "nodeId"] [@ocaml.doc "No description provided"]
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
      nodeType : NodeType.t;
          [@key "nodeType"] [@ocaml.doc "No description provided"]
      numberOfInputs : number;
          [@key "numberOfInputs"] [@ocaml.doc "No description provided"]
      numberOfOutputs : number;
          [@key "numberOfOutputs"] [@ocaml.doc "No description provided"]
      channelCount : number;
          [@key "channelCount"] [@ocaml.doc "No description provided"]
      channelCountMode : ChannelCountMode.t;
          [@key "channelCountMode"] [@ocaml.doc "No description provided"]
      channelInterpretation : ChannelInterpretation.t;
          [@key "channelInterpretation"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for AudioNode"]
  end

  and AudioParam : sig
    type t = {
      paramId : GraphObjectId.t;
          [@key "paramId"] [@ocaml.doc "No description provided"]
      nodeId : GraphObjectId.t;
          [@key "nodeId"] [@ocaml.doc "No description provided"]
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
      paramType : ParamType.t;
          [@key "paramType"] [@ocaml.doc "No description provided"]
      rate : AutomationRate.t;
          [@key "rate"] [@ocaml.doc "No description provided"]
      defaultValue : number;
          [@key "defaultValue"] [@ocaml.doc "No description provided"]
      minValue : number;
          [@key "minValue"] [@ocaml.doc "No description provided"]
      maxValue : number; [@key "maxValue"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for AudioParam"]
  end
end = struct
  module rec GraphObjectId : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "An unique ID for a graph object (AudioContext, AudioNode, AudioParam) \
       in Web Audio API"]
  end = struct
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "An unique ID for a graph object (AudioContext, AudioNode, AudioParam) \
       in Web Audio API"]
  end

  and ContextType : sig
    type _contexttype = [ `realtime | `offline ]

    val _contexttype_of_yojson : Yojson.Basic.t -> _contexttype
    val yojson_of__contexttype : _contexttype -> Yojson.Basic.t

    type t = _contexttype
    [@@deriving yojson] [@@ocaml.doc "Enum of BaseAudioContext types"]
  end = struct
    type _contexttype = [ `realtime | `offline ]

    let _contexttype_of_yojson = function
      | `String "realtime" -> `realtime
      | `String "offline" -> `offline
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__contexttype = function
      | `realtime -> `String "realtime"
      | `offline -> `String "offline"

    type t = _contexttype
    [@@deriving yojson] [@@ocaml.doc "Enum of BaseAudioContext types"]
  end

  and ContextState : sig
    type _contextstate = [ `suspended | `running | `closed ]

    val _contextstate_of_yojson : Yojson.Basic.t -> _contextstate
    val yojson_of__contextstate : _contextstate -> Yojson.Basic.t

    type t = _contextstate
    [@@deriving yojson] [@@ocaml.doc "Enum of AudioContextState from the spec"]
  end = struct
    type _contextstate = [ `suspended | `running | `closed ]

    let _contextstate_of_yojson = function
      | `String "suspended" -> `suspended
      | `String "running" -> `running
      | `String "closed" -> `closed
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__contextstate = function
      | `suspended -> `String "suspended"
      | `running -> `String "running"
      | `closed -> `String "closed"

    type t = _contextstate
    [@@deriving yojson] [@@ocaml.doc "Enum of AudioContextState from the spec"]
  end

  and NodeType : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Enum of AudioNode types"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "Enum of AudioNode types"]
  end

  and ChannelCountMode : sig
    type _channelcountmode = [ `clamped_max | `explicit | `max ]

    val _channelcountmode_of_yojson : Yojson.Basic.t -> _channelcountmode
    val yojson_of__channelcountmode : _channelcountmode -> Yojson.Basic.t

    type t = _channelcountmode
    [@@deriving yojson]
    [@@ocaml.doc "Enum of AudioNode::ChannelCountMode from the spec"]
  end = struct
    type _channelcountmode = [ `clamped_max | `explicit | `max ]

    let _channelcountmode_of_yojson = function
      | `String "clamped-max" -> `clamped_max
      | `String "explicit" -> `explicit
      | `String "max" -> `max
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__channelcountmode = function
      | `clamped_max -> `String "clamped-max"
      | `explicit -> `String "explicit"
      | `max -> `String "max"

    type t = _channelcountmode
    [@@deriving yojson]
    [@@ocaml.doc "Enum of AudioNode::ChannelCountMode from the spec"]
  end

  and ChannelInterpretation : sig
    type _channelinterpretation = [ `discrete | `speakers ]

    val _channelinterpretation_of_yojson :
      Yojson.Basic.t -> _channelinterpretation

    val yojson_of__channelinterpretation :
      _channelinterpretation -> Yojson.Basic.t

    type t = _channelinterpretation
    [@@deriving yojson]
    [@@ocaml.doc "Enum of AudioNode::ChannelInterpretation from the spec"]
  end = struct
    type _channelinterpretation = [ `discrete | `speakers ]

    let _channelinterpretation_of_yojson = function
      | `String "discrete" -> `discrete
      | `String "speakers" -> `speakers
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__channelinterpretation = function
      | `discrete -> `String "discrete"
      | `speakers -> `String "speakers"

    type t = _channelinterpretation
    [@@deriving yojson]
    [@@ocaml.doc "Enum of AudioNode::ChannelInterpretation from the spec"]
  end

  and ParamType : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Enum of AudioParam types"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "Enum of AudioParam types"]
  end

  and AutomationRate : sig
    type _automationrate = [ `a_rate | `k_rate ]

    val _automationrate_of_yojson : Yojson.Basic.t -> _automationrate
    val yojson_of__automationrate : _automationrate -> Yojson.Basic.t

    type t = _automationrate
    [@@deriving yojson]
    [@@ocaml.doc "Enum of AudioParam::AutomationRate from the spec"]
  end = struct
    type _automationrate = [ `a_rate | `k_rate ]

    let _automationrate_of_yojson = function
      | `String "a-rate" -> `a_rate
      | `String "k-rate" -> `k_rate
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__automationrate = function
      | `a_rate -> `String "a-rate"
      | `k_rate -> `String "k-rate"

    type t = _automationrate
    [@@deriving yojson]
    [@@ocaml.doc "Enum of AudioParam::AutomationRate from the spec"]
  end

  and ContextRealtimeData : sig
    type t = {
      currentTime : number;
          [@key "currentTime"]
          [@ocaml.doc "The current context time in second in BaseAudioContext."]
      renderCapacity : number;
          [@key "renderCapacity"]
          [@ocaml.doc
            "The time spent on rendering graph divided by render quantum \
             duration,\n\
             and multiplied by 100. 100 means the audio renderer reached the \
             full\n\
             capacity and glitch may occur."]
      callbackIntervalMean : number;
          [@key "callbackIntervalMean"]
          [@ocaml.doc "A running mean of callback interval."]
      callbackIntervalVariance : number;
          [@key "callbackIntervalVariance"]
          [@ocaml.doc "A running variance of callback interval."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Fields in AudioContext that change in real-time."]
  end = struct
    type t = {
      currentTime : number;
          [@key "currentTime"]
          [@ocaml.doc "The current context time in second in BaseAudioContext."]
      renderCapacity : number;
          [@key "renderCapacity"]
          [@ocaml.doc
            "The time spent on rendering graph divided by render quantum \
             duration,\n\
             and multiplied by 100. 100 means the audio renderer reached the \
             full\n\
             capacity and glitch may occur."]
      callbackIntervalMean : number;
          [@key "callbackIntervalMean"]
          [@ocaml.doc "A running mean of callback interval."]
      callbackIntervalVariance : number;
          [@key "callbackIntervalVariance"]
          [@ocaml.doc "A running variance of callback interval."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Fields in AudioContext that change in real-time."]
  end

  and BaseAudioContext : sig
    type t = {
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
      contextType : ContextType.t;
          [@key "contextType"] [@ocaml.doc "No description provided"]
      contextState : ContextState.t;
          [@key "contextState"] [@ocaml.doc "No description provided"]
      realtimeData : ContextRealtimeData.t option;
          [@key "realtimeData"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      callbackBufferSize : number;
          [@key "callbackBufferSize"]
          [@ocaml.doc "Platform-dependent callback buffer size."]
      maxOutputChannelCount : number;
          [@key "maxOutputChannelCount"]
          [@ocaml.doc
            "Number of output channels supported by audio hardware in use."]
      sampleRate : number;
          [@key "sampleRate"] [@ocaml.doc "Context sample rate."]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for BaseAudioContext"]
  end = struct
    type t = {
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
      contextType : ContextType.t;
          [@key "contextType"] [@ocaml.doc "No description provided"]
      contextState : ContextState.t;
          [@key "contextState"] [@ocaml.doc "No description provided"]
      realtimeData : ContextRealtimeData.t option;
          [@key "realtimeData"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      callbackBufferSize : number;
          [@key "callbackBufferSize"]
          [@ocaml.doc "Platform-dependent callback buffer size."]
      maxOutputChannelCount : number;
          [@key "maxOutputChannelCount"]
          [@ocaml.doc
            "Number of output channels supported by audio hardware in use."]
      sampleRate : number;
          [@key "sampleRate"] [@ocaml.doc "Context sample rate."]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for BaseAudioContext"]
  end

  and AudioListener : sig
    type t = {
      listenerId : GraphObjectId.t;
          [@key "listenerId"] [@ocaml.doc "No description provided"]
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for AudioListener"]
  end = struct
    type t = {
      listenerId : GraphObjectId.t;
          [@key "listenerId"] [@ocaml.doc "No description provided"]
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for AudioListener"]
  end

  and AudioNode : sig
    type t = {
      nodeId : GraphObjectId.t;
          [@key "nodeId"] [@ocaml.doc "No description provided"]
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
      nodeType : NodeType.t;
          [@key "nodeType"] [@ocaml.doc "No description provided"]
      numberOfInputs : number;
          [@key "numberOfInputs"] [@ocaml.doc "No description provided"]
      numberOfOutputs : number;
          [@key "numberOfOutputs"] [@ocaml.doc "No description provided"]
      channelCount : number;
          [@key "channelCount"] [@ocaml.doc "No description provided"]
      channelCountMode : ChannelCountMode.t;
          [@key "channelCountMode"] [@ocaml.doc "No description provided"]
      channelInterpretation : ChannelInterpretation.t;
          [@key "channelInterpretation"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for AudioNode"]
  end = struct
    type t = {
      nodeId : GraphObjectId.t;
          [@key "nodeId"] [@ocaml.doc "No description provided"]
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
      nodeType : NodeType.t;
          [@key "nodeType"] [@ocaml.doc "No description provided"]
      numberOfInputs : number;
          [@key "numberOfInputs"] [@ocaml.doc "No description provided"]
      numberOfOutputs : number;
          [@key "numberOfOutputs"] [@ocaml.doc "No description provided"]
      channelCount : number;
          [@key "channelCount"] [@ocaml.doc "No description provided"]
      channelCountMode : ChannelCountMode.t;
          [@key "channelCountMode"] [@ocaml.doc "No description provided"]
      channelInterpretation : ChannelInterpretation.t;
          [@key "channelInterpretation"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for AudioNode"]
  end

  and AudioParam : sig
    type t = {
      paramId : GraphObjectId.t;
          [@key "paramId"] [@ocaml.doc "No description provided"]
      nodeId : GraphObjectId.t;
          [@key "nodeId"] [@ocaml.doc "No description provided"]
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
      paramType : ParamType.t;
          [@key "paramType"] [@ocaml.doc "No description provided"]
      rate : AutomationRate.t;
          [@key "rate"] [@ocaml.doc "No description provided"]
      defaultValue : number;
          [@key "defaultValue"] [@ocaml.doc "No description provided"]
      minValue : number;
          [@key "minValue"] [@ocaml.doc "No description provided"]
      maxValue : number; [@key "maxValue"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for AudioParam"]
  end = struct
    type t = {
      paramId : GraphObjectId.t;
          [@key "paramId"] [@ocaml.doc "No description provided"]
      nodeId : GraphObjectId.t;
          [@key "nodeId"] [@ocaml.doc "No description provided"]
      contextId : GraphObjectId.t;
          [@key "contextId"] [@ocaml.doc "No description provided"]
      paramType : ParamType.t;
          [@key "paramType"] [@ocaml.doc "No description provided"]
      rate : AutomationRate.t;
          [@key "rate"] [@ocaml.doc "No description provided"]
      defaultValue : number;
          [@key "defaultValue"] [@ocaml.doc "No description provided"]
      minValue : number;
          [@key "minValue"] [@ocaml.doc "No description provided"]
      maxValue : number; [@key "maxValue"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Protocol object for AudioParam"]
  end
end

and WebAuthn : sig
  module rec AuthenticatorId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AuthenticatorProtocol : sig
    type _authenticatorprotocol = [ `u2f | `ctap2 ]

    val _authenticatorprotocol_of_yojson :
      Yojson.Basic.t -> _authenticatorprotocol

    val yojson_of__authenticatorprotocol :
      _authenticatorprotocol -> Yojson.Basic.t

    type t = _authenticatorprotocol
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Ctap2Version : sig
    type _ctap2version = [ `ctap2_0 | `ctap2_1 ]

    val _ctap2version_of_yojson : Yojson.Basic.t -> _ctap2version
    val yojson_of__ctap2version : _ctap2version -> Yojson.Basic.t

    type t = _ctap2version
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AuthenticatorTransport : sig
    type _authenticatortransport = [ `usb | `nfc | `ble | `cable | `internal ]

    val _authenticatortransport_of_yojson :
      Yojson.Basic.t -> _authenticatortransport

    val yojson_of__authenticatortransport :
      _authenticatortransport -> Yojson.Basic.t

    type t = _authenticatortransport
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and VirtualAuthenticatorOptions : sig
    type t = {
      protocol : AuthenticatorProtocol.t;
          [@key "protocol"] [@ocaml.doc "No description provided"]
      ctap2Version : Ctap2Version.t option;
          [@key "ctap2Version"]
          [@yojson.option]
          [@ocaml.doc "Defaults to ctap2_0. Ignored if |protocol| == u2f."]
      transport : AuthenticatorTransport.t;
          [@key "transport"] [@ocaml.doc "No description provided"]
      hasResidentKey : bool option;
          [@key "hasResidentKey"]
          [@yojson.option]
          [@ocaml.doc "Defaults to false."]
      hasUserVerification : bool option;
          [@key "hasUserVerification"]
          [@yojson.option]
          [@ocaml.doc "Defaults to false."]
      hasLargeBlob : bool option;
          [@key "hasLargeBlob"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the largeBlob \
             extension.\n\
             https://w3c.github.io/webauthn#largeBlob\n\
             Defaults to false."]
      hasCredBlob : bool option;
          [@key "hasCredBlob"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the credBlob \
             extension.\n\
             https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-credBlob-extension\n\
             Defaults to false."]
      hasMinPinLength : bool option;
          [@key "hasMinPinLength"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the minPinLength \
             extension.\n\
             https://fidoalliance.org/specs/fido-v2.1-ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-20210615.html#sctn-minpinlength-extension\n\
             Defaults to false."]
      hasPrf : bool option;
          [@key "hasPrf"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the prf extension.\n\
             https://w3c.github.io/webauthn/#prf-extension\n\
             Defaults to false."]
      automaticPresenceSimulation : bool option;
          [@key "automaticPresenceSimulation"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, tests of user presence will succeed immediately.\n\
             Otherwise, they will not be resolved. Defaults to true."]
      isUserVerified : bool option;
          [@key "isUserVerified"]
          [@yojson.option]
          [@ocaml.doc
            "Sets whether User Verification succeeds or fails for an \
             authenticator.\n\
             Defaults to false."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Credential : sig
    type t = {
      credentialId : string;
          [@key "credentialId"] [@ocaml.doc "No description provided"]
      isResidentCredential : bool;
          [@key "isResidentCredential"] [@ocaml.doc "No description provided"]
      rpId : string option;
          [@key "rpId"]
          [@yojson.option]
          [@ocaml.doc
            "Relying Party ID the credential is scoped to. Must be set when \
             adding a\n\
             credential."]
      privateKey : string;
          [@key "privateKey"]
          [@ocaml.doc
            "The ECDSA P-256 private key in PKCS#8 format. (Encoded as a \
             base64 string when passed over JSON)"]
      userHandle : string option;
          [@key "userHandle"]
          [@yojson.option]
          [@ocaml.doc
            "An opaque byte sequence with a maximum size of 64 bytes mapping the\n\
             credential to a specific user. (Encoded as a base64 string when \
             passed over JSON)"]
      signCount : number;
          [@key "signCount"]
          [@ocaml.doc
            "Signature counter. This is incremented by one for each successful\n\
             assertion.\n\
             See https://w3c.github.io/webauthn/#signature-counter"]
      largeBlob : string option;
          [@key "largeBlob"]
          [@yojson.option]
          [@ocaml.doc
            "The large blob associated with the credential.\n\
             See https://w3c.github.io/webauthn/#sctn-large-blob-extension \
             (Encoded as a base64 string when passed over JSON)"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end = struct
  module rec AuthenticatorId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AuthenticatorProtocol : sig
    type _authenticatorprotocol = [ `u2f | `ctap2 ]

    val _authenticatorprotocol_of_yojson :
      Yojson.Basic.t -> _authenticatorprotocol

    val yojson_of__authenticatorprotocol :
      _authenticatorprotocol -> Yojson.Basic.t

    type t = _authenticatorprotocol
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _authenticatorprotocol = [ `u2f | `ctap2 ]

    let _authenticatorprotocol_of_yojson = function
      | `String "u2f" -> `u2f
      | `String "ctap2" -> `ctap2
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__authenticatorprotocol = function
      | `u2f -> `String "u2f"
      | `ctap2 -> `String "ctap2"

    type t = _authenticatorprotocol
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Ctap2Version : sig
    type _ctap2version = [ `ctap2_0 | `ctap2_1 ]

    val _ctap2version_of_yojson : Yojson.Basic.t -> _ctap2version
    val yojson_of__ctap2version : _ctap2version -> Yojson.Basic.t

    type t = _ctap2version
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _ctap2version = [ `ctap2_0 | `ctap2_1 ]

    let _ctap2version_of_yojson = function
      | `String "ctap2_0" -> `ctap2_0
      | `String "ctap2_1" -> `ctap2_1
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__ctap2version = function
      | `ctap2_0 -> `String "ctap2_0"
      | `ctap2_1 -> `String "ctap2_1"

    type t = _ctap2version
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and AuthenticatorTransport : sig
    type _authenticatortransport = [ `usb | `nfc | `ble | `cable | `internal ]

    val _authenticatortransport_of_yojson :
      Yojson.Basic.t -> _authenticatortransport

    val yojson_of__authenticatortransport :
      _authenticatortransport -> Yojson.Basic.t

    type t = _authenticatortransport
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _authenticatortransport = [ `usb | `nfc | `ble | `cable | `internal ]

    let _authenticatortransport_of_yojson = function
      | `String "usb" -> `usb
      | `String "nfc" -> `nfc
      | `String "ble" -> `ble
      | `String "cable" -> `cable
      | `String "internal" -> `internal
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__authenticatortransport = function
      | `usb -> `String "usb"
      | `nfc -> `String "nfc"
      | `ble -> `String "ble"
      | `cable -> `String "cable"
      | `internal -> `String "internal"

    type t = _authenticatortransport
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and VirtualAuthenticatorOptions : sig
    type t = {
      protocol : AuthenticatorProtocol.t;
          [@key "protocol"] [@ocaml.doc "No description provided"]
      ctap2Version : Ctap2Version.t option;
          [@key "ctap2Version"]
          [@yojson.option]
          [@ocaml.doc "Defaults to ctap2_0. Ignored if |protocol| == u2f."]
      transport : AuthenticatorTransport.t;
          [@key "transport"] [@ocaml.doc "No description provided"]
      hasResidentKey : bool option;
          [@key "hasResidentKey"]
          [@yojson.option]
          [@ocaml.doc "Defaults to false."]
      hasUserVerification : bool option;
          [@key "hasUserVerification"]
          [@yojson.option]
          [@ocaml.doc "Defaults to false."]
      hasLargeBlob : bool option;
          [@key "hasLargeBlob"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the largeBlob \
             extension.\n\
             https://w3c.github.io/webauthn#largeBlob\n\
             Defaults to false."]
      hasCredBlob : bool option;
          [@key "hasCredBlob"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the credBlob \
             extension.\n\
             https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-credBlob-extension\n\
             Defaults to false."]
      hasMinPinLength : bool option;
          [@key "hasMinPinLength"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the minPinLength \
             extension.\n\
             https://fidoalliance.org/specs/fido-v2.1-ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-20210615.html#sctn-minpinlength-extension\n\
             Defaults to false."]
      hasPrf : bool option;
          [@key "hasPrf"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the prf extension.\n\
             https://w3c.github.io/webauthn/#prf-extension\n\
             Defaults to false."]
      automaticPresenceSimulation : bool option;
          [@key "automaticPresenceSimulation"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, tests of user presence will succeed immediately.\n\
             Otherwise, they will not be resolved. Defaults to true."]
      isUserVerified : bool option;
          [@key "isUserVerified"]
          [@yojson.option]
          [@ocaml.doc
            "Sets whether User Verification succeeds or fails for an \
             authenticator.\n\
             Defaults to false."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      protocol : AuthenticatorProtocol.t;
          [@key "protocol"] [@ocaml.doc "No description provided"]
      ctap2Version : Ctap2Version.t option;
          [@key "ctap2Version"]
          [@yojson.option]
          [@ocaml.doc "Defaults to ctap2_0. Ignored if |protocol| == u2f."]
      transport : AuthenticatorTransport.t;
          [@key "transport"] [@ocaml.doc "No description provided"]
      hasResidentKey : bool option;
          [@key "hasResidentKey"]
          [@yojson.option]
          [@ocaml.doc "Defaults to false."]
      hasUserVerification : bool option;
          [@key "hasUserVerification"]
          [@yojson.option]
          [@ocaml.doc "Defaults to false."]
      hasLargeBlob : bool option;
          [@key "hasLargeBlob"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the largeBlob \
             extension.\n\
             https://w3c.github.io/webauthn#largeBlob\n\
             Defaults to false."]
      hasCredBlob : bool option;
          [@key "hasCredBlob"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the credBlob \
             extension.\n\
             https://fidoalliance.org/specs/fido-v2.1-rd-20201208/fido-client-to-authenticator-protocol-v2.1-rd-20201208.html#sctn-credBlob-extension\n\
             Defaults to false."]
      hasMinPinLength : bool option;
          [@key "hasMinPinLength"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the minPinLength \
             extension.\n\
             https://fidoalliance.org/specs/fido-v2.1-ps-20210615/fido-client-to-authenticator-protocol-v2.1-ps-20210615.html#sctn-minpinlength-extension\n\
             Defaults to false."]
      hasPrf : bool option;
          [@key "hasPrf"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, the authenticator will support the prf extension.\n\
             https://w3c.github.io/webauthn/#prf-extension\n\
             Defaults to false."]
      automaticPresenceSimulation : bool option;
          [@key "automaticPresenceSimulation"]
          [@yojson.option]
          [@ocaml.doc
            "If set to true, tests of user presence will succeed immediately.\n\
             Otherwise, they will not be resolved. Defaults to true."]
      isUserVerified : bool option;
          [@key "isUserVerified"]
          [@yojson.option]
          [@ocaml.doc
            "Sets whether User Verification succeeds or fails for an \
             authenticator.\n\
             Defaults to false."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and Credential : sig
    type t = {
      credentialId : string;
          [@key "credentialId"] [@ocaml.doc "No description provided"]
      isResidentCredential : bool;
          [@key "isResidentCredential"] [@ocaml.doc "No description provided"]
      rpId : string option;
          [@key "rpId"]
          [@yojson.option]
          [@ocaml.doc
            "Relying Party ID the credential is scoped to. Must be set when \
             adding a\n\
             credential."]
      privateKey : string;
          [@key "privateKey"]
          [@ocaml.doc
            "The ECDSA P-256 private key in PKCS#8 format. (Encoded as a \
             base64 string when passed over JSON)"]
      userHandle : string option;
          [@key "userHandle"]
          [@yojson.option]
          [@ocaml.doc
            "An opaque byte sequence with a maximum size of 64 bytes mapping the\n\
             credential to a specific user. (Encoded as a base64 string when \
             passed over JSON)"]
      signCount : number;
          [@key "signCount"]
          [@ocaml.doc
            "Signature counter. This is incremented by one for each successful\n\
             assertion.\n\
             See https://w3c.github.io/webauthn/#signature-counter"]
      largeBlob : string option;
          [@key "largeBlob"]
          [@yojson.option]
          [@ocaml.doc
            "The large blob associated with the credential.\n\
             See https://w3c.github.io/webauthn/#sctn-large-blob-extension \
             (Encoded as a base64 string when passed over JSON)"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      credentialId : string;
          [@key "credentialId"] [@ocaml.doc "No description provided"]
      isResidentCredential : bool;
          [@key "isResidentCredential"] [@ocaml.doc "No description provided"]
      rpId : string option;
          [@key "rpId"]
          [@yojson.option]
          [@ocaml.doc
            "Relying Party ID the credential is scoped to. Must be set when \
             adding a\n\
             credential."]
      privateKey : string;
          [@key "privateKey"]
          [@ocaml.doc
            "The ECDSA P-256 private key in PKCS#8 format. (Encoded as a \
             base64 string when passed over JSON)"]
      userHandle : string option;
          [@key "userHandle"]
          [@yojson.option]
          [@ocaml.doc
            "An opaque byte sequence with a maximum size of 64 bytes mapping the\n\
             credential to a specific user. (Encoded as a base64 string when \
             passed over JSON)"]
      signCount : number;
          [@key "signCount"]
          [@ocaml.doc
            "Signature counter. This is incremented by one for each successful\n\
             assertion.\n\
             See https://w3c.github.io/webauthn/#signature-counter"]
      largeBlob : string option;
          [@key "largeBlob"]
          [@yojson.option]
          [@ocaml.doc
            "The large blob associated with the credential.\n\
             See https://w3c.github.io/webauthn/#sctn-large-blob-extension \
             (Encoded as a base64 string when passed over JSON)"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end
end

and Media : sig
  module rec PlayerId : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "Players will get an ID that is unique within the agent context."]
  end

  and Timestamp : sig
    type t = number [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PlayerMessage : sig
    type _playermessage_level = [ `error | `warning | `info | `debug ]

    val _playermessage_level_of_yojson : Yojson.Basic.t -> _playermessage_level
    val yojson_of__playermessage_level : _playermessage_level -> Yojson.Basic.t

    type t = {
      level : _playermessage_level;
          [@key "level"]
          [@ocaml.doc
            "Keep in sync with MediaLogMessageLevel\n\
             We are currently keeping the message level 'error' separate from \
             the\n\
             PlayerError type because right now they represent different things,\n\
             this one being a DVLOG(ERROR) style log message that gets printed\n\
             based on what log level is selected in the UI, and the other is a\n\
             representation of a media::PipelineStatus object. Soon however \
             we're\n\
             going to be moving away from using PipelineStatus for errors and\n\
             introducing a new error type which should hopefully let us \
             integrate\n\
             the error log level into the PlayerError type."]
      message : string; [@key "message"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Have one type per entry in MediaLogRecord::Type\nCorresponds to kMessage"]
  end

  and PlayerProperty : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to kMediaPropertyChange"]
  end

  and PlayerEvent : sig
    type t = {
      timestamp : Timestamp.t;
          [@key "timestamp"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to kMediaEventTriggered"]
  end

  and PlayerErrorSourceLocation : sig
    type t = {
      file : string; [@key "file"] [@ocaml.doc "No description provided"]
      line : number; [@key "line"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents logged source line numbers reported in an error.\n\
       NOTE: file and line are from chromium c++ implementation code, not js."]
  end

  and PlayerError : sig
    type t = {
      errorType : string;
          [@key "errorType"] [@ocaml.doc "No description provided"]
      code : number;
          [@key "code"]
          [@ocaml.doc
            "Code is the numeric enum entry for a specific set of error codes, \
             such\n\
             as PipelineStatusCodes in media/base/pipeline_status.h"]
      stack : PlayerErrorSourceLocation.t list;
          [@key "stack"]
          [@ocaml.doc
            "A trace of where this error was caused / where it passed through."]
      cause : PlayerError.t list;
          [@key "cause"]
          [@ocaml.doc
            "Errors potentially have a root cause error, ie, a DecoderError \
             might be\n\
             caused by an WindowsError"]
      data : assoc;
          [@key "data"]
          [@ocaml.doc
            "Extra data attached to an error, such as an HRESULT, Video Codec, \
             etc."]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to kMediaError"]
  end
end = struct
  module rec PlayerId : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "Players will get an ID that is unique within the agent context."]
  end = struct
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "Players will get an ID that is unique within the agent context."]
  end

  and Timestamp : sig
    type t = number [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = number [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PlayerMessage : sig
    type _playermessage_level = [ `error | `warning | `info | `debug ]

    val _playermessage_level_of_yojson : Yojson.Basic.t -> _playermessage_level
    val yojson_of__playermessage_level : _playermessage_level -> Yojson.Basic.t

    type t = {
      level : _playermessage_level;
          [@key "level"]
          [@ocaml.doc
            "Keep in sync with MediaLogMessageLevel\n\
             We are currently keeping the message level 'error' separate from \
             the\n\
             PlayerError type because right now they represent different things,\n\
             this one being a DVLOG(ERROR) style log message that gets printed\n\
             based on what log level is selected in the UI, and the other is a\n\
             representation of a media::PipelineStatus object. Soon however \
             we're\n\
             going to be moving away from using PipelineStatus for errors and\n\
             introducing a new error type which should hopefully let us \
             integrate\n\
             the error log level into the PlayerError type."]
      message : string; [@key "message"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Have one type per entry in MediaLogRecord::Type\nCorresponds to kMessage"]
  end = struct
    type _playermessage_level = [ `error | `warning | `info | `debug ]

    let _playermessage_level_of_yojson = function
      | `String "error" -> `error
      | `String "warning" -> `warning
      | `String "info" -> `info
      | `String "debug" -> `debug
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__playermessage_level = function
      | `error -> `String "error"
      | `warning -> `String "warning"
      | `info -> `String "info"
      | `debug -> `String "debug"

    type t = {
      level : _playermessage_level;
          [@key "level"]
          [@ocaml.doc
            "Keep in sync with MediaLogMessageLevel\n\
             We are currently keeping the message level 'error' separate from \
             the\n\
             PlayerError type because right now they represent different things,\n\
             this one being a DVLOG(ERROR) style log message that gets printed\n\
             based on what log level is selected in the UI, and the other is a\n\
             representation of a media::PipelineStatus object. Soon however \
             we're\n\
             going to be moving away from using PipelineStatus for errors and\n\
             introducing a new error type which should hopefully let us \
             integrate\n\
             the error log level into the PlayerError type."]
      message : string; [@key "message"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Have one type per entry in MediaLogRecord::Type\nCorresponds to kMessage"]
  end

  and PlayerProperty : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to kMediaPropertyChange"]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to kMediaPropertyChange"]
  end

  and PlayerEvent : sig
    type t = {
      timestamp : Timestamp.t;
          [@key "timestamp"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to kMediaEventTriggered"]
  end = struct
    type t = {
      timestamp : Timestamp.t;
          [@key "timestamp"] [@ocaml.doc "No description provided"]
      value : string; [@key "value"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to kMediaEventTriggered"]
  end

  and PlayerErrorSourceLocation : sig
    type t = {
      file : string; [@key "file"] [@ocaml.doc "No description provided"]
      line : number; [@key "line"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents logged source line numbers reported in an error.\n\
       NOTE: file and line are from chromium c++ implementation code, not js."]
  end = struct
    type t = {
      file : string; [@key "file"] [@ocaml.doc "No description provided"]
      line : number; [@key "line"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents logged source line numbers reported in an error.\n\
       NOTE: file and line are from chromium c++ implementation code, not js."]
  end

  and PlayerError : sig
    type t = {
      errorType : string;
          [@key "errorType"] [@ocaml.doc "No description provided"]
      code : number;
          [@key "code"]
          [@ocaml.doc
            "Code is the numeric enum entry for a specific set of error codes, \
             such\n\
             as PipelineStatusCodes in media/base/pipeline_status.h"]
      stack : PlayerErrorSourceLocation.t list;
          [@key "stack"]
          [@ocaml.doc
            "A trace of where this error was caused / where it passed through."]
      cause : PlayerError.t list;
          [@key "cause"]
          [@ocaml.doc
            "Errors potentially have a root cause error, ie, a DecoderError \
             might be\n\
             caused by an WindowsError"]
      data : assoc;
          [@key "data"]
          [@ocaml.doc
            "Extra data attached to an error, such as an HRESULT, Video Codec, \
             etc."]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to kMediaError"]
  end = struct
    type t = {
      errorType : string;
          [@key "errorType"] [@ocaml.doc "No description provided"]
      code : number;
          [@key "code"]
          [@ocaml.doc
            "Code is the numeric enum entry for a specific set of error codes, \
             such\n\
             as PipelineStatusCodes in media/base/pipeline_status.h"]
      stack : PlayerErrorSourceLocation.t list;
          [@key "stack"]
          [@ocaml.doc
            "A trace of where this error was caused / where it passed through."]
      cause : PlayerError.t list;
          [@key "cause"]
          [@ocaml.doc
            "Errors potentially have a root cause error, ie, a DecoderError \
             might be\n\
             caused by an WindowsError"]
      data : assoc;
          [@key "data"]
          [@ocaml.doc
            "Extra data attached to an error, such as an HRESULT, Video Codec, \
             etc."]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to kMediaError"]
  end
end

and DeviceAccess : sig
  module rec RequestId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Device request id."]
  end

  and DeviceId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "A device id."]
  end

  and PromptDevice : sig
    type t = {
      id : DeviceId.t; [@key "id"] [@ocaml.doc "No description provided"]
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Display name as it appears in a device request user prompt."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Device information displayed in a user prompt to select a device."]
  end
end = struct
  module rec RequestId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Device request id."]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "Device request id."]
  end

  and DeviceId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "A device id."]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "A device id."]
  end

  and PromptDevice : sig
    type t = {
      id : DeviceId.t; [@key "id"] [@ocaml.doc "No description provided"]
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Display name as it appears in a device request user prompt."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Device information displayed in a user prompt to select a device."]
  end = struct
    type t = {
      id : DeviceId.t; [@key "id"] [@ocaml.doc "No description provided"]
      name : string;
          [@key "name"]
          [@ocaml.doc
            "Display name as it appears in a device request user prompt."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Device information displayed in a user prompt to select a device."]
  end
end

and Preload : sig
  module rec RuleSetId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Unique id"]
  end

  and RuleSet : sig
    type t = {
      id : RuleSetId.t; [@key "id"] [@ocaml.doc "No description provided"]
      loaderId : Network.LoaderId.t;
          [@key "loaderId"]
          [@ocaml.doc
            "Identifies a document which the rule set is associated with."]
      sourceText : string;
          [@key "sourceText"]
          [@ocaml.doc
            "Source text of JSON representing the rule set. If it comes from\n\
             `<script>` tag, it is the textContent of the node. Note that it is\n\
             a JSON for valid case.\n\n\
             See also:\n\
             - https://wicg.github.io/nav-speculation/speculation-rules.html\n\
             - https://github.com/WICG/nav-speculation/blob/main/triggers.md"]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc
            "A speculation rule set is either added through an inline\n\
             `<script>` tag or through an external resource via the\n\
             'Speculation-Rules' HTTP header. For the first case, we include\n\
             the BackendNodeId of the relevant `<script>` tag. For the second\n\
             case, we include the external URL where the rule set was loaded\n\
             from, and also RequestId if Network domain is enabled.\n\n\
             See also:\n\
             - \
             https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n\
             - \
             https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header"]
      url : string option;
          [@key "url"] [@yojson.option] [@ocaml.doc "No description provided"]
      requestId : Network.RequestId.t option;
          [@key "requestId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      errorType : RuleSetErrorType.t option;
          [@key "errorType"]
          [@yojson.option]
          [@ocaml.doc
            "Error information\n`errorMessage` is null iff `errorType` is null."]
      errorMessage : string option;
          [@key "errorMessage"]
          [@yojson.option]
          [@ocaml.doc
            "TODO(https://crbug.com/1425354): Replace this property with \
             structured error."]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to SpeculationRuleSet"]
  end

  and RuleSetErrorType : sig
    type _ruleseterrortype = [ `SourceIsNotJsonObject | `InvalidRulesSkipped ]

    val _ruleseterrortype_of_yojson : Yojson.Basic.t -> _ruleseterrortype
    val yojson_of__ruleseterrortype : _ruleseterrortype -> Yojson.Basic.t

    type t = _ruleseterrortype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SpeculationAction : sig
    type _speculationaction = [ `Prefetch | `Prerender ]

    val _speculationaction_of_yojson : Yojson.Basic.t -> _speculationaction
    val yojson_of__speculationaction : _speculationaction -> Yojson.Basic.t

    type t = _speculationaction
    [@@deriving yojson]
    [@@ocaml.doc
      "The type of preloading attempted. It corresponds to\n\
       mojom::SpeculationAction (although PrefetchWithSubresources is omitted \
       as it\n\
       isn't being used by clients)."]
  end

  and SpeculationTargetHint : sig
    type _speculationtargethint = [ `Blank | `Self ]

    val _speculationtargethint_of_yojson :
      Yojson.Basic.t -> _speculationtargethint

    val yojson_of__speculationtargethint :
      _speculationtargethint -> Yojson.Basic.t

    type t = _speculationtargethint
    [@@deriving yojson]
    [@@ocaml.doc
      "Corresponds to mojom::SpeculationTargetHint.\n\
       See \
       https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints"]
  end

  and PreloadingAttemptKey : sig
    type t = {
      loaderId : Network.LoaderId.t;
          [@key "loaderId"] [@ocaml.doc "No description provided"]
      action : SpeculationAction.t;
          [@key "action"] [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      targetHint : SpeculationTargetHint.t option;
          [@key "targetHint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A key that identifies a preloading attempt.\n\n\
       The url used is the url specified by the trigger (i.e. the initial \
       URL), and\n\
       not the final url that is navigated to. For example, prerendering allows\n\
       same-origin main frame navigations during the attempt, but the attempt is\n\
       still keyed with the initial URL."]
  end

  and PreloadingAttemptSource : sig
    type t = {
      key : PreloadingAttemptKey.t;
          [@key "key"] [@ocaml.doc "No description provided"]
      ruleSetIds : RuleSetId.t list;
          [@key "ruleSetIds"] [@ocaml.doc "No description provided"]
      nodeIds : DOM.BackendNodeId.t list;
          [@key "nodeIds"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Lists sources for a preloading attempt, specifically the ids of rule sets\n\
       that had a speculation rule that triggered the attempt, and the\n\
       BackendNodeIds of <a href> or <area href> elements that triggered the\n\
       attempt (in the case of attempts triggered by a document rule). It is\n\
       possible for mulitple rule sets and links to trigger a single attempt."]
  end

  and PrerenderFinalStatus : sig
    type _prerenderfinalstatus =
      [ `Activated
      | `Destroyed
      | `LowEndDevice
      | `InvalidSchemeRedirect
      | `InvalidSchemeNavigation
      | `InProgressNavigation
      | `NavigationRequestBlockedByCsp
      | `MainFrameNavigation
      | `MojoBinderPolicy
      | `RendererProcessCrashed
      | `RendererProcessKilled
      | `Download
      | `TriggerDestroyed
      | `NavigationNotCommitted
      | `NavigationBadHttpStatus
      | `ClientCertRequested
      | `NavigationRequestNetworkError
      | `MaxNumOfRunningPrerendersExceeded
      | `CancelAllHostsForTesting
      | `DidFailLoad
      | `Stop
      | `SslCertificateError
      | `LoginAuthRequested
      | `UaChangeRequiresReload
      | `BlockedByClient
      | `AudioOutputDeviceRequested
      | `MixedContent
      | `TriggerBackgrounded
      | `MemoryLimitExceeded
      | `FailToGetMemoryUsage
      | `DataSaverEnabled
      | `HasEffectiveUrl
      | `ActivatedBeforeStarted
      | `InactivePageRestriction
      | `StartFailed
      | `TimeoutBackgrounded
      | `CrossSiteRedirectInInitialNavigation
      | `CrossSiteNavigationInInitialNavigation
      | `SameSiteCrossOriginRedirectNotOptInInInitialNavigation
      | `SameSiteCrossOriginNavigationNotOptInInInitialNavigation
      | `ActivationNavigationParameterMismatch
      | `ActivatedInBackground
      | `EmbedderHostDisallowed
      | `ActivationNavigationDestroyedBeforeSuccess
      | `TabClosedByUserGesture
      | `TabClosedWithoutUserGesture
      | `PrimaryMainFrameRendererProcessCrashed
      | `PrimaryMainFrameRendererProcessKilled
      | `ActivationFramePolicyNotCompatible
      | `PreloadingDisabled
      | `BatterySaverEnabled
      | `ActivatedDuringMainFrameNavigation
      | `PreloadingUnsupportedByWebContents
      | `CrossSiteRedirectInMainFrameNavigation
      | `CrossSiteNavigationInMainFrameNavigation
      | `SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation
      | `SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation
      | `MemoryPressureOnTrigger
      | `MemoryPressureAfterTriggered
      | `PrerenderingDisabledByDevTools
      | `ResourceLoadBlockedByClient
      | `SpeculationRuleRemoved
      | `ActivatedWithAuxiliaryBrowsingContexts ]

    val _prerenderfinalstatus_of_yojson :
      Yojson.Basic.t -> _prerenderfinalstatus

    val yojson_of__prerenderfinalstatus :
      _prerenderfinalstatus -> Yojson.Basic.t

    type t = _prerenderfinalstatus
    [@@deriving yojson]
    [@@ocaml.doc "List of FinalStatus reasons for Prerender2."]
  end

  and PreloadingStatus : sig
    type _preloadingstatus =
      [ `Pending | `Running | `Ready | `Success | `Failure | `NotSupported ]

    val _preloadingstatus_of_yojson : Yojson.Basic.t -> _preloadingstatus
    val yojson_of__preloadingstatus : _preloadingstatus -> Yojson.Basic.t

    type t = _preloadingstatus
    [@@deriving yojson]
    [@@ocaml.doc
      "Preloading status values, see also PreloadingTriggeringOutcome. This\n\
       status is shared by prefetchStatusUpdated and prerenderStatusUpdated."]
  end

  and PrefetchStatus : sig
    type _prefetchstatus =
      [ `PrefetchAllowed
      | `PrefetchFailedIneligibleRedirect
      | `PrefetchFailedInvalidRedirect
      | `PrefetchFailedMIMENotSupported
      | `PrefetchFailedNetError
      | `PrefetchFailedNon2XX
      | `PrefetchFailedPerPageLimitExceeded
      | `PrefetchEvicted
      | `PrefetchHeldback
      | `PrefetchIneligibleRetryAfter
      | `PrefetchIsPrivacyDecoy
      | `PrefetchIsStale
      | `PrefetchNotEligibleBrowserContextOffTheRecord
      | `PrefetchNotEligibleDataSaverEnabled
      | `PrefetchNotEligibleExistingProxy
      | `PrefetchNotEligibleHostIsNonUnique
      | `PrefetchNotEligibleNonDefaultStoragePartition
      | `PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy
      | `PrefetchNotEligibleSchemeIsNotHttps
      | `PrefetchNotEligibleUserHasCookies
      | `PrefetchNotEligibleUserHasServiceWorker
      | `PrefetchNotEligibleBatterySaverEnabled
      | `PrefetchNotEligiblePreloadingDisabled
      | `PrefetchNotFinishedInTime
      | `PrefetchNotStarted
      | `PrefetchNotUsedCookiesChanged
      | `PrefetchProxyNotAvailable
      | `PrefetchResponseUsed
      | `PrefetchSuccessfulButNotUsed
      | `PrefetchNotUsedProbeFailed ]

    val _prefetchstatus_of_yojson : Yojson.Basic.t -> _prefetchstatus
    val yojson_of__prefetchstatus : _prefetchstatus -> Yojson.Basic.t

    type t = _prefetchstatus
    [@@deriving yojson]
    [@@ocaml.doc
      "TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and\n\
       filter out the ones that aren't necessary to the developers."]
  end
end = struct
  module rec RuleSetId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Unique id"]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "Unique id"]
  end

  and RuleSet : sig
    type t = {
      id : RuleSetId.t; [@key "id"] [@ocaml.doc "No description provided"]
      loaderId : Network.LoaderId.t;
          [@key "loaderId"]
          [@ocaml.doc
            "Identifies a document which the rule set is associated with."]
      sourceText : string;
          [@key "sourceText"]
          [@ocaml.doc
            "Source text of JSON representing the rule set. If it comes from\n\
             `<script>` tag, it is the textContent of the node. Note that it is\n\
             a JSON for valid case.\n\n\
             See also:\n\
             - https://wicg.github.io/nav-speculation/speculation-rules.html\n\
             - https://github.com/WICG/nav-speculation/blob/main/triggers.md"]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc
            "A speculation rule set is either added through an inline\n\
             `<script>` tag or through an external resource via the\n\
             'Speculation-Rules' HTTP header. For the first case, we include\n\
             the BackendNodeId of the relevant `<script>` tag. For the second\n\
             case, we include the external URL where the rule set was loaded\n\
             from, and also RequestId if Network domain is enabled.\n\n\
             See also:\n\
             - \
             https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n\
             - \
             https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header"]
      url : string option;
          [@key "url"] [@yojson.option] [@ocaml.doc "No description provided"]
      requestId : Network.RequestId.t option;
          [@key "requestId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      errorType : RuleSetErrorType.t option;
          [@key "errorType"]
          [@yojson.option]
          [@ocaml.doc
            "Error information\n`errorMessage` is null iff `errorType` is null."]
      errorMessage : string option;
          [@key "errorMessage"]
          [@yojson.option]
          [@ocaml.doc
            "TODO(https://crbug.com/1425354): Replace this property with \
             structured error."]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to SpeculationRuleSet"]
  end = struct
    type t = {
      id : RuleSetId.t; [@key "id"] [@ocaml.doc "No description provided"]
      loaderId : Network.LoaderId.t;
          [@key "loaderId"]
          [@ocaml.doc
            "Identifies a document which the rule set is associated with."]
      sourceText : string;
          [@key "sourceText"]
          [@ocaml.doc
            "Source text of JSON representing the rule set. If it comes from\n\
             `<script>` tag, it is the textContent of the node. Note that it is\n\
             a JSON for valid case.\n\n\
             See also:\n\
             - https://wicg.github.io/nav-speculation/speculation-rules.html\n\
             - https://github.com/WICG/nav-speculation/blob/main/triggers.md"]
      backendNodeId : DOM.BackendNodeId.t option;
          [@key "backendNodeId"]
          [@yojson.option]
          [@ocaml.doc
            "A speculation rule set is either added through an inline\n\
             `<script>` tag or through an external resource via the\n\
             'Speculation-Rules' HTTP header. For the first case, we include\n\
             the BackendNodeId of the relevant `<script>` tag. For the second\n\
             case, we include the external URL where the rule set was loaded\n\
             from, and also RequestId if Network domain is enabled.\n\n\
             See also:\n\
             - \
             https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n\
             - \
             https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header"]
      url : string option;
          [@key "url"] [@yojson.option] [@ocaml.doc "No description provided"]
      requestId : Network.RequestId.t option;
          [@key "requestId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      errorType : RuleSetErrorType.t option;
          [@key "errorType"]
          [@yojson.option]
          [@ocaml.doc
            "Error information\n`errorMessage` is null iff `errorType` is null."]
      errorMessage : string option;
          [@key "errorMessage"]
          [@yojson.option]
          [@ocaml.doc
            "TODO(https://crbug.com/1425354): Replace this property with \
             structured error."]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to SpeculationRuleSet"]
  end

  and RuleSetErrorType : sig
    type _ruleseterrortype = [ `SourceIsNotJsonObject | `InvalidRulesSkipped ]

    val _ruleseterrortype_of_yojson : Yojson.Basic.t -> _ruleseterrortype
    val yojson_of__ruleseterrortype : _ruleseterrortype -> Yojson.Basic.t

    type t = _ruleseterrortype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _ruleseterrortype = [ `SourceIsNotJsonObject | `InvalidRulesSkipped ]

    let _ruleseterrortype_of_yojson = function
      | `String "SourceIsNotJsonObject" -> `SourceIsNotJsonObject
      | `String "InvalidRulesSkipped" -> `InvalidRulesSkipped
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__ruleseterrortype = function
      | `SourceIsNotJsonObject -> `String "SourceIsNotJsonObject"
      | `InvalidRulesSkipped -> `String "InvalidRulesSkipped"

    type t = _ruleseterrortype
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and SpeculationAction : sig
    type _speculationaction = [ `Prefetch | `Prerender ]

    val _speculationaction_of_yojson : Yojson.Basic.t -> _speculationaction
    val yojson_of__speculationaction : _speculationaction -> Yojson.Basic.t

    type t = _speculationaction
    [@@deriving yojson]
    [@@ocaml.doc
      "The type of preloading attempted. It corresponds to\n\
       mojom::SpeculationAction (although PrefetchWithSubresources is omitted \
       as it\n\
       isn't being used by clients)."]
  end = struct
    type _speculationaction = [ `Prefetch | `Prerender ]

    let _speculationaction_of_yojson = function
      | `String "Prefetch" -> `Prefetch
      | `String "Prerender" -> `Prerender
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__speculationaction = function
      | `Prefetch -> `String "Prefetch"
      | `Prerender -> `String "Prerender"

    type t = _speculationaction
    [@@deriving yojson]
    [@@ocaml.doc
      "The type of preloading attempted. It corresponds to\n\
       mojom::SpeculationAction (although PrefetchWithSubresources is omitted \
       as it\n\
       isn't being used by clients)."]
  end

  and SpeculationTargetHint : sig
    type _speculationtargethint = [ `Blank | `Self ]

    val _speculationtargethint_of_yojson :
      Yojson.Basic.t -> _speculationtargethint

    val yojson_of__speculationtargethint :
      _speculationtargethint -> Yojson.Basic.t

    type t = _speculationtargethint
    [@@deriving yojson]
    [@@ocaml.doc
      "Corresponds to mojom::SpeculationTargetHint.\n\
       See \
       https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints"]
  end = struct
    type _speculationtargethint = [ `Blank | `Self ]

    let _speculationtargethint_of_yojson = function
      | `String "Blank" -> `Blank
      | `String "Self" -> `Self
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__speculationtargethint = function
      | `Blank -> `String "Blank"
      | `Self -> `String "Self"

    type t = _speculationtargethint
    [@@deriving yojson]
    [@@ocaml.doc
      "Corresponds to mojom::SpeculationTargetHint.\n\
       See \
       https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints"]
  end

  and PreloadingAttemptKey : sig
    type t = {
      loaderId : Network.LoaderId.t;
          [@key "loaderId"] [@ocaml.doc "No description provided"]
      action : SpeculationAction.t;
          [@key "action"] [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      targetHint : SpeculationTargetHint.t option;
          [@key "targetHint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A key that identifies a preloading attempt.\n\n\
       The url used is the url specified by the trigger (i.e. the initial \
       URL), and\n\
       not the final url that is navigated to. For example, prerendering allows\n\
       same-origin main frame navigations during the attempt, but the attempt is\n\
       still keyed with the initial URL."]
  end = struct
    type t = {
      loaderId : Network.LoaderId.t;
          [@key "loaderId"] [@ocaml.doc "No description provided"]
      action : SpeculationAction.t;
          [@key "action"] [@ocaml.doc "No description provided"]
      url : string; [@key "url"] [@ocaml.doc "No description provided"]
      targetHint : SpeculationTargetHint.t option;
          [@key "targetHint"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "A key that identifies a preloading attempt.\n\n\
       The url used is the url specified by the trigger (i.e. the initial \
       URL), and\n\
       not the final url that is navigated to. For example, prerendering allows\n\
       same-origin main frame navigations during the attempt, but the attempt is\n\
       still keyed with the initial URL."]
  end

  and PreloadingAttemptSource : sig
    type t = {
      key : PreloadingAttemptKey.t;
          [@key "key"] [@ocaml.doc "No description provided"]
      ruleSetIds : RuleSetId.t list;
          [@key "ruleSetIds"] [@ocaml.doc "No description provided"]
      nodeIds : DOM.BackendNodeId.t list;
          [@key "nodeIds"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Lists sources for a preloading attempt, specifically the ids of rule sets\n\
       that had a speculation rule that triggered the attempt, and the\n\
       BackendNodeIds of <a href> or <area href> elements that triggered the\n\
       attempt (in the case of attempts triggered by a document rule). It is\n\
       possible for mulitple rule sets and links to trigger a single attempt."]
  end = struct
    type t = {
      key : PreloadingAttemptKey.t;
          [@key "key"] [@ocaml.doc "No description provided"]
      ruleSetIds : RuleSetId.t list;
          [@key "ruleSetIds"] [@ocaml.doc "No description provided"]
      nodeIds : DOM.BackendNodeId.t list;
          [@key "nodeIds"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Lists sources for a preloading attempt, specifically the ids of rule sets\n\
       that had a speculation rule that triggered the attempt, and the\n\
       BackendNodeIds of <a href> or <area href> elements that triggered the\n\
       attempt (in the case of attempts triggered by a document rule). It is\n\
       possible for mulitple rule sets and links to trigger a single attempt."]
  end

  and PrerenderFinalStatus : sig
    type _prerenderfinalstatus =
      [ `Activated
      | `Destroyed
      | `LowEndDevice
      | `InvalidSchemeRedirect
      | `InvalidSchemeNavigation
      | `InProgressNavigation
      | `NavigationRequestBlockedByCsp
      | `MainFrameNavigation
      | `MojoBinderPolicy
      | `RendererProcessCrashed
      | `RendererProcessKilled
      | `Download
      | `TriggerDestroyed
      | `NavigationNotCommitted
      | `NavigationBadHttpStatus
      | `ClientCertRequested
      | `NavigationRequestNetworkError
      | `MaxNumOfRunningPrerendersExceeded
      | `CancelAllHostsForTesting
      | `DidFailLoad
      | `Stop
      | `SslCertificateError
      | `LoginAuthRequested
      | `UaChangeRequiresReload
      | `BlockedByClient
      | `AudioOutputDeviceRequested
      | `MixedContent
      | `TriggerBackgrounded
      | `MemoryLimitExceeded
      | `FailToGetMemoryUsage
      | `DataSaverEnabled
      | `HasEffectiveUrl
      | `ActivatedBeforeStarted
      | `InactivePageRestriction
      | `StartFailed
      | `TimeoutBackgrounded
      | `CrossSiteRedirectInInitialNavigation
      | `CrossSiteNavigationInInitialNavigation
      | `SameSiteCrossOriginRedirectNotOptInInInitialNavigation
      | `SameSiteCrossOriginNavigationNotOptInInInitialNavigation
      | `ActivationNavigationParameterMismatch
      | `ActivatedInBackground
      | `EmbedderHostDisallowed
      | `ActivationNavigationDestroyedBeforeSuccess
      | `TabClosedByUserGesture
      | `TabClosedWithoutUserGesture
      | `PrimaryMainFrameRendererProcessCrashed
      | `PrimaryMainFrameRendererProcessKilled
      | `ActivationFramePolicyNotCompatible
      | `PreloadingDisabled
      | `BatterySaverEnabled
      | `ActivatedDuringMainFrameNavigation
      | `PreloadingUnsupportedByWebContents
      | `CrossSiteRedirectInMainFrameNavigation
      | `CrossSiteNavigationInMainFrameNavigation
      | `SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation
      | `SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation
      | `MemoryPressureOnTrigger
      | `MemoryPressureAfterTriggered
      | `PrerenderingDisabledByDevTools
      | `ResourceLoadBlockedByClient
      | `SpeculationRuleRemoved
      | `ActivatedWithAuxiliaryBrowsingContexts ]

    val _prerenderfinalstatus_of_yojson :
      Yojson.Basic.t -> _prerenderfinalstatus

    val yojson_of__prerenderfinalstatus :
      _prerenderfinalstatus -> Yojson.Basic.t

    type t = _prerenderfinalstatus
    [@@deriving yojson]
    [@@ocaml.doc "List of FinalStatus reasons for Prerender2."]
  end = struct
    type _prerenderfinalstatus =
      [ `Activated
      | `Destroyed
      | `LowEndDevice
      | `InvalidSchemeRedirect
      | `InvalidSchemeNavigation
      | `InProgressNavigation
      | `NavigationRequestBlockedByCsp
      | `MainFrameNavigation
      | `MojoBinderPolicy
      | `RendererProcessCrashed
      | `RendererProcessKilled
      | `Download
      | `TriggerDestroyed
      | `NavigationNotCommitted
      | `NavigationBadHttpStatus
      | `ClientCertRequested
      | `NavigationRequestNetworkError
      | `MaxNumOfRunningPrerendersExceeded
      | `CancelAllHostsForTesting
      | `DidFailLoad
      | `Stop
      | `SslCertificateError
      | `LoginAuthRequested
      | `UaChangeRequiresReload
      | `BlockedByClient
      | `AudioOutputDeviceRequested
      | `MixedContent
      | `TriggerBackgrounded
      | `MemoryLimitExceeded
      | `FailToGetMemoryUsage
      | `DataSaverEnabled
      | `HasEffectiveUrl
      | `ActivatedBeforeStarted
      | `InactivePageRestriction
      | `StartFailed
      | `TimeoutBackgrounded
      | `CrossSiteRedirectInInitialNavigation
      | `CrossSiteNavigationInInitialNavigation
      | `SameSiteCrossOriginRedirectNotOptInInInitialNavigation
      | `SameSiteCrossOriginNavigationNotOptInInInitialNavigation
      | `ActivationNavigationParameterMismatch
      | `ActivatedInBackground
      | `EmbedderHostDisallowed
      | `ActivationNavigationDestroyedBeforeSuccess
      | `TabClosedByUserGesture
      | `TabClosedWithoutUserGesture
      | `PrimaryMainFrameRendererProcessCrashed
      | `PrimaryMainFrameRendererProcessKilled
      | `ActivationFramePolicyNotCompatible
      | `PreloadingDisabled
      | `BatterySaverEnabled
      | `ActivatedDuringMainFrameNavigation
      | `PreloadingUnsupportedByWebContents
      | `CrossSiteRedirectInMainFrameNavigation
      | `CrossSiteNavigationInMainFrameNavigation
      | `SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation
      | `SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation
      | `MemoryPressureOnTrigger
      | `MemoryPressureAfterTriggered
      | `PrerenderingDisabledByDevTools
      | `ResourceLoadBlockedByClient
      | `SpeculationRuleRemoved
      | `ActivatedWithAuxiliaryBrowsingContexts ]

    let _prerenderfinalstatus_of_yojson = function
      | `String "Activated" -> `Activated
      | `String "Destroyed" -> `Destroyed
      | `String "LowEndDevice" -> `LowEndDevice
      | `String "InvalidSchemeRedirect" -> `InvalidSchemeRedirect
      | `String "InvalidSchemeNavigation" -> `InvalidSchemeNavigation
      | `String "InProgressNavigation" -> `InProgressNavigation
      | `String "NavigationRequestBlockedByCsp" ->
          `NavigationRequestBlockedByCsp
      | `String "MainFrameNavigation" -> `MainFrameNavigation
      | `String "MojoBinderPolicy" -> `MojoBinderPolicy
      | `String "RendererProcessCrashed" -> `RendererProcessCrashed
      | `String "RendererProcessKilled" -> `RendererProcessKilled
      | `String "Download" -> `Download
      | `String "TriggerDestroyed" -> `TriggerDestroyed
      | `String "NavigationNotCommitted" -> `NavigationNotCommitted
      | `String "NavigationBadHttpStatus" -> `NavigationBadHttpStatus
      | `String "ClientCertRequested" -> `ClientCertRequested
      | `String "NavigationRequestNetworkError" ->
          `NavigationRequestNetworkError
      | `String "MaxNumOfRunningPrerendersExceeded" ->
          `MaxNumOfRunningPrerendersExceeded
      | `String "CancelAllHostsForTesting" -> `CancelAllHostsForTesting
      | `String "DidFailLoad" -> `DidFailLoad
      | `String "Stop" -> `Stop
      | `String "SslCertificateError" -> `SslCertificateError
      | `String "LoginAuthRequested" -> `LoginAuthRequested
      | `String "UaChangeRequiresReload" -> `UaChangeRequiresReload
      | `String "BlockedByClient" -> `BlockedByClient
      | `String "AudioOutputDeviceRequested" -> `AudioOutputDeviceRequested
      | `String "MixedContent" -> `MixedContent
      | `String "TriggerBackgrounded" -> `TriggerBackgrounded
      | `String "MemoryLimitExceeded" -> `MemoryLimitExceeded
      | `String "FailToGetMemoryUsage" -> `FailToGetMemoryUsage
      | `String "DataSaverEnabled" -> `DataSaverEnabled
      | `String "HasEffectiveUrl" -> `HasEffectiveUrl
      | `String "ActivatedBeforeStarted" -> `ActivatedBeforeStarted
      | `String "InactivePageRestriction" -> `InactivePageRestriction
      | `String "StartFailed" -> `StartFailed
      | `String "TimeoutBackgrounded" -> `TimeoutBackgrounded
      | `String "CrossSiteRedirectInInitialNavigation" ->
          `CrossSiteRedirectInInitialNavigation
      | `String "CrossSiteNavigationInInitialNavigation" ->
          `CrossSiteNavigationInInitialNavigation
      | `String "SameSiteCrossOriginRedirectNotOptInInInitialNavigation" ->
          `SameSiteCrossOriginRedirectNotOptInInInitialNavigation
      | `String "SameSiteCrossOriginNavigationNotOptInInInitialNavigation" ->
          `SameSiteCrossOriginNavigationNotOptInInInitialNavigation
      | `String "ActivationNavigationParameterMismatch" ->
          `ActivationNavigationParameterMismatch
      | `String "ActivatedInBackground" -> `ActivatedInBackground
      | `String "EmbedderHostDisallowed" -> `EmbedderHostDisallowed
      | `String "ActivationNavigationDestroyedBeforeSuccess" ->
          `ActivationNavigationDestroyedBeforeSuccess
      | `String "TabClosedByUserGesture" -> `TabClosedByUserGesture
      | `String "TabClosedWithoutUserGesture" -> `TabClosedWithoutUserGesture
      | `String "PrimaryMainFrameRendererProcessCrashed" ->
          `PrimaryMainFrameRendererProcessCrashed
      | `String "PrimaryMainFrameRendererProcessKilled" ->
          `PrimaryMainFrameRendererProcessKilled
      | `String "ActivationFramePolicyNotCompatible" ->
          `ActivationFramePolicyNotCompatible
      | `String "PreloadingDisabled" -> `PreloadingDisabled
      | `String "BatterySaverEnabled" -> `BatterySaverEnabled
      | `String "ActivatedDuringMainFrameNavigation" ->
          `ActivatedDuringMainFrameNavigation
      | `String "PreloadingUnsupportedByWebContents" ->
          `PreloadingUnsupportedByWebContents
      | `String "CrossSiteRedirectInMainFrameNavigation" ->
          `CrossSiteRedirectInMainFrameNavigation
      | `String "CrossSiteNavigationInMainFrameNavigation" ->
          `CrossSiteNavigationInMainFrameNavigation
      | `String "SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation" ->
          `SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation
      | `String "SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation" ->
          `SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation
      | `String "MemoryPressureOnTrigger" -> `MemoryPressureOnTrigger
      | `String "MemoryPressureAfterTriggered" -> `MemoryPressureAfterTriggered
      | `String "PrerenderingDisabledByDevTools" ->
          `PrerenderingDisabledByDevTools
      | `String "ResourceLoadBlockedByClient" -> `ResourceLoadBlockedByClient
      | `String "SpeculationRuleRemoved" -> `SpeculationRuleRemoved
      | `String "ActivatedWithAuxiliaryBrowsingContexts" ->
          `ActivatedWithAuxiliaryBrowsingContexts
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__prerenderfinalstatus = function
      | `Activated -> `String "Activated"
      | `Destroyed -> `String "Destroyed"
      | `LowEndDevice -> `String "LowEndDevice"
      | `InvalidSchemeRedirect -> `String "InvalidSchemeRedirect"
      | `InvalidSchemeNavigation -> `String "InvalidSchemeNavigation"
      | `InProgressNavigation -> `String "InProgressNavigation"
      | `NavigationRequestBlockedByCsp ->
          `String "NavigationRequestBlockedByCsp"
      | `MainFrameNavigation -> `String "MainFrameNavigation"
      | `MojoBinderPolicy -> `String "MojoBinderPolicy"
      | `RendererProcessCrashed -> `String "RendererProcessCrashed"
      | `RendererProcessKilled -> `String "RendererProcessKilled"
      | `Download -> `String "Download"
      | `TriggerDestroyed -> `String "TriggerDestroyed"
      | `NavigationNotCommitted -> `String "NavigationNotCommitted"
      | `NavigationBadHttpStatus -> `String "NavigationBadHttpStatus"
      | `ClientCertRequested -> `String "ClientCertRequested"
      | `NavigationRequestNetworkError ->
          `String "NavigationRequestNetworkError"
      | `MaxNumOfRunningPrerendersExceeded ->
          `String "MaxNumOfRunningPrerendersExceeded"
      | `CancelAllHostsForTesting -> `String "CancelAllHostsForTesting"
      | `DidFailLoad -> `String "DidFailLoad"
      | `Stop -> `String "Stop"
      | `SslCertificateError -> `String "SslCertificateError"
      | `LoginAuthRequested -> `String "LoginAuthRequested"
      | `UaChangeRequiresReload -> `String "UaChangeRequiresReload"
      | `BlockedByClient -> `String "BlockedByClient"
      | `AudioOutputDeviceRequested -> `String "AudioOutputDeviceRequested"
      | `MixedContent -> `String "MixedContent"
      | `TriggerBackgrounded -> `String "TriggerBackgrounded"
      | `MemoryLimitExceeded -> `String "MemoryLimitExceeded"
      | `FailToGetMemoryUsage -> `String "FailToGetMemoryUsage"
      | `DataSaverEnabled -> `String "DataSaverEnabled"
      | `HasEffectiveUrl -> `String "HasEffectiveUrl"
      | `ActivatedBeforeStarted -> `String "ActivatedBeforeStarted"
      | `InactivePageRestriction -> `String "InactivePageRestriction"
      | `StartFailed -> `String "StartFailed"
      | `TimeoutBackgrounded -> `String "TimeoutBackgrounded"
      | `CrossSiteRedirectInInitialNavigation ->
          `String "CrossSiteRedirectInInitialNavigation"
      | `CrossSiteNavigationInInitialNavigation ->
          `String "CrossSiteNavigationInInitialNavigation"
      | `SameSiteCrossOriginRedirectNotOptInInInitialNavigation ->
          `String "SameSiteCrossOriginRedirectNotOptInInInitialNavigation"
      | `SameSiteCrossOriginNavigationNotOptInInInitialNavigation ->
          `String "SameSiteCrossOriginNavigationNotOptInInInitialNavigation"
      | `ActivationNavigationParameterMismatch ->
          `String "ActivationNavigationParameterMismatch"
      | `ActivatedInBackground -> `String "ActivatedInBackground"
      | `EmbedderHostDisallowed -> `String "EmbedderHostDisallowed"
      | `ActivationNavigationDestroyedBeforeSuccess ->
          `String "ActivationNavigationDestroyedBeforeSuccess"
      | `TabClosedByUserGesture -> `String "TabClosedByUserGesture"
      | `TabClosedWithoutUserGesture -> `String "TabClosedWithoutUserGesture"
      | `PrimaryMainFrameRendererProcessCrashed ->
          `String "PrimaryMainFrameRendererProcessCrashed"
      | `PrimaryMainFrameRendererProcessKilled ->
          `String "PrimaryMainFrameRendererProcessKilled"
      | `ActivationFramePolicyNotCompatible ->
          `String "ActivationFramePolicyNotCompatible"
      | `PreloadingDisabled -> `String "PreloadingDisabled"
      | `BatterySaverEnabled -> `String "BatterySaverEnabled"
      | `ActivatedDuringMainFrameNavigation ->
          `String "ActivatedDuringMainFrameNavigation"
      | `PreloadingUnsupportedByWebContents ->
          `String "PreloadingUnsupportedByWebContents"
      | `CrossSiteRedirectInMainFrameNavigation ->
          `String "CrossSiteRedirectInMainFrameNavigation"
      | `CrossSiteNavigationInMainFrameNavigation ->
          `String "CrossSiteNavigationInMainFrameNavigation"
      | `SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation ->
          `String "SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation"
      | `SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation ->
          `String "SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation"
      | `MemoryPressureOnTrigger -> `String "MemoryPressureOnTrigger"
      | `MemoryPressureAfterTriggered -> `String "MemoryPressureAfterTriggered"
      | `PrerenderingDisabledByDevTools ->
          `String "PrerenderingDisabledByDevTools"
      | `ResourceLoadBlockedByClient -> `String "ResourceLoadBlockedByClient"
      | `SpeculationRuleRemoved -> `String "SpeculationRuleRemoved"
      | `ActivatedWithAuxiliaryBrowsingContexts ->
          `String "ActivatedWithAuxiliaryBrowsingContexts"

    type t = _prerenderfinalstatus
    [@@deriving yojson]
    [@@ocaml.doc "List of FinalStatus reasons for Prerender2."]
  end

  and PreloadingStatus : sig
    type _preloadingstatus =
      [ `Pending | `Running | `Ready | `Success | `Failure | `NotSupported ]

    val _preloadingstatus_of_yojson : Yojson.Basic.t -> _preloadingstatus
    val yojson_of__preloadingstatus : _preloadingstatus -> Yojson.Basic.t

    type t = _preloadingstatus
    [@@deriving yojson]
    [@@ocaml.doc
      "Preloading status values, see also PreloadingTriggeringOutcome. This\n\
       status is shared by prefetchStatusUpdated and prerenderStatusUpdated."]
  end = struct
    type _preloadingstatus =
      [ `Pending | `Running | `Ready | `Success | `Failure | `NotSupported ]

    let _preloadingstatus_of_yojson = function
      | `String "Pending" -> `Pending
      | `String "Running" -> `Running
      | `String "Ready" -> `Ready
      | `String "Success" -> `Success
      | `String "Failure" -> `Failure
      | `String "NotSupported" -> `NotSupported
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__preloadingstatus = function
      | `Pending -> `String "Pending"
      | `Running -> `String "Running"
      | `Ready -> `String "Ready"
      | `Success -> `String "Success"
      | `Failure -> `String "Failure"
      | `NotSupported -> `String "NotSupported"

    type t = _preloadingstatus
    [@@deriving yojson]
    [@@ocaml.doc
      "Preloading status values, see also PreloadingTriggeringOutcome. This\n\
       status is shared by prefetchStatusUpdated and prerenderStatusUpdated."]
  end

  and PrefetchStatus : sig
    type _prefetchstatus =
      [ `PrefetchAllowed
      | `PrefetchFailedIneligibleRedirect
      | `PrefetchFailedInvalidRedirect
      | `PrefetchFailedMIMENotSupported
      | `PrefetchFailedNetError
      | `PrefetchFailedNon2XX
      | `PrefetchFailedPerPageLimitExceeded
      | `PrefetchEvicted
      | `PrefetchHeldback
      | `PrefetchIneligibleRetryAfter
      | `PrefetchIsPrivacyDecoy
      | `PrefetchIsStale
      | `PrefetchNotEligibleBrowserContextOffTheRecord
      | `PrefetchNotEligibleDataSaverEnabled
      | `PrefetchNotEligibleExistingProxy
      | `PrefetchNotEligibleHostIsNonUnique
      | `PrefetchNotEligibleNonDefaultStoragePartition
      | `PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy
      | `PrefetchNotEligibleSchemeIsNotHttps
      | `PrefetchNotEligibleUserHasCookies
      | `PrefetchNotEligibleUserHasServiceWorker
      | `PrefetchNotEligibleBatterySaverEnabled
      | `PrefetchNotEligiblePreloadingDisabled
      | `PrefetchNotFinishedInTime
      | `PrefetchNotStarted
      | `PrefetchNotUsedCookiesChanged
      | `PrefetchProxyNotAvailable
      | `PrefetchResponseUsed
      | `PrefetchSuccessfulButNotUsed
      | `PrefetchNotUsedProbeFailed ]

    val _prefetchstatus_of_yojson : Yojson.Basic.t -> _prefetchstatus
    val yojson_of__prefetchstatus : _prefetchstatus -> Yojson.Basic.t

    type t = _prefetchstatus
    [@@deriving yojson]
    [@@ocaml.doc
      "TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and\n\
       filter out the ones that aren't necessary to the developers."]
  end = struct
    type _prefetchstatus =
      [ `PrefetchAllowed
      | `PrefetchFailedIneligibleRedirect
      | `PrefetchFailedInvalidRedirect
      | `PrefetchFailedMIMENotSupported
      | `PrefetchFailedNetError
      | `PrefetchFailedNon2XX
      | `PrefetchFailedPerPageLimitExceeded
      | `PrefetchEvicted
      | `PrefetchHeldback
      | `PrefetchIneligibleRetryAfter
      | `PrefetchIsPrivacyDecoy
      | `PrefetchIsStale
      | `PrefetchNotEligibleBrowserContextOffTheRecord
      | `PrefetchNotEligibleDataSaverEnabled
      | `PrefetchNotEligibleExistingProxy
      | `PrefetchNotEligibleHostIsNonUnique
      | `PrefetchNotEligibleNonDefaultStoragePartition
      | `PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy
      | `PrefetchNotEligibleSchemeIsNotHttps
      | `PrefetchNotEligibleUserHasCookies
      | `PrefetchNotEligibleUserHasServiceWorker
      | `PrefetchNotEligibleBatterySaverEnabled
      | `PrefetchNotEligiblePreloadingDisabled
      | `PrefetchNotFinishedInTime
      | `PrefetchNotStarted
      | `PrefetchNotUsedCookiesChanged
      | `PrefetchProxyNotAvailable
      | `PrefetchResponseUsed
      | `PrefetchSuccessfulButNotUsed
      | `PrefetchNotUsedProbeFailed ]

    let _prefetchstatus_of_yojson = function
      | `String "PrefetchAllowed" -> `PrefetchAllowed
      | `String "PrefetchFailedIneligibleRedirect" ->
          `PrefetchFailedIneligibleRedirect
      | `String "PrefetchFailedInvalidRedirect" ->
          `PrefetchFailedInvalidRedirect
      | `String "PrefetchFailedMIMENotSupported" ->
          `PrefetchFailedMIMENotSupported
      | `String "PrefetchFailedNetError" -> `PrefetchFailedNetError
      | `String "PrefetchFailedNon2XX" -> `PrefetchFailedNon2XX
      | `String "PrefetchFailedPerPageLimitExceeded" ->
          `PrefetchFailedPerPageLimitExceeded
      | `String "PrefetchEvicted" -> `PrefetchEvicted
      | `String "PrefetchHeldback" -> `PrefetchHeldback
      | `String "PrefetchIneligibleRetryAfter" -> `PrefetchIneligibleRetryAfter
      | `String "PrefetchIsPrivacyDecoy" -> `PrefetchIsPrivacyDecoy
      | `String "PrefetchIsStale" -> `PrefetchIsStale
      | `String "PrefetchNotEligibleBrowserContextOffTheRecord" ->
          `PrefetchNotEligibleBrowserContextOffTheRecord
      | `String "PrefetchNotEligibleDataSaverEnabled" ->
          `PrefetchNotEligibleDataSaverEnabled
      | `String "PrefetchNotEligibleExistingProxy" ->
          `PrefetchNotEligibleExistingProxy
      | `String "PrefetchNotEligibleHostIsNonUnique" ->
          `PrefetchNotEligibleHostIsNonUnique
      | `String "PrefetchNotEligibleNonDefaultStoragePartition" ->
          `PrefetchNotEligibleNonDefaultStoragePartition
      | `String "PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy" ->
          `PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy
      | `String "PrefetchNotEligibleSchemeIsNotHttps" ->
          `PrefetchNotEligibleSchemeIsNotHttps
      | `String "PrefetchNotEligibleUserHasCookies" ->
          `PrefetchNotEligibleUserHasCookies
      | `String "PrefetchNotEligibleUserHasServiceWorker" ->
          `PrefetchNotEligibleUserHasServiceWorker
      | `String "PrefetchNotEligibleBatterySaverEnabled" ->
          `PrefetchNotEligibleBatterySaverEnabled
      | `String "PrefetchNotEligiblePreloadingDisabled" ->
          `PrefetchNotEligiblePreloadingDisabled
      | `String "PrefetchNotFinishedInTime" -> `PrefetchNotFinishedInTime
      | `String "PrefetchNotStarted" -> `PrefetchNotStarted
      | `String "PrefetchNotUsedCookiesChanged" ->
          `PrefetchNotUsedCookiesChanged
      | `String "PrefetchProxyNotAvailable" -> `PrefetchProxyNotAvailable
      | `String "PrefetchResponseUsed" -> `PrefetchResponseUsed
      | `String "PrefetchSuccessfulButNotUsed" -> `PrefetchSuccessfulButNotUsed
      | `String "PrefetchNotUsedProbeFailed" -> `PrefetchNotUsedProbeFailed
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__prefetchstatus = function
      | `PrefetchAllowed -> `String "PrefetchAllowed"
      | `PrefetchFailedIneligibleRedirect ->
          `String "PrefetchFailedIneligibleRedirect"
      | `PrefetchFailedInvalidRedirect ->
          `String "PrefetchFailedInvalidRedirect"
      | `PrefetchFailedMIMENotSupported ->
          `String "PrefetchFailedMIMENotSupported"
      | `PrefetchFailedNetError -> `String "PrefetchFailedNetError"
      | `PrefetchFailedNon2XX -> `String "PrefetchFailedNon2XX"
      | `PrefetchFailedPerPageLimitExceeded ->
          `String "PrefetchFailedPerPageLimitExceeded"
      | `PrefetchEvicted -> `String "PrefetchEvicted"
      | `PrefetchHeldback -> `String "PrefetchHeldback"
      | `PrefetchIneligibleRetryAfter -> `String "PrefetchIneligibleRetryAfter"
      | `PrefetchIsPrivacyDecoy -> `String "PrefetchIsPrivacyDecoy"
      | `PrefetchIsStale -> `String "PrefetchIsStale"
      | `PrefetchNotEligibleBrowserContextOffTheRecord ->
          `String "PrefetchNotEligibleBrowserContextOffTheRecord"
      | `PrefetchNotEligibleDataSaverEnabled ->
          `String "PrefetchNotEligibleDataSaverEnabled"
      | `PrefetchNotEligibleExistingProxy ->
          `String "PrefetchNotEligibleExistingProxy"
      | `PrefetchNotEligibleHostIsNonUnique ->
          `String "PrefetchNotEligibleHostIsNonUnique"
      | `PrefetchNotEligibleNonDefaultStoragePartition ->
          `String "PrefetchNotEligibleNonDefaultStoragePartition"
      | `PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy ->
          `String "PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy"
      | `PrefetchNotEligibleSchemeIsNotHttps ->
          `String "PrefetchNotEligibleSchemeIsNotHttps"
      | `PrefetchNotEligibleUserHasCookies ->
          `String "PrefetchNotEligibleUserHasCookies"
      | `PrefetchNotEligibleUserHasServiceWorker ->
          `String "PrefetchNotEligibleUserHasServiceWorker"
      | `PrefetchNotEligibleBatterySaverEnabled ->
          `String "PrefetchNotEligibleBatterySaverEnabled"
      | `PrefetchNotEligiblePreloadingDisabled ->
          `String "PrefetchNotEligiblePreloadingDisabled"
      | `PrefetchNotFinishedInTime -> `String "PrefetchNotFinishedInTime"
      | `PrefetchNotStarted -> `String "PrefetchNotStarted"
      | `PrefetchNotUsedCookiesChanged ->
          `String "PrefetchNotUsedCookiesChanged"
      | `PrefetchProxyNotAvailable -> `String "PrefetchProxyNotAvailable"
      | `PrefetchResponseUsed -> `String "PrefetchResponseUsed"
      | `PrefetchSuccessfulButNotUsed -> `String "PrefetchSuccessfulButNotUsed"
      | `PrefetchNotUsedProbeFailed -> `String "PrefetchNotUsedProbeFailed"

    type t = _prefetchstatus
    [@@deriving yojson]
    [@@ocaml.doc
      "TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and\n\
       filter out the ones that aren't necessary to the developers."]
  end
end

and FedCm : sig
  module rec LoginState : sig
    type _loginstate = [ `SignIn | `SignUp ]

    val _loginstate_of_yojson : Yojson.Basic.t -> _loginstate
    val yojson_of__loginstate : _loginstate -> Yojson.Basic.t

    type t = _loginstate
    [@@deriving yojson]
    [@@ocaml.doc
      "Whether this is a sign-up or sign-in action for this account, i.e.\n\
       whether this account has ever been used to sign in to this RP before."]
  end

  and DialogType : sig
    type _dialogtype = [ `AccountChooser | `AutoReauthn ]

    val _dialogtype_of_yojson : Yojson.Basic.t -> _dialogtype
    val yojson_of__dialogtype : _dialogtype -> Yojson.Basic.t

    type t = _dialogtype
    [@@deriving yojson]
    [@@ocaml.doc
      "Whether the dialog shown is an account chooser or an auto \
       re-authentication dialog."]
  end

  and Account : sig
    type t = {
      accountId : string;
          [@key "accountId"] [@ocaml.doc "No description provided"]
      email : string; [@key "email"] [@ocaml.doc "No description provided"]
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      givenName : string;
          [@key "givenName"] [@ocaml.doc "No description provided"]
      pictureUrl : string;
          [@key "pictureUrl"] [@ocaml.doc "No description provided"]
      idpConfigUrl : string;
          [@key "idpConfigUrl"] [@ocaml.doc "No description provided"]
      idpSigninUrl : string;
          [@key "idpSigninUrl"] [@ocaml.doc "No description provided"]
      loginState : LoginState.t;
          [@key "loginState"] [@ocaml.doc "No description provided"]
      termsOfServiceUrl : string option;
          [@key "termsOfServiceUrl"]
          [@yojson.option]
          [@ocaml.doc "These two are only set if the loginState is signUp"]
      privacyPolicyUrl : string option;
          [@key "privacyPolicyUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to IdentityRequestAccount"]
  end
end = struct
  module rec LoginState : sig
    type _loginstate = [ `SignIn | `SignUp ]

    val _loginstate_of_yojson : Yojson.Basic.t -> _loginstate
    val yojson_of__loginstate : _loginstate -> Yojson.Basic.t

    type t = _loginstate
    [@@deriving yojson]
    [@@ocaml.doc
      "Whether this is a sign-up or sign-in action for this account, i.e.\n\
       whether this account has ever been used to sign in to this RP before."]
  end = struct
    type _loginstate = [ `SignIn | `SignUp ]

    let _loginstate_of_yojson = function
      | `String "SignIn" -> `SignIn
      | `String "SignUp" -> `SignUp
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__loginstate = function
      | `SignIn -> `String "SignIn"
      | `SignUp -> `String "SignUp"

    type t = _loginstate
    [@@deriving yojson]
    [@@ocaml.doc
      "Whether this is a sign-up or sign-in action for this account, i.e.\n\
       whether this account has ever been used to sign in to this RP before."]
  end

  and DialogType : sig
    type _dialogtype = [ `AccountChooser | `AutoReauthn ]

    val _dialogtype_of_yojson : Yojson.Basic.t -> _dialogtype
    val yojson_of__dialogtype : _dialogtype -> Yojson.Basic.t

    type t = _dialogtype
    [@@deriving yojson]
    [@@ocaml.doc
      "Whether the dialog shown is an account chooser or an auto \
       re-authentication dialog."]
  end = struct
    type _dialogtype = [ `AccountChooser | `AutoReauthn ]

    let _dialogtype_of_yojson = function
      | `String "AccountChooser" -> `AccountChooser
      | `String "AutoReauthn" -> `AutoReauthn
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__dialogtype = function
      | `AccountChooser -> `String "AccountChooser"
      | `AutoReauthn -> `String "AutoReauthn"

    type t = _dialogtype
    [@@deriving yojson]
    [@@ocaml.doc
      "Whether the dialog shown is an account chooser or an auto \
       re-authentication dialog."]
  end

  and Account : sig
    type t = {
      accountId : string;
          [@key "accountId"] [@ocaml.doc "No description provided"]
      email : string; [@key "email"] [@ocaml.doc "No description provided"]
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      givenName : string;
          [@key "givenName"] [@ocaml.doc "No description provided"]
      pictureUrl : string;
          [@key "pictureUrl"] [@ocaml.doc "No description provided"]
      idpConfigUrl : string;
          [@key "idpConfigUrl"] [@ocaml.doc "No description provided"]
      idpSigninUrl : string;
          [@key "idpSigninUrl"] [@ocaml.doc "No description provided"]
      loginState : LoginState.t;
          [@key "loginState"] [@ocaml.doc "No description provided"]
      termsOfServiceUrl : string option;
          [@key "termsOfServiceUrl"]
          [@yojson.option]
          [@ocaml.doc "These two are only set if the loginState is signUp"]
      privacyPolicyUrl : string option;
          [@key "privacyPolicyUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to IdentityRequestAccount"]
  end = struct
    type t = {
      accountId : string;
          [@key "accountId"] [@ocaml.doc "No description provided"]
      email : string; [@key "email"] [@ocaml.doc "No description provided"]
      name : string; [@key "name"] [@ocaml.doc "No description provided"]
      givenName : string;
          [@key "givenName"] [@ocaml.doc "No description provided"]
      pictureUrl : string;
          [@key "pictureUrl"] [@ocaml.doc "No description provided"]
      idpConfigUrl : string;
          [@key "idpConfigUrl"] [@ocaml.doc "No description provided"]
      idpSigninUrl : string;
          [@key "idpSigninUrl"] [@ocaml.doc "No description provided"]
      loginState : LoginState.t;
          [@key "loginState"] [@ocaml.doc "No description provided"]
      termsOfServiceUrl : string option;
          [@key "termsOfServiceUrl"]
          [@yojson.option]
          [@ocaml.doc "These two are only set if the loginState is signUp"]
      privacyPolicyUrl : string option;
          [@key "privacyPolicyUrl"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Corresponds to IdentityRequestAccount"]
  end
end

and Console : sig
  module rec ConsoleMessage : sig
    type _consolemessage_source =
      [ `xml
      | `javascript
      | `network
      | `console_api
      | `storage
      | `appcache
      | `rendering
      | `security
      | `other
      | `deprecation
      | `worker ]

    val _consolemessage_source_of_yojson :
      Yojson.Basic.t -> _consolemessage_source

    val yojson_of__consolemessage_source :
      _consolemessage_source -> Yojson.Basic.t

    type _consolemessage_level = [ `log | `warning | `error | `debug | `info ]

    val _consolemessage_level_of_yojson :
      Yojson.Basic.t -> _consolemessage_level

    val yojson_of__consolemessage_level :
      _consolemessage_level -> Yojson.Basic.t

    type t = {
      source : _consolemessage_source;
          [@key "source"] [@ocaml.doc "Message source."]
      level : _consolemessage_level;
          [@key "level"] [@ocaml.doc "Message severity."]
      text : string; [@key "text"] [@ocaml.doc "Message text."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc "URL of the message origin."]
      line : number option;
          [@key "line"]
          [@yojson.option]
          [@ocaml.doc
            "Line number in the resource that generated this message (1-based)."]
      column : number option;
          [@key "column"]
          [@yojson.option]
          [@ocaml.doc
            "Column number in the resource that generated this message \
             (1-based)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Console message."]
  end
end = struct
  module rec ConsoleMessage : sig
    type _consolemessage_source =
      [ `xml
      | `javascript
      | `network
      | `console_api
      | `storage
      | `appcache
      | `rendering
      | `security
      | `other
      | `deprecation
      | `worker ]

    val _consolemessage_source_of_yojson :
      Yojson.Basic.t -> _consolemessage_source

    val yojson_of__consolemessage_source :
      _consolemessage_source -> Yojson.Basic.t

    type _consolemessage_level = [ `log | `warning | `error | `debug | `info ]

    val _consolemessage_level_of_yojson :
      Yojson.Basic.t -> _consolemessage_level

    val yojson_of__consolemessage_level :
      _consolemessage_level -> Yojson.Basic.t

    type t = {
      source : _consolemessage_source;
          [@key "source"] [@ocaml.doc "Message source."]
      level : _consolemessage_level;
          [@key "level"] [@ocaml.doc "Message severity."]
      text : string; [@key "text"] [@ocaml.doc "Message text."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc "URL of the message origin."]
      line : number option;
          [@key "line"]
          [@yojson.option]
          [@ocaml.doc
            "Line number in the resource that generated this message (1-based)."]
      column : number option;
          [@key "column"]
          [@yojson.option]
          [@ocaml.doc
            "Column number in the resource that generated this message \
             (1-based)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Console message."]
  end = struct
    type _consolemessage_source =
      [ `xml
      | `javascript
      | `network
      | `console_api
      | `storage
      | `appcache
      | `rendering
      | `security
      | `other
      | `deprecation
      | `worker ]

    let _consolemessage_source_of_yojson = function
      | `String "xml" -> `xml
      | `String "javascript" -> `javascript
      | `String "network" -> `network
      | `String "console-api" -> `console_api
      | `String "storage" -> `storage
      | `String "appcache" -> `appcache
      | `String "rendering" -> `rendering
      | `String "security" -> `security
      | `String "other" -> `other
      | `String "deprecation" -> `deprecation
      | `String "worker" -> `worker
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__consolemessage_source = function
      | `xml -> `String "xml"
      | `javascript -> `String "javascript"
      | `network -> `String "network"
      | `console_api -> `String "console-api"
      | `storage -> `String "storage"
      | `appcache -> `String "appcache"
      | `rendering -> `String "rendering"
      | `security -> `String "security"
      | `other -> `String "other"
      | `deprecation -> `String "deprecation"
      | `worker -> `String "worker"

    type _consolemessage_level = [ `log | `warning | `error | `debug | `info ]

    let _consolemessage_level_of_yojson = function
      | `String "log" -> `log
      | `String "warning" -> `warning
      | `String "error" -> `error
      | `String "debug" -> `debug
      | `String "info" -> `info
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__consolemessage_level = function
      | `log -> `String "log"
      | `warning -> `String "warning"
      | `error -> `String "error"
      | `debug -> `String "debug"
      | `info -> `String "info"

    type t = {
      source : _consolemessage_source;
          [@key "source"] [@ocaml.doc "Message source."]
      level : _consolemessage_level;
          [@key "level"] [@ocaml.doc "Message severity."]
      text : string; [@key "text"] [@ocaml.doc "Message text."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc "URL of the message origin."]
      line : number option;
          [@key "line"]
          [@yojson.option]
          [@ocaml.doc
            "Line number in the resource that generated this message (1-based)."]
      column : number option;
          [@key "column"]
          [@yojson.option]
          [@ocaml.doc
            "Column number in the resource that generated this message \
             (1-based)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Console message."]
  end
end

and Debugger : sig
  module rec BreakpointId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Breakpoint identifier."]
  end

  and CallFrameId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Call frame identifier."]
  end

  and Location : sig
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"]
          [@ocaml.doc
            "Script identifier as reported in the `Debugger.scriptParsed`."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number in the script (0-based)."]
      columnNumber : number option;
          [@key "columnNumber"]
          [@yojson.option]
          [@ocaml.doc "Column number in the script (0-based)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Location in the source code."]
  end

  and ScriptPosition : sig
    type t = {
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "No description provided"]
      columnNumber : number;
          [@key "columnNumber"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Location in the source code."]
  end

  and LocationRange : sig
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "No description provided"]
      start : ScriptPosition.t;
          [@key "start"] [@ocaml.doc "No description provided"]
      end_ : ScriptPosition.t;
          [@key "end"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Location range within one script."]
  end

  and CallFrame : sig
    type t = {
      callFrameId : CallFrameId.t;
          [@key "callFrameId"]
          [@ocaml.doc
            "Call frame identifier. This identifier is only valid while the \
             virtual machine is paused."]
      functionName : string;
          [@key "functionName"]
          [@ocaml.doc
            "Name of the JavaScript function called on this call frame."]
      functionLocation : Location.t option;
          [@key "functionLocation"]
          [@yojson.option]
          [@ocaml.doc "Location in the source code."]
      location : Location.t;
          [@key "location"] [@ocaml.doc "Location in the source code."]
      url : string;
          [@key "url"]
          [@ocaml.doc
            "JavaScript script name or url.\n\
             Deprecated in favor of using the `location.scriptId` to resolve \
             the URL via a previously\n\
             sent `Debugger.scriptParsed` event."]
      scopeChain : Scope.t list;
          [@key "scopeChain"] [@ocaml.doc "Scope chain for this call frame."]
      this : Runtime.RemoteObject.t;
          [@key "this"] [@ocaml.doc "`this` object for this call frame."]
      returnValue : Runtime.RemoteObject.t option;
          [@key "returnValue"]
          [@yojson.option]
          [@ocaml.doc
            "The value being returned, if the function is at return point."]
      canBeRestarted : bool option;
          [@key "canBeRestarted"]
          [@yojson.option]
          [@ocaml.doc
            "Valid only while the VM is paused and indicates whether this frame\n\
             can be restarted or not. Note that a `true` value here does not\n\
             guarantee that Debugger#restartFrame with this CallFrameId will be\n\
             successful, but it is very likely."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "JavaScript call frame. Array of call frames form the call stack."]
  end

  and Scope : sig
    type _scope_type =
      [ `global
      | `local
      | `with_
      | `closure
      | `catch
      | `block
      | `script
      | `eval
      | `module_
      | `wasm_expression_stack ]

    val _scope_type_of_yojson : Yojson.Basic.t -> _scope_type
    val yojson_of__scope_type : _scope_type -> Yojson.Basic.t

    type t = {
      type_ : _scope_type; [@key "type"] [@ocaml.doc "Scope type."]
      object_ : Runtime.RemoteObject.t;
          [@key "object"]
          [@ocaml.doc
            "Object representing the scope. For `global` and `with` scopes it \
             represents the actual\n\
             object; for the rest of the scopes, it is artificial transient \
             object enumerating scope\n\
             variables as its properties."]
      name : string option;
          [@key "name"] [@yojson.option] [@ocaml.doc "No description provided"]
      startLocation : Location.t option;
          [@key "startLocation"]
          [@yojson.option]
          [@ocaml.doc "Location in the source code where scope starts"]
      endLocation : Location.t option;
          [@key "endLocation"]
          [@yojson.option]
          [@ocaml.doc "Location in the source code where scope ends"]
    }
    [@@deriving yojson] [@@ocaml.doc "Scope description."]
  end

  and SearchMatch : sig
    type t = {
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "Line number in resource content."]
      lineContent : string;
          [@key "lineContent"] [@ocaml.doc "Line with match content."]
    }
    [@@deriving yojson] [@@ocaml.doc "Search match for resource."]
  end

  and BreakLocation : sig
    type _breaklocation_type = [ `debuggerStatement | `call | `return ]

    val _breaklocation_type_of_yojson : Yojson.Basic.t -> _breaklocation_type
    val yojson_of__breaklocation_type : _breaklocation_type -> Yojson.Basic.t

    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"]
          [@ocaml.doc
            "Script identifier as reported in the `Debugger.scriptParsed`."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number in the script (0-based)."]
      columnNumber : number option;
          [@key "columnNumber"]
          [@yojson.option]
          [@ocaml.doc "Column number in the script (0-based)."]
      type_ : _breaklocation_type option;
          [@key "type"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and WasmDisassemblyChunk : sig
    type t = {
      lines : string list;
          [@key "lines"] [@ocaml.doc "The next chunk of disassembled lines."]
      bytecodeOffsets : number list;
          [@key "bytecodeOffsets"]
          [@ocaml.doc "The bytecode offsets describing the start of each line."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ScriptLanguage : sig
    type _scriptlanguage = [ `JavaScript | `WebAssembly ]

    val _scriptlanguage_of_yojson : Yojson.Basic.t -> _scriptlanguage
    val yojson_of__scriptlanguage : _scriptlanguage -> Yojson.Basic.t

    type t = _scriptlanguage
    [@@deriving yojson] [@@ocaml.doc "Enum of possible script languages."]
  end

  and DebugSymbols : sig
    type _debugsymbols_type =
      [ `None | `SourceMap | `EmbeddedDWARF | `ExternalDWARF ]

    val _debugsymbols_type_of_yojson : Yojson.Basic.t -> _debugsymbols_type
    val yojson_of__debugsymbols_type : _debugsymbols_type -> Yojson.Basic.t

    type t = {
      type_ : _debugsymbols_type;
          [@key "type"] [@ocaml.doc "Type of the debug symbols."]
      externalURL : string option;
          [@key "externalURL"]
          [@yojson.option]
          [@ocaml.doc "URL of the external symbol source."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Debug symbols available for a wasm script."]
  end
end = struct
  module rec BreakpointId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Breakpoint identifier."]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "Breakpoint identifier."]
  end

  and CallFrameId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Call frame identifier."]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "Call frame identifier."]
  end

  and Location : sig
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"]
          [@ocaml.doc
            "Script identifier as reported in the `Debugger.scriptParsed`."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number in the script (0-based)."]
      columnNumber : number option;
          [@key "columnNumber"]
          [@yojson.option]
          [@ocaml.doc "Column number in the script (0-based)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Location in the source code."]
  end = struct
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"]
          [@ocaml.doc
            "Script identifier as reported in the `Debugger.scriptParsed`."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number in the script (0-based)."]
      columnNumber : number option;
          [@key "columnNumber"]
          [@yojson.option]
          [@ocaml.doc "Column number in the script (0-based)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Location in the source code."]
  end

  and ScriptPosition : sig
    type t = {
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "No description provided"]
      columnNumber : number;
          [@key "columnNumber"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Location in the source code."]
  end = struct
    type t = {
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "No description provided"]
      columnNumber : number;
          [@key "columnNumber"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Location in the source code."]
  end

  and LocationRange : sig
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "No description provided"]
      start : ScriptPosition.t;
          [@key "start"] [@ocaml.doc "No description provided"]
      end_ : ScriptPosition.t;
          [@key "end"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Location range within one script."]
  end = struct
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "No description provided"]
      start : ScriptPosition.t;
          [@key "start"] [@ocaml.doc "No description provided"]
      end_ : ScriptPosition.t;
          [@key "end"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Location range within one script."]
  end

  and CallFrame : sig
    type t = {
      callFrameId : CallFrameId.t;
          [@key "callFrameId"]
          [@ocaml.doc
            "Call frame identifier. This identifier is only valid while the \
             virtual machine is paused."]
      functionName : string;
          [@key "functionName"]
          [@ocaml.doc
            "Name of the JavaScript function called on this call frame."]
      functionLocation : Location.t option;
          [@key "functionLocation"]
          [@yojson.option]
          [@ocaml.doc "Location in the source code."]
      location : Location.t;
          [@key "location"] [@ocaml.doc "Location in the source code."]
      url : string;
          [@key "url"]
          [@ocaml.doc
            "JavaScript script name or url.\n\
             Deprecated in favor of using the `location.scriptId` to resolve \
             the URL via a previously\n\
             sent `Debugger.scriptParsed` event."]
      scopeChain : Scope.t list;
          [@key "scopeChain"] [@ocaml.doc "Scope chain for this call frame."]
      this : Runtime.RemoteObject.t;
          [@key "this"] [@ocaml.doc "`this` object for this call frame."]
      returnValue : Runtime.RemoteObject.t option;
          [@key "returnValue"]
          [@yojson.option]
          [@ocaml.doc
            "The value being returned, if the function is at return point."]
      canBeRestarted : bool option;
          [@key "canBeRestarted"]
          [@yojson.option]
          [@ocaml.doc
            "Valid only while the VM is paused and indicates whether this frame\n\
             can be restarted or not. Note that a `true` value here does not\n\
             guarantee that Debugger#restartFrame with this CallFrameId will be\n\
             successful, but it is very likely."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "JavaScript call frame. Array of call frames form the call stack."]
  end = struct
    type t = {
      callFrameId : CallFrameId.t;
          [@key "callFrameId"]
          [@ocaml.doc
            "Call frame identifier. This identifier is only valid while the \
             virtual machine is paused."]
      functionName : string;
          [@key "functionName"]
          [@ocaml.doc
            "Name of the JavaScript function called on this call frame."]
      functionLocation : Location.t option;
          [@key "functionLocation"]
          [@yojson.option]
          [@ocaml.doc "Location in the source code."]
      location : Location.t;
          [@key "location"] [@ocaml.doc "Location in the source code."]
      url : string;
          [@key "url"]
          [@ocaml.doc
            "JavaScript script name or url.\n\
             Deprecated in favor of using the `location.scriptId` to resolve \
             the URL via a previously\n\
             sent `Debugger.scriptParsed` event."]
      scopeChain : Scope.t list;
          [@key "scopeChain"] [@ocaml.doc "Scope chain for this call frame."]
      this : Runtime.RemoteObject.t;
          [@key "this"] [@ocaml.doc "`this` object for this call frame."]
      returnValue : Runtime.RemoteObject.t option;
          [@key "returnValue"]
          [@yojson.option]
          [@ocaml.doc
            "The value being returned, if the function is at return point."]
      canBeRestarted : bool option;
          [@key "canBeRestarted"]
          [@yojson.option]
          [@ocaml.doc
            "Valid only while the VM is paused and indicates whether this frame\n\
             can be restarted or not. Note that a `true` value here does not\n\
             guarantee that Debugger#restartFrame with this CallFrameId will be\n\
             successful, but it is very likely."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "JavaScript call frame. Array of call frames form the call stack."]
  end

  and Scope : sig
    type _scope_type =
      [ `global
      | `local
      | `with_
      | `closure
      | `catch
      | `block
      | `script
      | `eval
      | `module_
      | `wasm_expression_stack ]

    val _scope_type_of_yojson : Yojson.Basic.t -> _scope_type
    val yojson_of__scope_type : _scope_type -> Yojson.Basic.t

    type t = {
      type_ : _scope_type; [@key "type"] [@ocaml.doc "Scope type."]
      object_ : Runtime.RemoteObject.t;
          [@key "object"]
          [@ocaml.doc
            "Object representing the scope. For `global` and `with` scopes it \
             represents the actual\n\
             object; for the rest of the scopes, it is artificial transient \
             object enumerating scope\n\
             variables as its properties."]
      name : string option;
          [@key "name"] [@yojson.option] [@ocaml.doc "No description provided"]
      startLocation : Location.t option;
          [@key "startLocation"]
          [@yojson.option]
          [@ocaml.doc "Location in the source code where scope starts"]
      endLocation : Location.t option;
          [@key "endLocation"]
          [@yojson.option]
          [@ocaml.doc "Location in the source code where scope ends"]
    }
    [@@deriving yojson] [@@ocaml.doc "Scope description."]
  end = struct
    type _scope_type =
      [ `global
      | `local
      | `with_
      | `closure
      | `catch
      | `block
      | `script
      | `eval
      | `module_
      | `wasm_expression_stack ]

    let _scope_type_of_yojson = function
      | `String "global" -> `global
      | `String "local" -> `local
      | `String "with" -> `with_
      | `String "closure" -> `closure
      | `String "catch" -> `catch
      | `String "block" -> `block
      | `String "script" -> `script
      | `String "eval" -> `eval
      | `String "module" -> `module_
      | `String "wasm-expression-stack" -> `wasm_expression_stack
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__scope_type = function
      | `global -> `String "global"
      | `local -> `String "local"
      | `with_ -> `String "with"
      | `closure -> `String "closure"
      | `catch -> `String "catch"
      | `block -> `String "block"
      | `script -> `String "script"
      | `eval -> `String "eval"
      | `module_ -> `String "module"
      | `wasm_expression_stack -> `String "wasm-expression-stack"

    type t = {
      type_ : _scope_type; [@key "type"] [@ocaml.doc "Scope type."]
      object_ : Runtime.RemoteObject.t;
          [@key "object"]
          [@ocaml.doc
            "Object representing the scope. For `global` and `with` scopes it \
             represents the actual\n\
             object; for the rest of the scopes, it is artificial transient \
             object enumerating scope\n\
             variables as its properties."]
      name : string option;
          [@key "name"] [@yojson.option] [@ocaml.doc "No description provided"]
      startLocation : Location.t option;
          [@key "startLocation"]
          [@yojson.option]
          [@ocaml.doc "Location in the source code where scope starts"]
      endLocation : Location.t option;
          [@key "endLocation"]
          [@yojson.option]
          [@ocaml.doc "Location in the source code where scope ends"]
    }
    [@@deriving yojson] [@@ocaml.doc "Scope description."]
  end

  and SearchMatch : sig
    type t = {
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "Line number in resource content."]
      lineContent : string;
          [@key "lineContent"] [@ocaml.doc "Line with match content."]
    }
    [@@deriving yojson] [@@ocaml.doc "Search match for resource."]
  end = struct
    type t = {
      lineNumber : number;
          [@key "lineNumber"] [@ocaml.doc "Line number in resource content."]
      lineContent : string;
          [@key "lineContent"] [@ocaml.doc "Line with match content."]
    }
    [@@deriving yojson] [@@ocaml.doc "Search match for resource."]
  end

  and BreakLocation : sig
    type _breaklocation_type = [ `debuggerStatement | `call | `return ]

    val _breaklocation_type_of_yojson : Yojson.Basic.t -> _breaklocation_type
    val yojson_of__breaklocation_type : _breaklocation_type -> Yojson.Basic.t

    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"]
          [@ocaml.doc
            "Script identifier as reported in the `Debugger.scriptParsed`."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number in the script (0-based)."]
      columnNumber : number option;
          [@key "columnNumber"]
          [@yojson.option]
          [@ocaml.doc "Column number in the script (0-based)."]
      type_ : _breaklocation_type option;
          [@key "type"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _breaklocation_type = [ `debuggerStatement | `call | `return ]

    let _breaklocation_type_of_yojson = function
      | `String "debuggerStatement" -> `debuggerStatement
      | `String "call" -> `call
      | `String "return" -> `return
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__breaklocation_type = function
      | `debuggerStatement -> `String "debuggerStatement"
      | `call -> `String "call"
      | `return -> `String "return"

    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"]
          [@ocaml.doc
            "Script identifier as reported in the `Debugger.scriptParsed`."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number in the script (0-based)."]
      columnNumber : number option;
          [@key "columnNumber"]
          [@yojson.option]
          [@ocaml.doc "Column number in the script (0-based)."]
      type_ : _breaklocation_type option;
          [@key "type"] [@yojson.option] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and WasmDisassemblyChunk : sig
    type t = {
      lines : string list;
          [@key "lines"] [@ocaml.doc "The next chunk of disassembled lines."]
      bytecodeOffsets : number list;
          [@key "bytecodeOffsets"]
          [@ocaml.doc "The bytecode offsets describing the start of each line."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      lines : string list;
          [@key "lines"] [@ocaml.doc "The next chunk of disassembled lines."]
      bytecodeOffsets : number list;
          [@key "bytecodeOffsets"]
          [@ocaml.doc "The bytecode offsets describing the start of each line."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ScriptLanguage : sig
    type _scriptlanguage = [ `JavaScript | `WebAssembly ]

    val _scriptlanguage_of_yojson : Yojson.Basic.t -> _scriptlanguage
    val yojson_of__scriptlanguage : _scriptlanguage -> Yojson.Basic.t

    type t = _scriptlanguage
    [@@deriving yojson] [@@ocaml.doc "Enum of possible script languages."]
  end = struct
    type _scriptlanguage = [ `JavaScript | `WebAssembly ]

    let _scriptlanguage_of_yojson = function
      | `String "JavaScript" -> `JavaScript
      | `String "WebAssembly" -> `WebAssembly
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__scriptlanguage = function
      | `JavaScript -> `String "JavaScript"
      | `WebAssembly -> `String "WebAssembly"

    type t = _scriptlanguage
    [@@deriving yojson] [@@ocaml.doc "Enum of possible script languages."]
  end

  and DebugSymbols : sig
    type _debugsymbols_type =
      [ `None | `SourceMap | `EmbeddedDWARF | `ExternalDWARF ]

    val _debugsymbols_type_of_yojson : Yojson.Basic.t -> _debugsymbols_type
    val yojson_of__debugsymbols_type : _debugsymbols_type -> Yojson.Basic.t

    type t = {
      type_ : _debugsymbols_type;
          [@key "type"] [@ocaml.doc "Type of the debug symbols."]
      externalURL : string option;
          [@key "externalURL"]
          [@yojson.option]
          [@ocaml.doc "URL of the external symbol source."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Debug symbols available for a wasm script."]
  end = struct
    type _debugsymbols_type =
      [ `None | `SourceMap | `EmbeddedDWARF | `ExternalDWARF ]

    let _debugsymbols_type_of_yojson = function
      | `String "None" -> `None
      | `String "SourceMap" -> `SourceMap
      | `String "EmbeddedDWARF" -> `EmbeddedDWARF
      | `String "ExternalDWARF" -> `ExternalDWARF
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__debugsymbols_type = function
      | `None -> `String "None"
      | `SourceMap -> `String "SourceMap"
      | `EmbeddedDWARF -> `String "EmbeddedDWARF"
      | `ExternalDWARF -> `String "ExternalDWARF"

    type t = {
      type_ : _debugsymbols_type;
          [@key "type"] [@ocaml.doc "Type of the debug symbols."]
      externalURL : string option;
          [@key "externalURL"]
          [@yojson.option]
          [@ocaml.doc "URL of the external symbol source."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Debug symbols available for a wasm script."]
  end
end

and HeapProfiler : sig
  module rec HeapSnapshotObjectId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Heap snapshot object id."]
  end

  and SamplingHeapProfileNode : sig
    type t = {
      callFrame : Runtime.CallFrame.t;
          [@key "callFrame"] [@ocaml.doc "Function location."]
      selfSize : number;
          [@key "selfSize"]
          [@ocaml.doc
            "Allocations size in bytes for the node excluding children."]
      id : number;
          [@key "id"]
          [@ocaml.doc
            "Node id. Ids are unique across all profiles collected between \
             startSampling and stopSampling."]
      children : SamplingHeapProfileNode.t list;
          [@key "children"] [@ocaml.doc "Child nodes."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Sampling Heap Profile node. Holds callsite information, allocation \
       statistics and child nodes."]
  end

  and SamplingHeapProfileSample : sig
    type t = {
      size : number;
          [@key "size"]
          [@ocaml.doc "Allocation size in bytes attributed to the sample."]
      nodeId : number;
          [@key "nodeId"]
          [@ocaml.doc "Id of the corresponding profile tree node."]
      ordinal : number;
          [@key "ordinal"]
          [@ocaml.doc
            "Time-ordered sample ordinal number. It is unique across all \
             profiles retrieved\n\
             between startSampling and stopSampling."]
    }
    [@@deriving yojson] [@@ocaml.doc "A single sample from a sampling profile."]
  end

  and SamplingHeapProfile : sig
    type t = {
      head : SamplingHeapProfileNode.t;
          [@key "head"] [@ocaml.doc "No description provided"]
      samples : SamplingHeapProfileSample.t list;
          [@key "samples"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Sampling profile."]
  end
end = struct
  module rec HeapSnapshotObjectId : sig
    type t = string [@@deriving yojson] [@@ocaml.doc "Heap snapshot object id."]
  end = struct
    type t = string [@@deriving yojson] [@@ocaml.doc "Heap snapshot object id."]
  end

  and SamplingHeapProfileNode : sig
    type t = {
      callFrame : Runtime.CallFrame.t;
          [@key "callFrame"] [@ocaml.doc "Function location."]
      selfSize : number;
          [@key "selfSize"]
          [@ocaml.doc
            "Allocations size in bytes for the node excluding children."]
      id : number;
          [@key "id"]
          [@ocaml.doc
            "Node id. Ids are unique across all profiles collected between \
             startSampling and stopSampling."]
      children : SamplingHeapProfileNode.t list;
          [@key "children"] [@ocaml.doc "Child nodes."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Sampling Heap Profile node. Holds callsite information, allocation \
       statistics and child nodes."]
  end = struct
    type t = {
      callFrame : Runtime.CallFrame.t;
          [@key "callFrame"] [@ocaml.doc "Function location."]
      selfSize : number;
          [@key "selfSize"]
          [@ocaml.doc
            "Allocations size in bytes for the node excluding children."]
      id : number;
          [@key "id"]
          [@ocaml.doc
            "Node id. Ids are unique across all profiles collected between \
             startSampling and stopSampling."]
      children : SamplingHeapProfileNode.t list;
          [@key "children"] [@ocaml.doc "Child nodes."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Sampling Heap Profile node. Holds callsite information, allocation \
       statistics and child nodes."]
  end

  and SamplingHeapProfileSample : sig
    type t = {
      size : number;
          [@key "size"]
          [@ocaml.doc "Allocation size in bytes attributed to the sample."]
      nodeId : number;
          [@key "nodeId"]
          [@ocaml.doc "Id of the corresponding profile tree node."]
      ordinal : number;
          [@key "ordinal"]
          [@ocaml.doc
            "Time-ordered sample ordinal number. It is unique across all \
             profiles retrieved\n\
             between startSampling and stopSampling."]
    }
    [@@deriving yojson] [@@ocaml.doc "A single sample from a sampling profile."]
  end = struct
    type t = {
      size : number;
          [@key "size"]
          [@ocaml.doc "Allocation size in bytes attributed to the sample."]
      nodeId : number;
          [@key "nodeId"]
          [@ocaml.doc "Id of the corresponding profile tree node."]
      ordinal : number;
          [@key "ordinal"]
          [@ocaml.doc
            "Time-ordered sample ordinal number. It is unique across all \
             profiles retrieved\n\
             between startSampling and stopSampling."]
    }
    [@@deriving yojson] [@@ocaml.doc "A single sample from a sampling profile."]
  end

  and SamplingHeapProfile : sig
    type t = {
      head : SamplingHeapProfileNode.t;
          [@key "head"] [@ocaml.doc "No description provided"]
      samples : SamplingHeapProfileSample.t list;
          [@key "samples"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Sampling profile."]
  end = struct
    type t = {
      head : SamplingHeapProfileNode.t;
          [@key "head"] [@ocaml.doc "No description provided"]
      samples : SamplingHeapProfileSample.t list;
          [@key "samples"] [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson] [@@ocaml.doc "Sampling profile."]
  end
end

and Profiler : sig
  module rec ProfileNode : sig
    type t = {
      id : number; [@key "id"] [@ocaml.doc "Unique id of the node."]
      callFrame : Runtime.CallFrame.t;
          [@key "callFrame"] [@ocaml.doc "Function location."]
      hitCount : number option;
          [@key "hitCount"]
          [@yojson.option]
          [@ocaml.doc
            "Number of samples where this node was on top of the call stack."]
      children : number list option;
          [@key "children"] [@yojson.option] [@ocaml.doc "Child node ids."]
      deoptReason : string option;
          [@key "deoptReason"]
          [@yojson.option]
          [@ocaml.doc
            "The reason of being not optimized. The function may be \
             deoptimized or marked as don't\n\
             optimize."]
      positionTicks : PositionTickInfo.t list option;
          [@key "positionTicks"]
          [@yojson.option]
          [@ocaml.doc "An array of source position ticks."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Profile node. Holds callsite information, execution statistics and \
       child nodes."]
  end

  and Profile : sig
    type t = {
      nodes : ProfileNode.t list;
          [@key "nodes"]
          [@ocaml.doc "The list of profile nodes. First item is the root node."]
      startTime : number;
          [@key "startTime"]
          [@ocaml.doc "Profiling start timestamp in microseconds."]
      endTime : number;
          [@key "endTime"]
          [@ocaml.doc "Profiling end timestamp in microseconds."]
      samples : number list option;
          [@key "samples"]
          [@yojson.option]
          [@ocaml.doc "Ids of samples top nodes."]
      timeDeltas : number list option;
          [@key "timeDeltas"]
          [@yojson.option]
          [@ocaml.doc
            "Time intervals between adjacent samples in microseconds. The \
             first delta is relative to the\n\
             profile startTime."]
    }
    [@@deriving yojson] [@@ocaml.doc "Profile."]
  end

  and PositionTickInfo : sig
    type t = {
      line : number; [@key "line"] [@ocaml.doc "Source line number (1-based)."]
      ticks : number;
          [@key "ticks"]
          [@ocaml.doc "Number of samples attributed to the source line."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Specifies a number of samples attributed to a certain source position."]
  end

  and CoverageRange : sig
    type t = {
      startOffset : number;
          [@key "startOffset"]
          [@ocaml.doc "JavaScript script source offset for the range start."]
      endOffset : number;
          [@key "endOffset"]
          [@ocaml.doc "JavaScript script source offset for the range end."]
      count : number;
          [@key "count"]
          [@ocaml.doc "Collected execution count of the source range."]
    }
    [@@deriving yojson] [@@ocaml.doc "Coverage data for a source range."]
  end

  and FunctionCoverage : sig
    type t = {
      functionName : string;
          [@key "functionName"] [@ocaml.doc "JavaScript function name."]
      ranges : CoverageRange.t list;
          [@key "ranges"]
          [@ocaml.doc "Source ranges inside the function with coverage data."]
      isBlockCoverage : bool;
          [@key "isBlockCoverage"]
          [@ocaml.doc
            "Whether coverage data for this function has block granularity."]
    }
    [@@deriving yojson] [@@ocaml.doc "Coverage data for a JavaScript function."]
  end

  and ScriptCoverage : sig
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "JavaScript script id."]
      url : string; [@key "url"] [@ocaml.doc "JavaScript script name or url."]
      functions : FunctionCoverage.t list;
          [@key "functions"]
          [@ocaml.doc
            "Functions contained in the script that has coverage data."]
    }
    [@@deriving yojson] [@@ocaml.doc "Coverage data for a JavaScript script."]
  end
end = struct
  module rec ProfileNode : sig
    type t = {
      id : number; [@key "id"] [@ocaml.doc "Unique id of the node."]
      callFrame : Runtime.CallFrame.t;
          [@key "callFrame"] [@ocaml.doc "Function location."]
      hitCount : number option;
          [@key "hitCount"]
          [@yojson.option]
          [@ocaml.doc
            "Number of samples where this node was on top of the call stack."]
      children : number list option;
          [@key "children"] [@yojson.option] [@ocaml.doc "Child node ids."]
      deoptReason : string option;
          [@key "deoptReason"]
          [@yojson.option]
          [@ocaml.doc
            "The reason of being not optimized. The function may be \
             deoptimized or marked as don't\n\
             optimize."]
      positionTicks : PositionTickInfo.t list option;
          [@key "positionTicks"]
          [@yojson.option]
          [@ocaml.doc "An array of source position ticks."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Profile node. Holds callsite information, execution statistics and \
       child nodes."]
  end = struct
    type t = {
      id : number; [@key "id"] [@ocaml.doc "Unique id of the node."]
      callFrame : Runtime.CallFrame.t;
          [@key "callFrame"] [@ocaml.doc "Function location."]
      hitCount : number option;
          [@key "hitCount"]
          [@yojson.option]
          [@ocaml.doc
            "Number of samples where this node was on top of the call stack."]
      children : number list option;
          [@key "children"] [@yojson.option] [@ocaml.doc "Child node ids."]
      deoptReason : string option;
          [@key "deoptReason"]
          [@yojson.option]
          [@ocaml.doc
            "The reason of being not optimized. The function may be \
             deoptimized or marked as don't\n\
             optimize."]
      positionTicks : PositionTickInfo.t list option;
          [@key "positionTicks"]
          [@yojson.option]
          [@ocaml.doc "An array of source position ticks."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Profile node. Holds callsite information, execution statistics and \
       child nodes."]
  end

  and Profile : sig
    type t = {
      nodes : ProfileNode.t list;
          [@key "nodes"]
          [@ocaml.doc "The list of profile nodes. First item is the root node."]
      startTime : number;
          [@key "startTime"]
          [@ocaml.doc "Profiling start timestamp in microseconds."]
      endTime : number;
          [@key "endTime"]
          [@ocaml.doc "Profiling end timestamp in microseconds."]
      samples : number list option;
          [@key "samples"]
          [@yojson.option]
          [@ocaml.doc "Ids of samples top nodes."]
      timeDeltas : number list option;
          [@key "timeDeltas"]
          [@yojson.option]
          [@ocaml.doc
            "Time intervals between adjacent samples in microseconds. The \
             first delta is relative to the\n\
             profile startTime."]
    }
    [@@deriving yojson] [@@ocaml.doc "Profile."]
  end = struct
    type t = {
      nodes : ProfileNode.t list;
          [@key "nodes"]
          [@ocaml.doc "The list of profile nodes. First item is the root node."]
      startTime : number;
          [@key "startTime"]
          [@ocaml.doc "Profiling start timestamp in microseconds."]
      endTime : number;
          [@key "endTime"]
          [@ocaml.doc "Profiling end timestamp in microseconds."]
      samples : number list option;
          [@key "samples"]
          [@yojson.option]
          [@ocaml.doc "Ids of samples top nodes."]
      timeDeltas : number list option;
          [@key "timeDeltas"]
          [@yojson.option]
          [@ocaml.doc
            "Time intervals between adjacent samples in microseconds. The \
             first delta is relative to the\n\
             profile startTime."]
    }
    [@@deriving yojson] [@@ocaml.doc "Profile."]
  end

  and PositionTickInfo : sig
    type t = {
      line : number; [@key "line"] [@ocaml.doc "Source line number (1-based)."]
      ticks : number;
          [@key "ticks"]
          [@ocaml.doc "Number of samples attributed to the source line."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Specifies a number of samples attributed to a certain source position."]
  end = struct
    type t = {
      line : number; [@key "line"] [@ocaml.doc "Source line number (1-based)."]
      ticks : number;
          [@key "ticks"]
          [@ocaml.doc "Number of samples attributed to the source line."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Specifies a number of samples attributed to a certain source position."]
  end

  and CoverageRange : sig
    type t = {
      startOffset : number;
          [@key "startOffset"]
          [@ocaml.doc "JavaScript script source offset for the range start."]
      endOffset : number;
          [@key "endOffset"]
          [@ocaml.doc "JavaScript script source offset for the range end."]
      count : number;
          [@key "count"]
          [@ocaml.doc "Collected execution count of the source range."]
    }
    [@@deriving yojson] [@@ocaml.doc "Coverage data for a source range."]
  end = struct
    type t = {
      startOffset : number;
          [@key "startOffset"]
          [@ocaml.doc "JavaScript script source offset for the range start."]
      endOffset : number;
          [@key "endOffset"]
          [@ocaml.doc "JavaScript script source offset for the range end."]
      count : number;
          [@key "count"]
          [@ocaml.doc "Collected execution count of the source range."]
    }
    [@@deriving yojson] [@@ocaml.doc "Coverage data for a source range."]
  end

  and FunctionCoverage : sig
    type t = {
      functionName : string;
          [@key "functionName"] [@ocaml.doc "JavaScript function name."]
      ranges : CoverageRange.t list;
          [@key "ranges"]
          [@ocaml.doc "Source ranges inside the function with coverage data."]
      isBlockCoverage : bool;
          [@key "isBlockCoverage"]
          [@ocaml.doc
            "Whether coverage data for this function has block granularity."]
    }
    [@@deriving yojson] [@@ocaml.doc "Coverage data for a JavaScript function."]
  end = struct
    type t = {
      functionName : string;
          [@key "functionName"] [@ocaml.doc "JavaScript function name."]
      ranges : CoverageRange.t list;
          [@key "ranges"]
          [@ocaml.doc "Source ranges inside the function with coverage data."]
      isBlockCoverage : bool;
          [@key "isBlockCoverage"]
          [@ocaml.doc
            "Whether coverage data for this function has block granularity."]
    }
    [@@deriving yojson] [@@ocaml.doc "Coverage data for a JavaScript function."]
  end

  and ScriptCoverage : sig
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "JavaScript script id."]
      url : string; [@key "url"] [@ocaml.doc "JavaScript script name or url."]
      functions : FunctionCoverage.t list;
          [@key "functions"]
          [@ocaml.doc
            "Functions contained in the script that has coverage data."]
    }
    [@@deriving yojson] [@@ocaml.doc "Coverage data for a JavaScript script."]
  end = struct
    type t = {
      scriptId : Runtime.ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "JavaScript script id."]
      url : string; [@key "url"] [@ocaml.doc "JavaScript script name or url."]
      functions : FunctionCoverage.t list;
          [@key "functions"]
          [@ocaml.doc
            "Functions contained in the script that has coverage data."]
    }
    [@@deriving yojson] [@@ocaml.doc "Coverage data for a JavaScript script."]
  end
end

and Runtime : sig
  module rec ScriptId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique script identifier."]
  end

  and SerializationOptions : sig
    type _serializationoptions_serialization = [ `deep | `json | `idOnly ]

    val _serializationoptions_serialization_of_yojson :
      Yojson.Basic.t -> _serializationoptions_serialization

    val yojson_of__serializationoptions_serialization :
      _serializationoptions_serialization -> Yojson.Basic.t

    type t = {
      serialization : _serializationoptions_serialization;
          [@key "serialization"] [@ocaml.doc "No description provided"]
      maxDepth : number option;
          [@key "maxDepth"]
          [@yojson.option]
          [@ocaml.doc
            "Deep serialization depth. Default is full depth. Respected only \
             in `deep` serialization mode."]
      additionalParameters : assoc option;
          [@key "additionalParameters"]
          [@yojson.option]
          [@ocaml.doc
            "Embedder-specific parameters. For example if connected to V8 in \
             Chrome these control DOM\n\
             serialization via `maxNodeDepth: integer` and `includeShadowTree: \
             \"none\" | \"open\" | \"all\"`.\n\
             Values can be only of type string or integer."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents options for serialization. Overrides `generatePreview`, \
       `returnByValue` and\n\
       `generateWebDriverValue`."]
  end

  and DeepSerializedValue : sig
    type _deepserializedvalue_type =
      [ `undefined
      | `null
      | `string
      | `number
      | `boolean
      | `bigint
      | `regexp
      | `date
      | `symbol
      | `array
      | `object_
      | `function_
      | `map
      | `set
      | `weakmap
      | `weakset
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `node
      | `window ]

    val _deepserializedvalue_type_of_yojson :
      Yojson.Basic.t -> _deepserializedvalue_type

    val yojson_of__deepserializedvalue_type :
      _deepserializedvalue_type -> Yojson.Basic.t

    type t = {
      type_ : _deepserializedvalue_type;
          [@key "type"] [@ocaml.doc "No description provided"]
      value : string option;
          [@key "value"] [@yojson.option] [@ocaml.doc "No description provided"]
      objectId : string option;
          [@key "objectId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      weakLocalObjectReference : number option;
          [@key "weakLocalObjectReference"]
          [@yojson.option]
          [@ocaml.doc
            "Set if value reference met more then once during serialization. \
             In such\n\
             case, value is provided only to one of the serialized values. \
             Unique\n\
             per value in the scope of one CDP call."]
    }
    [@@deriving yojson] [@@ocaml.doc "Represents deep serialized value."]
  end

  and RemoteObjectId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique object identifier."]
  end

  and UnserializableValue : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "Primitive value which cannot be JSON-stringified. Includes values `-0`, \
       `NaN`, `Infinity`,\n\
       `-Infinity`, and bigint literals."]
  end

  and RemoteObject : sig
    type _remoteobject_type =
      [ `object_
      | `function_
      | `undefined
      | `string
      | `number
      | `boolean
      | `symbol
      | `bigint ]

    val _remoteobject_type_of_yojson : Yojson.Basic.t -> _remoteobject_type
    val yojson_of__remoteobject_type : _remoteobject_type -> Yojson.Basic.t

    type _remoteobject_subtype =
      [ `array
      | `null
      | `node
      | `regexp
      | `date
      | `map
      | `set
      | `weakmap
      | `weakset
      | `iterator
      | `generator
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `dataview
      | `webassemblymemory
      | `wasmvalue ]

    val _remoteobject_subtype_of_yojson :
      Yojson.Basic.t -> _remoteobject_subtype

    val yojson_of__remoteobject_subtype :
      _remoteobject_subtype -> Yojson.Basic.t

    type t = {
      type_ : _remoteobject_type; [@key "type"] [@ocaml.doc "Object type."]
      subtype : _remoteobject_subtype option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Object subtype hint. Specified for `object` type values only.\n\
             NOTE: If you change anything here, make sure to also update\n\
             `subtype` in `ObjectPreview` and `PropertyPreview` below."]
      className : string option;
          [@key "className"]
          [@yojson.option]
          [@ocaml.doc
            "Object class (constructor) name. Specified for `object` type \
             values only."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc
            "Remote object value in case of primitive values or JSON values \
             (if it was requested)."]
      unserializableValue : UnserializableValue.t option;
          [@key "unserializableValue"]
          [@yojson.option]
          [@ocaml.doc
            "Primitive value which can not be JSON-stringified does not have \
             `value`, but gets this\n\
             property."]
      description : string option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc "String representation of the object."]
      webDriverValue : DeepSerializedValue.t option;
          [@key "webDriverValue"]
          [@yojson.option]
          [@ocaml.doc
            "Deprecated. Use `deepSerializedValue` instead. WebDriver BiDi \
             representation of the value."]
      deepSerializedValue : DeepSerializedValue.t option;
          [@key "deepSerializedValue"]
          [@yojson.option]
          [@ocaml.doc "Deep serialized value."]
      objectId : RemoteObjectId.t option;
          [@key "objectId"]
          [@yojson.option]
          [@ocaml.doc "Unique object identifier (for non-primitive values)."]
      preview : ObjectPreview.t option;
          [@key "preview"]
          [@yojson.option]
          [@ocaml.doc
            "Preview containing abbreviated property values. Specified for \
             `object` type values only."]
      customPreview : CustomPreview.t option;
          [@key "customPreview"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Mirror object referencing original JavaScript object."]
  end

  and CustomPreview : sig
    type t = {
      header : string;
          [@key "header"]
          [@ocaml.doc
            "The JSON-stringified result of formatter.header(object, config) \
             call.\n\
             It contains json ML array that represents RemoteObject."]
      bodyGetterId : RemoteObjectId.t option;
          [@key "bodyGetterId"]
          [@yojson.option]
          [@ocaml.doc
            "If formatter returns true as a result of formatter.hasBody call \
             then bodyGetterId will\n\
             contain RemoteObjectId for the function that returns result of \
             formatter.body(object, config) call.\n\
             The result value is json ML array."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ObjectPreview : sig
    type _objectpreview_type =
      [ `object_
      | `function_
      | `undefined
      | `string
      | `number
      | `boolean
      | `symbol
      | `bigint ]

    val _objectpreview_type_of_yojson : Yojson.Basic.t -> _objectpreview_type
    val yojson_of__objectpreview_type : _objectpreview_type -> Yojson.Basic.t

    type _objectpreview_subtype =
      [ `array
      | `null
      | `node
      | `regexp
      | `date
      | `map
      | `set
      | `weakmap
      | `weakset
      | `iterator
      | `generator
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `dataview
      | `webassemblymemory
      | `wasmvalue ]

    val _objectpreview_subtype_of_yojson :
      Yojson.Basic.t -> _objectpreview_subtype

    val yojson_of__objectpreview_subtype :
      _objectpreview_subtype -> Yojson.Basic.t

    type t = {
      type_ : _objectpreview_type; [@key "type"] [@ocaml.doc "Object type."]
      subtype : _objectpreview_subtype option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Object subtype hint. Specified for `object` type values only."]
      description : string option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc "String representation of the object."]
      overflow : bool;
          [@key "overflow"]
          [@ocaml.doc
            "True iff some of the properties or entries of the original object \
             did not fit."]
      properties : PropertyPreview.t list;
          [@key "properties"] [@ocaml.doc "List of the properties."]
      entries : EntryPreview.t list option;
          [@key "entries"]
          [@yojson.option]
          [@ocaml.doc
            "List of the entries. Specified for `map` and `set` subtype values \
             only."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Object containing abbreviated remote object value."]
  end

  and PropertyPreview : sig
    type _propertypreview_type =
      [ `object_
      | `function_
      | `undefined
      | `string
      | `number
      | `boolean
      | `symbol
      | `accessor
      | `bigint ]

    val _propertypreview_type_of_yojson :
      Yojson.Basic.t -> _propertypreview_type

    val yojson_of__propertypreview_type :
      _propertypreview_type -> Yojson.Basic.t

    type _propertypreview_subtype =
      [ `array
      | `null
      | `node
      | `regexp
      | `date
      | `map
      | `set
      | `weakmap
      | `weakset
      | `iterator
      | `generator
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `dataview
      | `webassemblymemory
      | `wasmvalue ]

    val _propertypreview_subtype_of_yojson :
      Yojson.Basic.t -> _propertypreview_subtype

    val yojson_of__propertypreview_subtype :
      _propertypreview_subtype -> Yojson.Basic.t

    type t = {
      name : string; [@key "name"] [@ocaml.doc "Property name."]
      type_ : _propertypreview_type;
          [@key "type"]
          [@ocaml.doc
            "Object type. Accessor means that the property itself is an \
             accessor property."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "User-friendly property value string."]
      valuePreview : ObjectPreview.t option;
          [@key "valuePreview"]
          [@yojson.option]
          [@ocaml.doc "Nested value preview."]
      subtype : _propertypreview_subtype option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Object subtype hint. Specified for `object` type values only."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and EntryPreview : sig
    type t = {
      key : ObjectPreview.t option;
          [@key "key"]
          [@yojson.option]
          [@ocaml.doc
            "Preview of the key. Specified for map-like collection entries."]
      value : ObjectPreview.t;
          [@key "value"] [@ocaml.doc "Preview of the value."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PropertyDescriptor : sig
    type t = {
      name : string;
          [@key "name"] [@ocaml.doc "Property name or symbol description."]
      value : RemoteObject.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value associated with the property."]
      writable : bool option;
          [@key "writable"]
          [@yojson.option]
          [@ocaml.doc
            "True if the value associated with the property may be changed \
             (data descriptors only)."]
      get : RemoteObject.t option;
          [@key "get"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a getter for the property, or \
             `undefined` if there is no getter\n\
             (accessor descriptors only)."]
      set : RemoteObject.t option;
          [@key "set"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a setter for the property, or \
             `undefined` if there is no setter\n\
             (accessor descriptors only)."]
      configurable : bool;
          [@key "configurable"]
          [@ocaml.doc
            "True if the type of this property descriptor may be changed and \
             if the property may be\n\
             deleted from the corresponding object."]
      enumerable : bool;
          [@key "enumerable"]
          [@ocaml.doc
            "True if this property shows up during enumeration of the \
             properties on the corresponding\n\
             object."]
      wasThrown : bool option;
          [@key "wasThrown"]
          [@yojson.option]
          [@ocaml.doc "True if the result was thrown during the evaluation."]
      isOwn : bool option;
          [@key "isOwn"]
          [@yojson.option]
          [@ocaml.doc "True if the property is owned for the object."]
      symbol : RemoteObject.t option;
          [@key "symbol"]
          [@yojson.option]
          [@ocaml.doc
            "Property symbol object, if the property is of the `symbol` type."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object property descriptor."]
  end

  and InternalPropertyDescriptor : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Conventional property name."]
      value : RemoteObject.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value associated with the property."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Object internal property descriptor. This property isn't normally \
       visible in JavaScript code."]
  end

  and PrivatePropertyDescriptor : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Private property name."]
      value : RemoteObject.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value associated with the private property."]
      get : RemoteObject.t option;
          [@key "get"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a getter for the private property,\n\
             or `undefined` if there is no getter (accessor descriptors only)."]
      set : RemoteObject.t option;
          [@key "set"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a setter for the private property,\n\
             or `undefined` if there is no setter (accessor descriptors only)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object private field descriptor."]
  end

  and CallArgument : sig
    type t = {
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "Primitive value or serializable javascript object."]
      unserializableValue : UnserializableValue.t option;
          [@key "unserializableValue"]
          [@yojson.option]
          [@ocaml.doc "Primitive value which can not be JSON-stringified."]
      objectId : RemoteObjectId.t option;
          [@key "objectId"]
          [@yojson.option]
          [@ocaml.doc "Remote object handle."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents function call argument. Either remote object id `objectId`, \
       primitive `value`,\n\
       unserializable primitive value or neither of (for undefined) them \
       should be specified."]
  end

  and ExecutionContextId : sig
    type t = number
    [@@deriving yojson] [@@ocaml.doc "Id of an execution context."]
  end

  and ExecutionContextDescription : sig
    type t = {
      id : ExecutionContextId.t;
          [@key "id"]
          [@ocaml.doc
            "Unique id of the execution context. It can be used to specify in \
             which execution context\n\
             script evaluation should be performed."]
      origin : string; [@key "origin"] [@ocaml.doc "Execution context origin."]
      name : string;
          [@key "name"]
          [@ocaml.doc "Human readable name describing given context."]
      uniqueId : string;
          [@key "uniqueId"]
          [@ocaml.doc
            "A system-unique execution context identifier. Unlike the id, this \
             is unique across\n\
             multiple processes, so can be reliably used to identify specific \
             context while backend\n\
             performs a cross-process navigation."]
      auxData : assoc option;
          [@key "auxData"]
          [@yojson.option]
          [@ocaml.doc
            "Embedder-specific auxiliary data likely matching {isDefault: \
             boolean, type: 'default'|'isolated'|'worker', frameId: string}"]
    }
    [@@deriving yojson] [@@ocaml.doc "Description of an isolated world."]
  end

  and ExceptionDetails : sig
    type t = {
      exceptionId : number; [@key "exceptionId"] [@ocaml.doc "Exception id."]
      text : string;
          [@key "text"]
          [@ocaml.doc
            "Exception text, which should be used together with exception \
             object when available."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number of the exception location (0-based)."]
      columnNumber : number;
          [@key "columnNumber"]
          [@ocaml.doc "Column number of the exception location (0-based)."]
      scriptId : ScriptId.t option;
          [@key "scriptId"]
          [@yojson.option]
          [@ocaml.doc "Script ID of the exception location."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc
            "URL of the exception location, to be used when the script was not \
             reported."]
      stackTrace : StackTrace.t option;
          [@key "stackTrace"]
          [@yojson.option]
          [@ocaml.doc "JavaScript stack trace if available."]
      exception_ : RemoteObject.t option;
          [@key "exception"]
          [@yojson.option]
          [@ocaml.doc "Exception object if available."]
      executionContextId : ExecutionContextId.t option;
          [@key "executionContextId"]
          [@yojson.option]
          [@ocaml.doc "Identifier of the context where exception happened."]
      exceptionMetaData : assoc option;
          [@key "exceptionMetaData"]
          [@yojson.option]
          [@ocaml.doc
            "Dictionary with entries of meta data that the client associated\n\
             with this exception, such as information about associated network\n\
             requests, etc."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Detailed information about exception (or error) that was thrown during \
       script compilation or\n\
       execution."]
  end

  and Timestamp : sig
    type t = number
    [@@deriving yojson] [@@ocaml.doc "Number of milliseconds since epoch."]
  end

  and TimeDelta : sig
    type t = number [@@deriving yojson] [@@ocaml.doc "Number of milliseconds."]
  end

  and CallFrame : sig
    type t = {
      functionName : string;
          [@key "functionName"] [@ocaml.doc "JavaScript function name."]
      scriptId : ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "JavaScript script id."]
      url : string; [@key "url"] [@ocaml.doc "JavaScript script name or url."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "JavaScript script line number (0-based)."]
      columnNumber : number;
          [@key "columnNumber"]
          [@ocaml.doc "JavaScript script column number (0-based)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Stack entry for runtime errors and assertions."]
  end

  and StackTrace : sig
    type t = {
      description : string option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc
            "String label of this stack trace. For async traces this may be a \
             name of the function that\n\
             initiated the async call."]
      callFrames : CallFrame.t list;
          [@key "callFrames"] [@ocaml.doc "JavaScript function name."]
      parent : StackTrace.t option;
          [@key "parent"]
          [@yojson.option]
          [@ocaml.doc
            "Asynchronous JavaScript stack trace that preceded this stack, if \
             available."]
      parentId : StackTraceId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc
            "Asynchronous JavaScript stack trace that preceded this stack, if \
             available."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Call frames for assertions or error messages."]
  end

  and UniqueDebuggerId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique identifier of current debugger."]
  end

  and StackTraceId : sig
    type t = {
      id : string; [@key "id"] [@ocaml.doc "No description provided"]
      debuggerId : UniqueDebuggerId.t option;
          [@key "debuggerId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "If `debuggerId` is set stack trace comes from another debugger and can \
       be resolved there. This\n\
       allows to track cross-debugger calls. See `Runtime.StackTrace` and \
       `Debugger.paused` for usages."]
  end
end = struct
  module rec ScriptId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique script identifier."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique script identifier."]
  end

  and SerializationOptions : sig
    type _serializationoptions_serialization = [ `deep | `json | `idOnly ]

    val _serializationoptions_serialization_of_yojson :
      Yojson.Basic.t -> _serializationoptions_serialization

    val yojson_of__serializationoptions_serialization :
      _serializationoptions_serialization -> Yojson.Basic.t

    type t = {
      serialization : _serializationoptions_serialization;
          [@key "serialization"] [@ocaml.doc "No description provided"]
      maxDepth : number option;
          [@key "maxDepth"]
          [@yojson.option]
          [@ocaml.doc
            "Deep serialization depth. Default is full depth. Respected only \
             in `deep` serialization mode."]
      additionalParameters : assoc option;
          [@key "additionalParameters"]
          [@yojson.option]
          [@ocaml.doc
            "Embedder-specific parameters. For example if connected to V8 in \
             Chrome these control DOM\n\
             serialization via `maxNodeDepth: integer` and `includeShadowTree: \
             \"none\" | \"open\" | \"all\"`.\n\
             Values can be only of type string or integer."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents options for serialization. Overrides `generatePreview`, \
       `returnByValue` and\n\
       `generateWebDriverValue`."]
  end = struct
    type _serializationoptions_serialization = [ `deep | `json | `idOnly ]

    let _serializationoptions_serialization_of_yojson = function
      | `String "deep" -> `deep
      | `String "json" -> `json
      | `String "idOnly" -> `idOnly
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__serializationoptions_serialization = function
      | `deep -> `String "deep"
      | `json -> `String "json"
      | `idOnly -> `String "idOnly"

    type t = {
      serialization : _serializationoptions_serialization;
          [@key "serialization"] [@ocaml.doc "No description provided"]
      maxDepth : number option;
          [@key "maxDepth"]
          [@yojson.option]
          [@ocaml.doc
            "Deep serialization depth. Default is full depth. Respected only \
             in `deep` serialization mode."]
      additionalParameters : assoc option;
          [@key "additionalParameters"]
          [@yojson.option]
          [@ocaml.doc
            "Embedder-specific parameters. For example if connected to V8 in \
             Chrome these control DOM\n\
             serialization via `maxNodeDepth: integer` and `includeShadowTree: \
             \"none\" | \"open\" | \"all\"`.\n\
             Values can be only of type string or integer."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents options for serialization. Overrides `generatePreview`, \
       `returnByValue` and\n\
       `generateWebDriverValue`."]
  end

  and DeepSerializedValue : sig
    type _deepserializedvalue_type =
      [ `undefined
      | `null
      | `string
      | `number
      | `boolean
      | `bigint
      | `regexp
      | `date
      | `symbol
      | `array
      | `object_
      | `function_
      | `map
      | `set
      | `weakmap
      | `weakset
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `node
      | `window ]

    val _deepserializedvalue_type_of_yojson :
      Yojson.Basic.t -> _deepserializedvalue_type

    val yojson_of__deepserializedvalue_type :
      _deepserializedvalue_type -> Yojson.Basic.t

    type t = {
      type_ : _deepserializedvalue_type;
          [@key "type"] [@ocaml.doc "No description provided"]
      value : string option;
          [@key "value"] [@yojson.option] [@ocaml.doc "No description provided"]
      objectId : string option;
          [@key "objectId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      weakLocalObjectReference : number option;
          [@key "weakLocalObjectReference"]
          [@yojson.option]
          [@ocaml.doc
            "Set if value reference met more then once during serialization. \
             In such\n\
             case, value is provided only to one of the serialized values. \
             Unique\n\
             per value in the scope of one CDP call."]
    }
    [@@deriving yojson] [@@ocaml.doc "Represents deep serialized value."]
  end = struct
    type _deepserializedvalue_type =
      [ `undefined
      | `null
      | `string
      | `number
      | `boolean
      | `bigint
      | `regexp
      | `date
      | `symbol
      | `array
      | `object_
      | `function_
      | `map
      | `set
      | `weakmap
      | `weakset
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `node
      | `window ]

    let _deepserializedvalue_type_of_yojson = function
      | `String "undefined" -> `undefined
      | `String "null" -> `null
      | `String "string" -> `string
      | `String "number" -> `number
      | `String "boolean" -> `boolean
      | `String "bigint" -> `bigint
      | `String "regexp" -> `regexp
      | `String "date" -> `date
      | `String "symbol" -> `symbol
      | `String "array" -> `array
      | `String "object" -> `object_
      | `String "function" -> `function_
      | `String "map" -> `map
      | `String "set" -> `set
      | `String "weakmap" -> `weakmap
      | `String "weakset" -> `weakset
      | `String "error" -> `error
      | `String "proxy" -> `proxy
      | `String "promise" -> `promise
      | `String "typedarray" -> `typedarray
      | `String "arraybuffer" -> `arraybuffer
      | `String "node" -> `node
      | `String "window" -> `window
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__deepserializedvalue_type = function
      | `undefined -> `String "undefined"
      | `null -> `String "null"
      | `string -> `String "string"
      | `number -> `String "number"
      | `boolean -> `String "boolean"
      | `bigint -> `String "bigint"
      | `regexp -> `String "regexp"
      | `date -> `String "date"
      | `symbol -> `String "symbol"
      | `array -> `String "array"
      | `object_ -> `String "object"
      | `function_ -> `String "function"
      | `map -> `String "map"
      | `set -> `String "set"
      | `weakmap -> `String "weakmap"
      | `weakset -> `String "weakset"
      | `error -> `String "error"
      | `proxy -> `String "proxy"
      | `promise -> `String "promise"
      | `typedarray -> `String "typedarray"
      | `arraybuffer -> `String "arraybuffer"
      | `node -> `String "node"
      | `window -> `String "window"

    type t = {
      type_ : _deepserializedvalue_type;
          [@key "type"] [@ocaml.doc "No description provided"]
      value : string option;
          [@key "value"] [@yojson.option] [@ocaml.doc "No description provided"]
      objectId : string option;
          [@key "objectId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
      weakLocalObjectReference : number option;
          [@key "weakLocalObjectReference"]
          [@yojson.option]
          [@ocaml.doc
            "Set if value reference met more then once during serialization. \
             In such\n\
             case, value is provided only to one of the serialized values. \
             Unique\n\
             per value in the scope of one CDP call."]
    }
    [@@deriving yojson] [@@ocaml.doc "Represents deep serialized value."]
  end

  and RemoteObjectId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique object identifier."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique object identifier."]
  end

  and UnserializableValue : sig
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "Primitive value which cannot be JSON-stringified. Includes values `-0`, \
       `NaN`, `Infinity`,\n\
       `-Infinity`, and bigint literals."]
  end = struct
    type t = string
    [@@deriving yojson]
    [@@ocaml.doc
      "Primitive value which cannot be JSON-stringified. Includes values `-0`, \
       `NaN`, `Infinity`,\n\
       `-Infinity`, and bigint literals."]
  end

  and RemoteObject : sig
    type _remoteobject_type =
      [ `object_
      | `function_
      | `undefined
      | `string
      | `number
      | `boolean
      | `symbol
      | `bigint ]

    val _remoteobject_type_of_yojson : Yojson.Basic.t -> _remoteobject_type
    val yojson_of__remoteobject_type : _remoteobject_type -> Yojson.Basic.t

    type _remoteobject_subtype =
      [ `array
      | `null
      | `node
      | `regexp
      | `date
      | `map
      | `set
      | `weakmap
      | `weakset
      | `iterator
      | `generator
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `dataview
      | `webassemblymemory
      | `wasmvalue ]

    val _remoteobject_subtype_of_yojson :
      Yojson.Basic.t -> _remoteobject_subtype

    val yojson_of__remoteobject_subtype :
      _remoteobject_subtype -> Yojson.Basic.t

    type t = {
      type_ : _remoteobject_type; [@key "type"] [@ocaml.doc "Object type."]
      subtype : _remoteobject_subtype option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Object subtype hint. Specified for `object` type values only.\n\
             NOTE: If you change anything here, make sure to also update\n\
             `subtype` in `ObjectPreview` and `PropertyPreview` below."]
      className : string option;
          [@key "className"]
          [@yojson.option]
          [@ocaml.doc
            "Object class (constructor) name. Specified for `object` type \
             values only."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc
            "Remote object value in case of primitive values or JSON values \
             (if it was requested)."]
      unserializableValue : UnserializableValue.t option;
          [@key "unserializableValue"]
          [@yojson.option]
          [@ocaml.doc
            "Primitive value which can not be JSON-stringified does not have \
             `value`, but gets this\n\
             property."]
      description : string option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc "String representation of the object."]
      webDriverValue : DeepSerializedValue.t option;
          [@key "webDriverValue"]
          [@yojson.option]
          [@ocaml.doc
            "Deprecated. Use `deepSerializedValue` instead. WebDriver BiDi \
             representation of the value."]
      deepSerializedValue : DeepSerializedValue.t option;
          [@key "deepSerializedValue"]
          [@yojson.option]
          [@ocaml.doc "Deep serialized value."]
      objectId : RemoteObjectId.t option;
          [@key "objectId"]
          [@yojson.option]
          [@ocaml.doc "Unique object identifier (for non-primitive values)."]
      preview : ObjectPreview.t option;
          [@key "preview"]
          [@yojson.option]
          [@ocaml.doc
            "Preview containing abbreviated property values. Specified for \
             `object` type values only."]
      customPreview : CustomPreview.t option;
          [@key "customPreview"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Mirror object referencing original JavaScript object."]
  end = struct
    type _remoteobject_type =
      [ `object_
      | `function_
      | `undefined
      | `string
      | `number
      | `boolean
      | `symbol
      | `bigint ]

    let _remoteobject_type_of_yojson = function
      | `String "object" -> `object_
      | `String "function" -> `function_
      | `String "undefined" -> `undefined
      | `String "string" -> `string
      | `String "number" -> `number
      | `String "boolean" -> `boolean
      | `String "symbol" -> `symbol
      | `String "bigint" -> `bigint
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__remoteobject_type = function
      | `object_ -> `String "object"
      | `function_ -> `String "function"
      | `undefined -> `String "undefined"
      | `string -> `String "string"
      | `number -> `String "number"
      | `boolean -> `String "boolean"
      | `symbol -> `String "symbol"
      | `bigint -> `String "bigint"

    type _remoteobject_subtype =
      [ `array
      | `null
      | `node
      | `regexp
      | `date
      | `map
      | `set
      | `weakmap
      | `weakset
      | `iterator
      | `generator
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `dataview
      | `webassemblymemory
      | `wasmvalue ]

    let _remoteobject_subtype_of_yojson = function
      | `String "array" -> `array
      | `String "null" -> `null
      | `String "node" -> `node
      | `String "regexp" -> `regexp
      | `String "date" -> `date
      | `String "map" -> `map
      | `String "set" -> `set
      | `String "weakmap" -> `weakmap
      | `String "weakset" -> `weakset
      | `String "iterator" -> `iterator
      | `String "generator" -> `generator
      | `String "error" -> `error
      | `String "proxy" -> `proxy
      | `String "promise" -> `promise
      | `String "typedarray" -> `typedarray
      | `String "arraybuffer" -> `arraybuffer
      | `String "dataview" -> `dataview
      | `String "webassemblymemory" -> `webassemblymemory
      | `String "wasmvalue" -> `wasmvalue
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__remoteobject_subtype = function
      | `array -> `String "array"
      | `null -> `String "null"
      | `node -> `String "node"
      | `regexp -> `String "regexp"
      | `date -> `String "date"
      | `map -> `String "map"
      | `set -> `String "set"
      | `weakmap -> `String "weakmap"
      | `weakset -> `String "weakset"
      | `iterator -> `String "iterator"
      | `generator -> `String "generator"
      | `error -> `String "error"
      | `proxy -> `String "proxy"
      | `promise -> `String "promise"
      | `typedarray -> `String "typedarray"
      | `arraybuffer -> `String "arraybuffer"
      | `dataview -> `String "dataview"
      | `webassemblymemory -> `String "webassemblymemory"
      | `wasmvalue -> `String "wasmvalue"

    type t = {
      type_ : _remoteobject_type; [@key "type"] [@ocaml.doc "Object type."]
      subtype : _remoteobject_subtype option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Object subtype hint. Specified for `object` type values only.\n\
             NOTE: If you change anything here, make sure to also update\n\
             `subtype` in `ObjectPreview` and `PropertyPreview` below."]
      className : string option;
          [@key "className"]
          [@yojson.option]
          [@ocaml.doc
            "Object class (constructor) name. Specified for `object` type \
             values only."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc
            "Remote object value in case of primitive values or JSON values \
             (if it was requested)."]
      unserializableValue : UnserializableValue.t option;
          [@key "unserializableValue"]
          [@yojson.option]
          [@ocaml.doc
            "Primitive value which can not be JSON-stringified does not have \
             `value`, but gets this\n\
             property."]
      description : string option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc "String representation of the object."]
      webDriverValue : DeepSerializedValue.t option;
          [@key "webDriverValue"]
          [@yojson.option]
          [@ocaml.doc
            "Deprecated. Use `deepSerializedValue` instead. WebDriver BiDi \
             representation of the value."]
      deepSerializedValue : DeepSerializedValue.t option;
          [@key "deepSerializedValue"]
          [@yojson.option]
          [@ocaml.doc "Deep serialized value."]
      objectId : RemoteObjectId.t option;
          [@key "objectId"]
          [@yojson.option]
          [@ocaml.doc "Unique object identifier (for non-primitive values)."]
      preview : ObjectPreview.t option;
          [@key "preview"]
          [@yojson.option]
          [@ocaml.doc
            "Preview containing abbreviated property values. Specified for \
             `object` type values only."]
      customPreview : CustomPreview.t option;
          [@key "customPreview"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Mirror object referencing original JavaScript object."]
  end

  and CustomPreview : sig
    type t = {
      header : string;
          [@key "header"]
          [@ocaml.doc
            "The JSON-stringified result of formatter.header(object, config) \
             call.\n\
             It contains json ML array that represents RemoteObject."]
      bodyGetterId : RemoteObjectId.t option;
          [@key "bodyGetterId"]
          [@yojson.option]
          [@ocaml.doc
            "If formatter returns true as a result of formatter.hasBody call \
             then bodyGetterId will\n\
             contain RemoteObjectId for the function that returns result of \
             formatter.body(object, config) call.\n\
             The result value is json ML array."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      header : string;
          [@key "header"]
          [@ocaml.doc
            "The JSON-stringified result of formatter.header(object, config) \
             call.\n\
             It contains json ML array that represents RemoteObject."]
      bodyGetterId : RemoteObjectId.t option;
          [@key "bodyGetterId"]
          [@yojson.option]
          [@ocaml.doc
            "If formatter returns true as a result of formatter.hasBody call \
             then bodyGetterId will\n\
             contain RemoteObjectId for the function that returns result of \
             formatter.body(object, config) call.\n\
             The result value is json ML array."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and ObjectPreview : sig
    type _objectpreview_type =
      [ `object_
      | `function_
      | `undefined
      | `string
      | `number
      | `boolean
      | `symbol
      | `bigint ]

    val _objectpreview_type_of_yojson : Yojson.Basic.t -> _objectpreview_type
    val yojson_of__objectpreview_type : _objectpreview_type -> Yojson.Basic.t

    type _objectpreview_subtype =
      [ `array
      | `null
      | `node
      | `regexp
      | `date
      | `map
      | `set
      | `weakmap
      | `weakset
      | `iterator
      | `generator
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `dataview
      | `webassemblymemory
      | `wasmvalue ]

    val _objectpreview_subtype_of_yojson :
      Yojson.Basic.t -> _objectpreview_subtype

    val yojson_of__objectpreview_subtype :
      _objectpreview_subtype -> Yojson.Basic.t

    type t = {
      type_ : _objectpreview_type; [@key "type"] [@ocaml.doc "Object type."]
      subtype : _objectpreview_subtype option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Object subtype hint. Specified for `object` type values only."]
      description : string option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc "String representation of the object."]
      overflow : bool;
          [@key "overflow"]
          [@ocaml.doc
            "True iff some of the properties or entries of the original object \
             did not fit."]
      properties : PropertyPreview.t list;
          [@key "properties"] [@ocaml.doc "List of the properties."]
      entries : EntryPreview.t list option;
          [@key "entries"]
          [@yojson.option]
          [@ocaml.doc
            "List of the entries. Specified for `map` and `set` subtype values \
             only."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Object containing abbreviated remote object value."]
  end = struct
    type _objectpreview_type =
      [ `object_
      | `function_
      | `undefined
      | `string
      | `number
      | `boolean
      | `symbol
      | `bigint ]

    let _objectpreview_type_of_yojson = function
      | `String "object" -> `object_
      | `String "function" -> `function_
      | `String "undefined" -> `undefined
      | `String "string" -> `string
      | `String "number" -> `number
      | `String "boolean" -> `boolean
      | `String "symbol" -> `symbol
      | `String "bigint" -> `bigint
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__objectpreview_type = function
      | `object_ -> `String "object"
      | `function_ -> `String "function"
      | `undefined -> `String "undefined"
      | `string -> `String "string"
      | `number -> `String "number"
      | `boolean -> `String "boolean"
      | `symbol -> `String "symbol"
      | `bigint -> `String "bigint"

    type _objectpreview_subtype =
      [ `array
      | `null
      | `node
      | `regexp
      | `date
      | `map
      | `set
      | `weakmap
      | `weakset
      | `iterator
      | `generator
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `dataview
      | `webassemblymemory
      | `wasmvalue ]

    let _objectpreview_subtype_of_yojson = function
      | `String "array" -> `array
      | `String "null" -> `null
      | `String "node" -> `node
      | `String "regexp" -> `regexp
      | `String "date" -> `date
      | `String "map" -> `map
      | `String "set" -> `set
      | `String "weakmap" -> `weakmap
      | `String "weakset" -> `weakset
      | `String "iterator" -> `iterator
      | `String "generator" -> `generator
      | `String "error" -> `error
      | `String "proxy" -> `proxy
      | `String "promise" -> `promise
      | `String "typedarray" -> `typedarray
      | `String "arraybuffer" -> `arraybuffer
      | `String "dataview" -> `dataview
      | `String "webassemblymemory" -> `webassemblymemory
      | `String "wasmvalue" -> `wasmvalue
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__objectpreview_subtype = function
      | `array -> `String "array"
      | `null -> `String "null"
      | `node -> `String "node"
      | `regexp -> `String "regexp"
      | `date -> `String "date"
      | `map -> `String "map"
      | `set -> `String "set"
      | `weakmap -> `String "weakmap"
      | `weakset -> `String "weakset"
      | `iterator -> `String "iterator"
      | `generator -> `String "generator"
      | `error -> `String "error"
      | `proxy -> `String "proxy"
      | `promise -> `String "promise"
      | `typedarray -> `String "typedarray"
      | `arraybuffer -> `String "arraybuffer"
      | `dataview -> `String "dataview"
      | `webassemblymemory -> `String "webassemblymemory"
      | `wasmvalue -> `String "wasmvalue"

    type t = {
      type_ : _objectpreview_type; [@key "type"] [@ocaml.doc "Object type."]
      subtype : _objectpreview_subtype option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Object subtype hint. Specified for `object` type values only."]
      description : string option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc "String representation of the object."]
      overflow : bool;
          [@key "overflow"]
          [@ocaml.doc
            "True iff some of the properties or entries of the original object \
             did not fit."]
      properties : PropertyPreview.t list;
          [@key "properties"] [@ocaml.doc "List of the properties."]
      entries : EntryPreview.t list option;
          [@key "entries"]
          [@yojson.option]
          [@ocaml.doc
            "List of the entries. Specified for `map` and `set` subtype values \
             only."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Object containing abbreviated remote object value."]
  end

  and PropertyPreview : sig
    type _propertypreview_type =
      [ `object_
      | `function_
      | `undefined
      | `string
      | `number
      | `boolean
      | `symbol
      | `accessor
      | `bigint ]

    val _propertypreview_type_of_yojson :
      Yojson.Basic.t -> _propertypreview_type

    val yojson_of__propertypreview_type :
      _propertypreview_type -> Yojson.Basic.t

    type _propertypreview_subtype =
      [ `array
      | `null
      | `node
      | `regexp
      | `date
      | `map
      | `set
      | `weakmap
      | `weakset
      | `iterator
      | `generator
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `dataview
      | `webassemblymemory
      | `wasmvalue ]

    val _propertypreview_subtype_of_yojson :
      Yojson.Basic.t -> _propertypreview_subtype

    val yojson_of__propertypreview_subtype :
      _propertypreview_subtype -> Yojson.Basic.t

    type t = {
      name : string; [@key "name"] [@ocaml.doc "Property name."]
      type_ : _propertypreview_type;
          [@key "type"]
          [@ocaml.doc
            "Object type. Accessor means that the property itself is an \
             accessor property."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "User-friendly property value string."]
      valuePreview : ObjectPreview.t option;
          [@key "valuePreview"]
          [@yojson.option]
          [@ocaml.doc "Nested value preview."]
      subtype : _propertypreview_subtype option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Object subtype hint. Specified for `object` type values only."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type _propertypreview_type =
      [ `object_
      | `function_
      | `undefined
      | `string
      | `number
      | `boolean
      | `symbol
      | `accessor
      | `bigint ]

    let _propertypreview_type_of_yojson = function
      | `String "object" -> `object_
      | `String "function" -> `function_
      | `String "undefined" -> `undefined
      | `String "string" -> `string
      | `String "number" -> `number
      | `String "boolean" -> `boolean
      | `String "symbol" -> `symbol
      | `String "accessor" -> `accessor
      | `String "bigint" -> `bigint
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__propertypreview_type = function
      | `object_ -> `String "object"
      | `function_ -> `String "function"
      | `undefined -> `String "undefined"
      | `string -> `String "string"
      | `number -> `String "number"
      | `boolean -> `String "boolean"
      | `symbol -> `String "symbol"
      | `accessor -> `String "accessor"
      | `bigint -> `String "bigint"

    type _propertypreview_subtype =
      [ `array
      | `null
      | `node
      | `regexp
      | `date
      | `map
      | `set
      | `weakmap
      | `weakset
      | `iterator
      | `generator
      | `error
      | `proxy
      | `promise
      | `typedarray
      | `arraybuffer
      | `dataview
      | `webassemblymemory
      | `wasmvalue ]

    let _propertypreview_subtype_of_yojson = function
      | `String "array" -> `array
      | `String "null" -> `null
      | `String "node" -> `node
      | `String "regexp" -> `regexp
      | `String "date" -> `date
      | `String "map" -> `map
      | `String "set" -> `set
      | `String "weakmap" -> `weakmap
      | `String "weakset" -> `weakset
      | `String "iterator" -> `iterator
      | `String "generator" -> `generator
      | `String "error" -> `error
      | `String "proxy" -> `proxy
      | `String "promise" -> `promise
      | `String "typedarray" -> `typedarray
      | `String "arraybuffer" -> `arraybuffer
      | `String "dataview" -> `dataview
      | `String "webassemblymemory" -> `webassemblymemory
      | `String "wasmvalue" -> `wasmvalue
      | `String s -> failwith ("unknown enum: " ^ s)
      | _ -> failwith "unknown enum type"

    let yojson_of__propertypreview_subtype = function
      | `array -> `String "array"
      | `null -> `String "null"
      | `node -> `String "node"
      | `regexp -> `String "regexp"
      | `date -> `String "date"
      | `map -> `String "map"
      | `set -> `String "set"
      | `weakmap -> `String "weakmap"
      | `weakset -> `String "weakset"
      | `iterator -> `String "iterator"
      | `generator -> `String "generator"
      | `error -> `String "error"
      | `proxy -> `String "proxy"
      | `promise -> `String "promise"
      | `typedarray -> `String "typedarray"
      | `arraybuffer -> `String "arraybuffer"
      | `dataview -> `String "dataview"
      | `webassemblymemory -> `String "webassemblymemory"
      | `wasmvalue -> `String "wasmvalue"

    type t = {
      name : string; [@key "name"] [@ocaml.doc "Property name."]
      type_ : _propertypreview_type;
          [@key "type"]
          [@ocaml.doc
            "Object type. Accessor means that the property itself is an \
             accessor property."]
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "User-friendly property value string."]
      valuePreview : ObjectPreview.t option;
          [@key "valuePreview"]
          [@yojson.option]
          [@ocaml.doc "Nested value preview."]
      subtype : _propertypreview_subtype option;
          [@key "subtype"]
          [@yojson.option]
          [@ocaml.doc
            "Object subtype hint. Specified for `object` type values only."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and EntryPreview : sig
    type t = {
      key : ObjectPreview.t option;
          [@key "key"]
          [@yojson.option]
          [@ocaml.doc
            "Preview of the key. Specified for map-like collection entries."]
      value : ObjectPreview.t;
          [@key "value"] [@ocaml.doc "Preview of the value."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end = struct
    type t = {
      key : ObjectPreview.t option;
          [@key "key"]
          [@yojson.option]
          [@ocaml.doc
            "Preview of the key. Specified for map-like collection entries."]
      value : ObjectPreview.t;
          [@key "value"] [@ocaml.doc "Preview of the value."]
    }
    [@@deriving yojson] [@@ocaml.doc "No description provided"]
  end

  and PropertyDescriptor : sig
    type t = {
      name : string;
          [@key "name"] [@ocaml.doc "Property name or symbol description."]
      value : RemoteObject.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value associated with the property."]
      writable : bool option;
          [@key "writable"]
          [@yojson.option]
          [@ocaml.doc
            "True if the value associated with the property may be changed \
             (data descriptors only)."]
      get : RemoteObject.t option;
          [@key "get"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a getter for the property, or \
             `undefined` if there is no getter\n\
             (accessor descriptors only)."]
      set : RemoteObject.t option;
          [@key "set"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a setter for the property, or \
             `undefined` if there is no setter\n\
             (accessor descriptors only)."]
      configurable : bool;
          [@key "configurable"]
          [@ocaml.doc
            "True if the type of this property descriptor may be changed and \
             if the property may be\n\
             deleted from the corresponding object."]
      enumerable : bool;
          [@key "enumerable"]
          [@ocaml.doc
            "True if this property shows up during enumeration of the \
             properties on the corresponding\n\
             object."]
      wasThrown : bool option;
          [@key "wasThrown"]
          [@yojson.option]
          [@ocaml.doc "True if the result was thrown during the evaluation."]
      isOwn : bool option;
          [@key "isOwn"]
          [@yojson.option]
          [@ocaml.doc "True if the property is owned for the object."]
      symbol : RemoteObject.t option;
          [@key "symbol"]
          [@yojson.option]
          [@ocaml.doc
            "Property symbol object, if the property is of the `symbol` type."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object property descriptor."]
  end = struct
    type t = {
      name : string;
          [@key "name"] [@ocaml.doc "Property name or symbol description."]
      value : RemoteObject.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value associated with the property."]
      writable : bool option;
          [@key "writable"]
          [@yojson.option]
          [@ocaml.doc
            "True if the value associated with the property may be changed \
             (data descriptors only)."]
      get : RemoteObject.t option;
          [@key "get"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a getter for the property, or \
             `undefined` if there is no getter\n\
             (accessor descriptors only)."]
      set : RemoteObject.t option;
          [@key "set"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a setter for the property, or \
             `undefined` if there is no setter\n\
             (accessor descriptors only)."]
      configurable : bool;
          [@key "configurable"]
          [@ocaml.doc
            "True if the type of this property descriptor may be changed and \
             if the property may be\n\
             deleted from the corresponding object."]
      enumerable : bool;
          [@key "enumerable"]
          [@ocaml.doc
            "True if this property shows up during enumeration of the \
             properties on the corresponding\n\
             object."]
      wasThrown : bool option;
          [@key "wasThrown"]
          [@yojson.option]
          [@ocaml.doc "True if the result was thrown during the evaluation."]
      isOwn : bool option;
          [@key "isOwn"]
          [@yojson.option]
          [@ocaml.doc "True if the property is owned for the object."]
      symbol : RemoteObject.t option;
          [@key "symbol"]
          [@yojson.option]
          [@ocaml.doc
            "Property symbol object, if the property is of the `symbol` type."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object property descriptor."]
  end

  and InternalPropertyDescriptor : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Conventional property name."]
      value : RemoteObject.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value associated with the property."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Object internal property descriptor. This property isn't normally \
       visible in JavaScript code."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Conventional property name."]
      value : RemoteObject.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value associated with the property."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Object internal property descriptor. This property isn't normally \
       visible in JavaScript code."]
  end

  and PrivatePropertyDescriptor : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Private property name."]
      value : RemoteObject.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value associated with the private property."]
      get : RemoteObject.t option;
          [@key "get"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a getter for the private property,\n\
             or `undefined` if there is no getter (accessor descriptors only)."]
      set : RemoteObject.t option;
          [@key "set"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a setter for the private property,\n\
             or `undefined` if there is no setter (accessor descriptors only)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object private field descriptor."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Private property name."]
      value : RemoteObject.t option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "The value associated with the private property."]
      get : RemoteObject.t option;
          [@key "get"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a getter for the private property,\n\
             or `undefined` if there is no getter (accessor descriptors only)."]
      set : RemoteObject.t option;
          [@key "set"]
          [@yojson.option]
          [@ocaml.doc
            "A function which serves as a setter for the private property,\n\
             or `undefined` if there is no setter (accessor descriptors only)."]
    }
    [@@deriving yojson] [@@ocaml.doc "Object private field descriptor."]
  end

  and CallArgument : sig
    type t = {
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "Primitive value or serializable javascript object."]
      unserializableValue : UnserializableValue.t option;
          [@key "unserializableValue"]
          [@yojson.option]
          [@ocaml.doc "Primitive value which can not be JSON-stringified."]
      objectId : RemoteObjectId.t option;
          [@key "objectId"]
          [@yojson.option]
          [@ocaml.doc "Remote object handle."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents function call argument. Either remote object id `objectId`, \
       primitive `value`,\n\
       unserializable primitive value or neither of (for undefined) them \
       should be specified."]
  end = struct
    type t = {
      value : string option;
          [@key "value"]
          [@yojson.option]
          [@ocaml.doc "Primitive value or serializable javascript object."]
      unserializableValue : UnserializableValue.t option;
          [@key "unserializableValue"]
          [@yojson.option]
          [@ocaml.doc "Primitive value which can not be JSON-stringified."]
      objectId : RemoteObjectId.t option;
          [@key "objectId"]
          [@yojson.option]
          [@ocaml.doc "Remote object handle."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Represents function call argument. Either remote object id `objectId`, \
       primitive `value`,\n\
       unserializable primitive value or neither of (for undefined) them \
       should be specified."]
  end

  and ExecutionContextId : sig
    type t = number
    [@@deriving yojson] [@@ocaml.doc "Id of an execution context."]
  end = struct
    type t = number
    [@@deriving yojson] [@@ocaml.doc "Id of an execution context."]
  end

  and ExecutionContextDescription : sig
    type t = {
      id : ExecutionContextId.t;
          [@key "id"]
          [@ocaml.doc
            "Unique id of the execution context. It can be used to specify in \
             which execution context\n\
             script evaluation should be performed."]
      origin : string; [@key "origin"] [@ocaml.doc "Execution context origin."]
      name : string;
          [@key "name"]
          [@ocaml.doc "Human readable name describing given context."]
      uniqueId : string;
          [@key "uniqueId"]
          [@ocaml.doc
            "A system-unique execution context identifier. Unlike the id, this \
             is unique across\n\
             multiple processes, so can be reliably used to identify specific \
             context while backend\n\
             performs a cross-process navigation."]
      auxData : assoc option;
          [@key "auxData"]
          [@yojson.option]
          [@ocaml.doc
            "Embedder-specific auxiliary data likely matching {isDefault: \
             boolean, type: 'default'|'isolated'|'worker', frameId: string}"]
    }
    [@@deriving yojson] [@@ocaml.doc "Description of an isolated world."]
  end = struct
    type t = {
      id : ExecutionContextId.t;
          [@key "id"]
          [@ocaml.doc
            "Unique id of the execution context. It can be used to specify in \
             which execution context\n\
             script evaluation should be performed."]
      origin : string; [@key "origin"] [@ocaml.doc "Execution context origin."]
      name : string;
          [@key "name"]
          [@ocaml.doc "Human readable name describing given context."]
      uniqueId : string;
          [@key "uniqueId"]
          [@ocaml.doc
            "A system-unique execution context identifier. Unlike the id, this \
             is unique across\n\
             multiple processes, so can be reliably used to identify specific \
             context while backend\n\
             performs a cross-process navigation."]
      auxData : assoc option;
          [@key "auxData"]
          [@yojson.option]
          [@ocaml.doc
            "Embedder-specific auxiliary data likely matching {isDefault: \
             boolean, type: 'default'|'isolated'|'worker', frameId: string}"]
    }
    [@@deriving yojson] [@@ocaml.doc "Description of an isolated world."]
  end

  and ExceptionDetails : sig
    type t = {
      exceptionId : number; [@key "exceptionId"] [@ocaml.doc "Exception id."]
      text : string;
          [@key "text"]
          [@ocaml.doc
            "Exception text, which should be used together with exception \
             object when available."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number of the exception location (0-based)."]
      columnNumber : number;
          [@key "columnNumber"]
          [@ocaml.doc "Column number of the exception location (0-based)."]
      scriptId : ScriptId.t option;
          [@key "scriptId"]
          [@yojson.option]
          [@ocaml.doc "Script ID of the exception location."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc
            "URL of the exception location, to be used when the script was not \
             reported."]
      stackTrace : StackTrace.t option;
          [@key "stackTrace"]
          [@yojson.option]
          [@ocaml.doc "JavaScript stack trace if available."]
      exception_ : RemoteObject.t option;
          [@key "exception"]
          [@yojson.option]
          [@ocaml.doc "Exception object if available."]
      executionContextId : ExecutionContextId.t option;
          [@key "executionContextId"]
          [@yojson.option]
          [@ocaml.doc "Identifier of the context where exception happened."]
      exceptionMetaData : assoc option;
          [@key "exceptionMetaData"]
          [@yojson.option]
          [@ocaml.doc
            "Dictionary with entries of meta data that the client associated\n\
             with this exception, such as information about associated network\n\
             requests, etc."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Detailed information about exception (or error) that was thrown during \
       script compilation or\n\
       execution."]
  end = struct
    type t = {
      exceptionId : number; [@key "exceptionId"] [@ocaml.doc "Exception id."]
      text : string;
          [@key "text"]
          [@ocaml.doc
            "Exception text, which should be used together with exception \
             object when available."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "Line number of the exception location (0-based)."]
      columnNumber : number;
          [@key "columnNumber"]
          [@ocaml.doc "Column number of the exception location (0-based)."]
      scriptId : ScriptId.t option;
          [@key "scriptId"]
          [@yojson.option]
          [@ocaml.doc "Script ID of the exception location."]
      url : string option;
          [@key "url"]
          [@yojson.option]
          [@ocaml.doc
            "URL of the exception location, to be used when the script was not \
             reported."]
      stackTrace : StackTrace.t option;
          [@key "stackTrace"]
          [@yojson.option]
          [@ocaml.doc "JavaScript stack trace if available."]
      exception_ : RemoteObject.t option;
          [@key "exception"]
          [@yojson.option]
          [@ocaml.doc "Exception object if available."]
      executionContextId : ExecutionContextId.t option;
          [@key "executionContextId"]
          [@yojson.option]
          [@ocaml.doc "Identifier of the context where exception happened."]
      exceptionMetaData : assoc option;
          [@key "exceptionMetaData"]
          [@yojson.option]
          [@ocaml.doc
            "Dictionary with entries of meta data that the client associated\n\
             with this exception, such as information about associated network\n\
             requests, etc."]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "Detailed information about exception (or error) that was thrown during \
       script compilation or\n\
       execution."]
  end

  and Timestamp : sig
    type t = number
    [@@deriving yojson] [@@ocaml.doc "Number of milliseconds since epoch."]
  end = struct
    type t = number
    [@@deriving yojson] [@@ocaml.doc "Number of milliseconds since epoch."]
  end

  and TimeDelta : sig
    type t = number [@@deriving yojson] [@@ocaml.doc "Number of milliseconds."]
  end = struct
    type t = number [@@deriving yojson] [@@ocaml.doc "Number of milliseconds."]
  end

  and CallFrame : sig
    type t = {
      functionName : string;
          [@key "functionName"] [@ocaml.doc "JavaScript function name."]
      scriptId : ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "JavaScript script id."]
      url : string; [@key "url"] [@ocaml.doc "JavaScript script name or url."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "JavaScript script line number (0-based)."]
      columnNumber : number;
          [@key "columnNumber"]
          [@ocaml.doc "JavaScript script column number (0-based)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Stack entry for runtime errors and assertions."]
  end = struct
    type t = {
      functionName : string;
          [@key "functionName"] [@ocaml.doc "JavaScript function name."]
      scriptId : ScriptId.t;
          [@key "scriptId"] [@ocaml.doc "JavaScript script id."]
      url : string; [@key "url"] [@ocaml.doc "JavaScript script name or url."]
      lineNumber : number;
          [@key "lineNumber"]
          [@ocaml.doc "JavaScript script line number (0-based)."]
      columnNumber : number;
          [@key "columnNumber"]
          [@ocaml.doc "JavaScript script column number (0-based)."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Stack entry for runtime errors and assertions."]
  end

  and StackTrace : sig
    type t = {
      description : string option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc
            "String label of this stack trace. For async traces this may be a \
             name of the function that\n\
             initiated the async call."]
      callFrames : CallFrame.t list;
          [@key "callFrames"] [@ocaml.doc "JavaScript function name."]
      parent : StackTrace.t option;
          [@key "parent"]
          [@yojson.option]
          [@ocaml.doc
            "Asynchronous JavaScript stack trace that preceded this stack, if \
             available."]
      parentId : StackTraceId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc
            "Asynchronous JavaScript stack trace that preceded this stack, if \
             available."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Call frames for assertions or error messages."]
  end = struct
    type t = {
      description : string option;
          [@key "description"]
          [@yojson.option]
          [@ocaml.doc
            "String label of this stack trace. For async traces this may be a \
             name of the function that\n\
             initiated the async call."]
      callFrames : CallFrame.t list;
          [@key "callFrames"] [@ocaml.doc "JavaScript function name."]
      parent : StackTrace.t option;
          [@key "parent"]
          [@yojson.option]
          [@ocaml.doc
            "Asynchronous JavaScript stack trace that preceded this stack, if \
             available."]
      parentId : StackTraceId.t option;
          [@key "parentId"]
          [@yojson.option]
          [@ocaml.doc
            "Asynchronous JavaScript stack trace that preceded this stack, if \
             available."]
    }
    [@@deriving yojson]
    [@@ocaml.doc "Call frames for assertions or error messages."]
  end

  and UniqueDebuggerId : sig
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique identifier of current debugger."]
  end = struct
    type t = string
    [@@deriving yojson] [@@ocaml.doc "Unique identifier of current debugger."]
  end

  and StackTraceId : sig
    type t = {
      id : string; [@key "id"] [@ocaml.doc "No description provided"]
      debuggerId : UniqueDebuggerId.t option;
          [@key "debuggerId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "If `debuggerId` is set stack trace comes from another debugger and can \
       be resolved there. This\n\
       allows to track cross-debugger calls. See `Runtime.StackTrace` and \
       `Debugger.paused` for usages."]
  end = struct
    type t = {
      id : string; [@key "id"] [@ocaml.doc "No description provided"]
      debuggerId : UniqueDebuggerId.t option;
          [@key "debuggerId"]
          [@yojson.option]
          [@ocaml.doc "No description provided"]
    }
    [@@deriving yojson]
    [@@ocaml.doc
      "If `debuggerId` is set stack trace comes from another debugger and can \
       be resolved there. This\n\
       allows to track cross-debugger calls. See `Runtime.StackTrace` and \
       `Debugger.paused` for usages."]
  end
end

and Schema : sig
  module rec Domain : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Domain name."]
      version : string; [@key "version"] [@ocaml.doc "Domain version."]
    }
    [@@deriving yojson] [@@ocaml.doc "Description of the protocol domain."]
  end
end = struct
  module rec Domain : sig
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Domain name."]
      version : string; [@key "version"] [@ocaml.doc "Domain version."]
    }
    [@@deriving yojson] [@@ocaml.doc "Description of the protocol domain."]
  end = struct
    type t = {
      name : string; [@key "name"] [@ocaml.doc "Domain name."]
      version : string; [@key "version"] [@ocaml.doc "Domain version."]
    }
    [@@deriving yojson] [@@ocaml.doc "Description of the protocol domain."]
  end
end
